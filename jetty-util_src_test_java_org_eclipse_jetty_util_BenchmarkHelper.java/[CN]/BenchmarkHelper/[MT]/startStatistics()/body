{
synchronized (this) {
    if (starts.incrementAndGet() > 1)     return false;
    System.gc();
    System.err.println("\n========================================");
    System.err.println("Statistics Started at " + new Date());
    System.err.println("Operative System: " + operatingSystem.getName() + " "+ operatingSystem.getVersion()+ " "+ operatingSystem.getArch());
    System.err.println("JVM : " + System.getProperty("java.vm.vendor") + " "+ System.getProperty("java.vm.name")+ " runtime "+ System.getProperty("java.vm.version")+ " "+ System.getProperty("java.runtime.version"));
    System.err.println("Processors: " + operatingSystem.getAvailableProcessors());
    if (operatingSystem instanceof com.sun.management.OperatingSystemMXBean) {
      com.sun.management.OperatingSystemMXBean os=(com.sun.management.OperatingSystemMXBean)operatingSystem;
      long totalMemory=os.getTotalPhysicalMemorySize();
      long freeMemory=os.getFreePhysicalMemorySize();
      System.err.println("System Memory: " + percent(totalMemory - freeMemory,totalMemory) + "% used of "+ gibiBytes(totalMemory)+ " GiB");
    }
 else {
      System.err.println("System Memory: N/A");
    }
    MemoryUsage heapMemoryUsage=heapMemory.getHeapMemoryUsage();
    System.err.println("Used Heap Size: " + mebiBytes(heapMemoryUsage.getUsed()) + " MiB");
    System.err.println("Max Heap Size: " + mebiBytes(heapMemoryUsage.getMax()) + " MiB");
    if (hasMemoryPools) {
      long youngGenerationHeap=heapMemoryUsage.getMax() - oldMemoryPool.getUsage().getMax();
      System.err.println("Young Generation Heap Size: " + mebiBytes(youngGenerationHeap) + " MiB");
    }
 else {
      System.err.println("Young Generation Heap Size: N/A");
    }
    System.err.println("- - - - - - - - - - - - - - - - - - - - ");
    scheduler=Executors.newSingleThreadScheduledExecutor();
    polling=false;
    memoryPoller=scheduler.scheduleWithFixedDelay(this,0,250,TimeUnit.MILLISECONDS);
    lastYoungUsed=0;
    if (hasCollectors) {
      startYoungCollections=youngCollector.getCollectionCount();
      startYoungCollectionsTime=youngCollector.getCollectionTime();
    }
    totalYoungUsed=0;
    lastSurvivorUsed=0;
    totalSurvivorUsed=0;
    lastOldUsed=0;
    if (hasCollectors) {
      startOldCollections=oldCollector.getCollectionCount();
      startOldCollectionsTime=oldCollector.getCollectionTime();
    }
    totalOldUsed=0;
    startTime=System.nanoTime();
    if (operatingSystem instanceof com.sun.management.OperatingSystemMXBean) {
      com.sun.management.OperatingSystemMXBean os=(com.sun.management.OperatingSystemMXBean)operatingSystem;
      startProcessCPUTime=os.getProcessCpuTime();
    }
    startJITCTime=jitCompiler.getTotalCompilationTime();
    return true;
  }
}

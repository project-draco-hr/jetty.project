{
  try {
    if ((access & org.objectweb.asm.Opcodes.ACC_STATIC) > 0) {
      Log.warn("Skipping Resource annotation on " + className + "."+ methodName+ ": cannot be static");
      return;
    }
    if (!methodName.startsWith("set")) {
      Log.warn("Skipping Resource annotation on " + className + "."+ methodName+ ": invalid java bean, does not start with 'set'");
      return;
    }
    org.objectweb.asm.Type[] args=org.objectweb.asm.Type.getArgumentTypes(desc);
    if (args == null || args.length != 1) {
      Log.warn("Skipping Resource annotation on " + className + "."+ methodName+ ": invalid java bean, not single argument to method");
      return;
    }
    org.objectweb.asm.Type retVal=org.objectweb.asm.Type.getReturnType(desc);
    if (!org.objectweb.asm.Type.VOID_TYPE.equals(retVal)) {
      Log.warn("Skipping Resource annotation on " + className + "."+ methodName+ ": invalid java bean, not void");
      return;
    }
    String name=methodName.substring(3);
    name=name.substring(0,1).toLowerCase() + name.substring(1);
    name=className + "/" + name;
    String mappedName=null;
    org.objectweb.asm.Type resourceType=null;
    if (values != null) {
      for (      Value v : values) {
        if ("name".equals(v.getName()))         name=(String)(v.getValue());
 else         if ("mappedName".equals(v.getName()) && !"".equals((String)(v.getValue())))         mappedName=(String)(v.getValue());
 else         if ("type".equals(v.getName())) {
          resourceType=(org.objectweb.asm.Type)(v.getValue());
        }
      }
    }
    Injection webXmlInjection=_injections.getInjection(name,className,methodName,Util.asCanonicalName(args[0]));
    if (webXmlInjection == null) {
      try {
        boolean bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(_wac,name,mappedName);
        if (!bound)         bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(_wac.getServer(),name,mappedName);
        if (!bound)         bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(null,name,mappedName);
        if (!bound) {
          try {
            InitialContext ic=new InitialContext();
            String nameInEnvironment=(mappedName != null ? mappedName : name);
            ic.lookup("java:comp/env/" + nameInEnvironment);
            bound=true;
          }
 catch (          NameNotFoundException e) {
            bound=false;
          }
        }
        if (bound) {
          Log.debug("Bound " + (mappedName == null ? name : mappedName) + " as "+ name);
          Injection injection=new Injection();
          injection.setTarget(className,methodName,Util.asCanonicalName(args[0]),Util.asCanonicalName(resourceType));
          injection.setJndiName(name);
          injection.setMappingName(mappedName);
          _injections.add(injection);
        }
 else         if (!Util.isEnvEntryType(args[0].getDescriptor())) {
          throw new IllegalStateException("No resource at " + (mappedName == null ? name : mappedName));
        }
      }
 catch (      NamingException e) {
        if (!Util.isEnvEntryType(args[0].getDescriptor()))         throw new IllegalStateException(e);
      }
    }
  }
 catch (  Exception e) {
    Log.warn(e);
  }
}

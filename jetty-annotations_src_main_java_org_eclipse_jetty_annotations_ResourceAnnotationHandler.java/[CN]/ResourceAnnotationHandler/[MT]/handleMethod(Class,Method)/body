{
  Resource resource=(Resource)method.getAnnotation(Resource.class);
  if (resource != null) {
    if (Modifier.isStatic(method.getModifiers())) {
      Log.warn("Skipping Resource annotation on " + clazz.getName() + "."+ method.getName()+ ": cannot be static");
      return;
    }
    if (!method.getName().startsWith("set")) {
      Log.warn("Skipping Resource annotation on " + clazz.getName() + "."+ method.getName()+ ": invalid java bean, does not start with 'set'");
      return;
    }
    if (method.getParameterTypes().length != 1) {
      Log.warn("Skipping Resource annotation on " + clazz.getName() + "."+ method.getName()+ ": invalid java bean, not single argument to method");
      return;
    }
    if (Void.TYPE != method.getReturnType()) {
      Log.warn("Skipping Resource annotation on " + clazz.getName() + "."+ method.getName()+ ": invalid java bean, not void");
      return;
    }
    String name=method.getName().substring(3);
    name=name.substring(0,1).toLowerCase() + name.substring(1);
    name=clazz.getCanonicalName() + "/" + name;
    name=(resource.name() != null && !resource.name().trim().equals("") ? resource.name() : name);
    String mappedName=(resource.mappedName() != null && !resource.mappedName().trim().equals("") ? resource.mappedName() : null);
    Class paramType=method.getParameterTypes()[0];
    Class resourceType=resource.type();
    MetaData metaData=((MetaData)_context.getAttribute(MetaData.METADATA));
    if (metaData.getOriginDescriptor("resource-ref." + name + ".injection") != null) {
      return;
    }
    Injection injection=_injections.getInjection(name,clazz,method,paramType);
    if (injection == null) {
      try {
        boolean bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(_context,name,mappedName);
        if (!bound)         bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(_context.getServer(),name,mappedName);
        if (!bound)         bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(null,name,mappedName);
        if (!bound) {
          try {
            InitialContext ic=new InitialContext();
            String nameInEnvironment=(mappedName != null ? mappedName : name);
            ic.lookup("java:comp/env/" + nameInEnvironment);
            bound=true;
          }
 catch (          NameNotFoundException e) {
            bound=false;
          }
        }
        if (bound) {
          Log.debug("Bound " + (mappedName == null ? name : mappedName) + " as "+ name);
          injection=new Injection();
          injection.setTarget(clazz,method,paramType,resourceType);
          injection.setJndiName(name);
          injection.setMappingName(mappedName);
          _injections.add(injection);
          metaData.setOrigin("resource-ref." + name + ".injection");
        }
 else         if (!Util.isEnvEntryType(paramType)) {
          throw new IllegalStateException("No resource at " + (mappedName == null ? name : mappedName));
        }
      }
 catch (      NamingException e) {
        if (!Util.isEnvEntryType(paramType))         throw new IllegalStateException(e);
      }
    }
  }
}

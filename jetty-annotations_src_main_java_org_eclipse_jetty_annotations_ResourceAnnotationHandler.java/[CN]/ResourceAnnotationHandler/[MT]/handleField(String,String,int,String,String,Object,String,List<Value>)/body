{
  InjectionCollection injections=(InjectionCollection)_wac.getAttribute(InjectionCollection.INJECTION_COLLECTION);
  Class clazz=null;
  try {
    clazz=Loader.loadClass(null,className);
    Field f=clazz.getDeclaredField(fieldName);
    if (!Util.isServletType(clazz)) {
      Log.debug("Ignoring @Resource annotation on on-servlet type field " + fieldName);
      return;
    }
    Resource resource=(Resource)f.getAnnotation(Resource.class);
    if (resource == null)     return;
    if (Modifier.isStatic(f.getModifiers()))     throw new IllegalStateException(f + " cannot be static");
    if (Modifier.isFinal(f.getModifiers()))     throw new IllegalStateException(f + " cannot be final");
    String name=f.getDeclaringClass().getCanonicalName() + "/" + f.getName();
    name=(resource.name() != null && !resource.name().trim().equals("") ? resource.name() : name);
    Class type=f.getType();
    if ((resource.type() != null) && !resource.type().equals(Object.class) && (!IntrospectionUtil.isTypeCompatible(type,resource.type(),false)))     throw new IllegalStateException("@Resource incompatible type=" + resource.type() + " with field type ="+ f.getType());
    String mappedName=(resource.mappedName() != null && !resource.mappedName().trim().equals("") ? resource.mappedName() : null);
    Resource.AuthenticationType auth=resource.authenticationType();
    boolean shareable=resource.shareable();
    Injection webXmlInjection=injections.getInjection(f.getDeclaringClass(),f);
    if (webXmlInjection == null) {
      try {
        boolean bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(_wac,name,mappedName);
        if (!bound)         bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(_wac.getServer(),name,mappedName);
        if (!bound)         bound=org.eclipse.jetty.plus.jndi.NamingEntryUtil.bindToENC(null,name,mappedName);
        if (!bound) {
          try {
            InitialContext ic=new InitialContext();
            String nameInEnvironment=(mappedName != null ? mappedName : name);
            ic.lookup("java:comp/env/" + nameInEnvironment);
            bound=true;
          }
 catch (          NameNotFoundException e) {
            bound=false;
          }
        }
        if (bound) {
          Log.debug("Bound " + (mappedName == null ? name : mappedName) + " as "+ name);
          Injection injection=new Injection();
          injection.setTargetClass(f.getDeclaringClass());
          injection.setJndiName(name);
          injection.setMappingName(mappedName);
          injection.setTarget(f);
          injections.add(injection);
        }
 else         if (!Util.isEnvEntryType(type)) {
          throw new IllegalStateException("No resource at " + (mappedName == null ? name : mappedName));
        }
      }
 catch (      NamingException e) {
        if (!Util.isEnvEntryType(type))         throw new IllegalStateException(e);
      }
    }
 else {
      Object val=webXmlInjection.lookupInjectedValue();
      if (!IntrospectionUtil.isTypeCompatible(type,value.getClass(),false))       throw new IllegalStateException("Type of field=" + type + " is not compatible with Resource type="+ val.getClass());
    }
  }
 catch (  Exception e) {
    Log.warn(e);
  }
}

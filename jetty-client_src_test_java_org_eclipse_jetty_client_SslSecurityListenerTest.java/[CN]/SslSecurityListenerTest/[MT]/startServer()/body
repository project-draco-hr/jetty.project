{
  _server=new Server();
  SslSocketConnector connector=new SslSocketConnector();
  String keystore=System.getProperty("user.dir") + File.separator + "src"+ File.separator+ "test"+ File.separator+ "resources"+ File.separator+ "keystore";
  connector.setPort(0);
  connector.setKeystore(keystore);
  connector.setPassword("storepwd");
  connector.setKeyPassword("keypwd");
  _server.setConnectors(new Connector[]{connector});
  Constraint constraint=new Constraint();
  constraint.setName("Need User or Admin");
  constraint.setRoles(new String[]{"user","admin"});
  constraint.setAuthenticate(true);
  ConstraintMapping cm=new ConstraintMapping();
  cm.setConstraint(constraint);
  cm.setPathSpec("/*");
  HashLoginService loginService=new HashLoginService("MyRealm","src/test/resources/realm.properties");
  _server.addBean(loginService);
  BasicAuthenticator authenticator=new BasicAuthenticator();
  ConstraintSecurityHandler sh=new ConstraintSecurityHandler();
  sh.setAuthenticator(authenticator);
  Set<String> roles=new HashSet<String>(Arrays.asList(new String[]{"user","admin"}));
  sh.setConstraintMappings(new ConstraintMapping[]{cm},roles);
  _server.setHandler(sh);
  Handler testHandler=new AbstractHandler(){
    public void handle(    String target,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      Request base_request=(request instanceof Request) ? (Request)request : HttpConnection.getCurrentConnection().getRequest();
      base_request.setHandled(true);
      response.setStatus(200);
      response.setContentType("text/plain");
      if (request.getServerName().equals("jetty.eclipse.org")) {
        response.getOutputStream().println("Proxy request: " + request.getRequestURL());
      }
 else       if (request.getMethod().equalsIgnoreCase("GET")) {
        response.getOutputStream().println("<hello>");
        for (int i=0; i < 100; i++) {
          response.getOutputStream().println("  <world>" + i + "</world>");
          if (i % 20 == 0)           response.getOutputStream().flush();
        }
        response.getOutputStream().println("</hello>");
      }
 else {
        copyStream(request.getInputStream(),response.getOutputStream());
      }
    }
  }
;
  sh.setHandler(testHandler);
  _server.start();
  _port=connector.getLocalPort();
}

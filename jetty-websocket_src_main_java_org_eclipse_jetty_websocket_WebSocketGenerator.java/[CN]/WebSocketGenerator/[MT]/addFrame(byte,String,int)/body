{
  Buffer byte_buffer=_buffers.getBuffer();
  try {
    byte[] array=byte_buffer.array();
    int chars=content.length();
    int bytes=0;
    final int limit=array.length - 6;
    for (int i=0; i < chars; i++) {
      int code=content.charAt(i);
      if (bytes >= limit)       throw new IllegalArgumentException("frame too large");
      if ((code & 0xffffff80) == 0) {
        array[bytes++]=(byte)(code);
      }
 else       if ((code & 0xfffff800) == 0) {
        array[bytes++]=(byte)(0xc0 | (code >> 6));
        array[bytes++]=(byte)(0x80 | (code & 0x3f));
      }
 else       if ((code & 0xffff0000) == 0) {
        array[bytes++]=(byte)(0xe0 | (code >> 12));
        array[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
        array[bytes++]=(byte)(0x80 | (code & 0x3f));
      }
 else       if ((code & 0xff200000) == 0) {
        array[bytes++]=(byte)(0xf0 | (code >> 18));
        array[bytes++]=(byte)(0x80 | ((code >> 12) & 0x3f));
        array[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
        array[bytes++]=(byte)(0x80 | (code & 0x3f));
      }
 else       if ((code & 0xf4000000) == 0) {
        array[bytes++]=(byte)(0xf8 | (code >> 24));
        array[bytes++]=(byte)(0x80 | ((code >> 18) & 0x3f));
        array[bytes++]=(byte)(0x80 | ((code >> 12) & 0x3f));
        array[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
        array[bytes++]=(byte)(0x80 | (code & 0x3f));
      }
 else       if ((code & 0x80000000) == 0) {
        array[bytes++]=(byte)(0xfc | (code >> 30));
        array[bytes++]=(byte)(0x80 | ((code >> 24) & 0x3f));
        array[bytes++]=(byte)(0x80 | ((code >> 18) & 0x3f));
        array[bytes++]=(byte)(0x80 | ((code >> 12) & 0x3f));
        array[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
        array[bytes++]=(byte)(0x80 | (code & 0x3f));
      }
 else {
        array[bytes++]=(byte)('?');
      }
    }
    addFrame(frame,array,0,bytes,blockFor);
  }
  finally {
    _buffers.returnBuffer(byte_buffer);
  }
}

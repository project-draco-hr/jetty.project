{
  try {
    String authContextId=_authConfig.getAuthContextID(messageInfo);
    ServerAuthContext authContext=_authConfig.getAuthContext(authContextId,_serviceSubject,_authProperties);
    Subject clientSubject=new Subject();
    AuthStatus authStatus=authContext.validateRequest(messageInfo,clientSubject,_serviceSubject);
    if (authStatus == AuthStatus.SEND_CONTINUE)     return Authentication.SEND_CONTINUE;
    if (authStatus == AuthStatus.SEND_FAILURE)     return Authentication.SEND_FAILURE;
    if (authStatus == AuthStatus.SUCCESS) {
      Set<UserIdentity> ids=clientSubject.getPrivateCredentials(UserIdentity.class);
      UserIdentity userIdentity;
      if (ids.size() > 0) {
        userIdentity=ids.iterator().next();
      }
 else {
        CallerPrincipalCallback principalCallback=_callbackHandler.getThreadCallerPrincipalCallback();
        if (principalCallback == null) {
          return Authentication.UNAUTHENTICATED;
        }
        Principal principal=principalCallback.getPrincipal();
        if (principal == null) {
          String principalName=principalCallback.getName();
          Set<Principal> principals=principalCallback.getSubject().getPrincipals();
          for (          Principal p : principals) {
            if (p.getName().equals(principalName)) {
              principal=p;
              break;
            }
          }
          if (principal == null) {
            return Authentication.UNAUTHENTICATED;
          }
        }
        GroupPrincipalCallback groupPrincipalCallback=_callbackHandler.getThreadGroupPrincipalCallback();
        String[] groups=groupPrincipalCallback == null ? null : groupPrincipalCallback.getGroups();
        userIdentity=_identityService.newUserIdentity(clientSubject,principal,groups);
      }
      return new UserAuthentication(getAuthMethod(),userIdentity);
    }
    if (authStatus == AuthStatus.SEND_SUCCESS) {
      return Authentication.SEND_SUCCESS;
    }
    throw new NullPointerException("No AuthStatus returned");
  }
 catch (  AuthException e) {
    throw new ServerAuthException(e);
  }
}

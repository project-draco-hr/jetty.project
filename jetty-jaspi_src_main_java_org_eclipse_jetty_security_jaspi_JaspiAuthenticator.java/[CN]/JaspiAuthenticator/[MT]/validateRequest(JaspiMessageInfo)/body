{
  try {
    ServerAuthContext authContext=_authConfig.getAuthContext(_authContextId,_serviceSubject,_authProperties);
    Subject clientSubject=new Subject();
    AuthStatus authStatus=authContext.validateRequest(messageInfo,clientSubject,_serviceSubject);
    String authMethod=(String)messageInfo.getMap().get(JaspiMessageInfo.AUTH_METHOD_KEY);
    CallerPrincipalCallback principalCallback=_callbackHandler.getThreadCallerPrincipalCallback();
    Principal principal=principalCallback == null ? null : principalCallback.getPrincipal();
    GroupPrincipalCallback groupPrincipalCallback=_callbackHandler.getThreadGroupPrincipalCallback();
    String[] groups=groupPrincipalCallback == null ? null : groupPrincipalCallback.getGroups();
    if (authStatus == AuthStatus.SEND_CONTINUE)     return Authentication.CHALLENGE;
    if (authStatus == AuthStatus.SEND_FAILURE)     return Authentication.FAILED;
    Set<UserIdentity> ids=clientSubject.getPrivateCredentials(UserIdentity.class);
    if (ids.size() > 0) {
      if (authStatus == AuthStatus.SEND_SUCCESS)       return new DefaultAuthentication.Send(this,ids.iterator().next());
      return new DefaultAuthentication(this,ids.iterator().next());
    }
    return Authentication.FAILED;
  }
 catch (  AuthException e) {
    throw new ServerAuthException(e);
  }
}

{
  DeploymentManager depman=new DeploymentManager();
  depman.setDefaultLifeCycleGoal(null);
  AppLifeCyclePathCollector pathtracker=new AppLifeCyclePathCollector();
  MockAppProvider mockProvider=new MockAppProvider();
  MBeanContainer mbContainer=new MBeanContainer(ManagementFactory.getPlatformMBeanServer());
  mbContainer.start();
  mbContainer.addBean(depman);
  depman.addLifeCycleBinding(pathtracker);
  depman.addAppProvider(mockProvider);
  depman.setContexts(new ContextHandlerCollection());
  depman.start();
  mockProvider.findWebapp("foo-webapp-1.war");
  App app=depman.getAppByOriginId("mock-foo-webapp-1.war");
  depman.requestAppGoal(app,"deployed");
  JmxServiceConnection jmxConnection=new JmxServiceConnection();
  jmxConnection.connect();
  MBeanServerConnection mbsConnection=jmxConnection.getConnection();
  ObjectName dmObjName=new ObjectName("org.eclipse.jetty.deploy:type=deploymentmanager,id=0");
  String[] params=new String[]{"mock-foo-webapp-1.war","undeployed"};
  String[] signature=new String[]{"java.lang.String","java.lang.String"};
  mbsConnection.invoke(dmObjName,"requestAppGoal",params,signature);
  List<String> expected=new ArrayList<String>();
  expected.add("deploying");
  expected.add("deployed");
  expected.add("undeploying");
  expected.add("undeployed");
  pathtracker.assertExpected("Test JMX StateTransition / Deployed -> Undeployed",expected);
}

{
  final byte[] content=new byte[512];
  new Random().nextBytes(content);
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      response.getOutputStream().write(content);
    }
  }
);
  final AtomicInteger complete=new AtomicInteger();
  BufferingResponseListener listener=new BufferingResponseListener(){
    @Override public void onComplete(    Result result){
      complete.incrementAndGet();
    }
  }
;
  ContentResponse response=client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).onResponseContent(listener).onComplete(listener).send();
  Assert.assertEquals(200,response.getStatus());
  Assert.assertEquals(1,complete.get());
  Assert.assertArrayEquals(content,listener.getContent());
  Assert.assertArrayEquals(content,response.getContent());
}

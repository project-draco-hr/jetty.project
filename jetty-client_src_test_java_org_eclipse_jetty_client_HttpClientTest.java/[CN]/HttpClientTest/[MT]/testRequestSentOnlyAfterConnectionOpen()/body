{
  startServer(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
    }
  }
);
  final AtomicBoolean open=new AtomicBoolean();
  client=new HttpClient(new HttpClientTransportOverHTTP(){
    @Override protected HttpConnectionOverHTTP newHttpConnection(    EndPoint endPoint,    HttpDestination destination,    Promise<Connection> promise){
      return new HttpConnectionOverHTTP(endPoint,destination,promise){
        @Override public void onOpen(){
          open.set(true);
          super.onOpen();
        }
      }
;
    }
  }
,sslContextFactory);
  client.start();
  final CountDownLatch latch=new CountDownLatch(2);
  client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).onRequestBegin(new Request.BeginListener(){
    @Override public void onBegin(    Request request){
      Assert.assertTrue(open.get());
      latch.countDown();
    }
  }
).send(new Response.CompleteListener(){
    @Override public void onComplete(    Result result){
      if (result.isSucceeded())       latch.countDown();
    }
  }
);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

{
  start(new EmptyServerHandler());
  final AtomicInteger counter=new AtomicInteger();
  final CountDownLatch latch=new CountDownLatch(1);
  Response.Listener listener=new Response.Listener(){
    @Override public void onBegin(    Response response){
      counter.incrementAndGet();
    }
    @Override public boolean onHeader(    Response response,    HttpField field){
      return true;
    }
    @Override public void onHeaders(    Response response){
      counter.incrementAndGet();
    }
    @Override public void onContent(    Response response,    ByteBuffer content){
      counter.incrementAndGet();
    }
    @Override public void onSuccess(    Response response){
      counter.incrementAndGet();
    }
    @Override public void onFailure(    Response response,    Throwable failure){
      counter.incrementAndGet();
    }
    @Override public void onComplete(    Result result){
      Assert.assertEquals(200,result.getResponse().getStatus());
      counter.incrementAndGet();
      latch.countDown();
    }
  }
;
  client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).onResponseBegin(listener).onResponseHeader(listener).onResponseHeaders(listener).onResponseContent(listener).onResponseSuccess(listener).onResponseFailure(listener).send(listener);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  int expectedEventsTriggeredByOnResponseXXXListeners=3;
  int expectedEventsTriggeredByCompletionListener=4;
  int expected=expectedEventsTriggeredByOnResponseXXXListeners + expectedEventsTriggeredByCompletionListener;
  Assert.assertEquals(expected,counter.get());
}

{
  if (hasReachedDestination(destination)) {
    ListIterator<NodePath> pathiter=paths.listIterator();
    while (pathiter.hasNext()) {
      NodePath path=pathiter.next();
      if (path.lastNode() != destination) {
        pathiter.remove();
      }
    }
    return;
  }
  List<NodePath> extrapaths=null;
  boolean pathsAdded=false;
  for (  NodePath path : paths) {
    List<Edge> next=nextUnseenEdges(path);
    if (next.size() == 0) {
      continue;
    }
    pathsAdded=true;
    if (next.size() > 1) {
      if (extrapaths == null) {
        extrapaths=new ArrayList<NodePath>();
      }
      for (int i=1, n=next.size(); i < n; i++) {
        NodePath split=path.forkPath();
        split.add(next.get(i).getTo());
        extrapaths.add(split);
      }
    }
    Edge edge=next.get(0);
    path.add(edge.getTo());
    for (    Edge e : next) {
      seenEdges.add(e);
    }
  }
  if (extrapaths != null) {
    paths.addAll(extrapaths);
  }
  if (pathsAdded) {
    breadthFirst(destination);
  }
}

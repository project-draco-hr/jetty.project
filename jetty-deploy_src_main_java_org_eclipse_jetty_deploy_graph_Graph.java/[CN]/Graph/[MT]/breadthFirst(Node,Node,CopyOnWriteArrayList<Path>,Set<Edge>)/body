{
  boolean edgesAdded=false;
  if (paths.size() == 0)   paths.add(new Path());
  for (  Path path : paths) {
    Set<Edge> next=findEdgesFrom(path.nodes() == 0 ? from : path.lastNode());
    if (next.size() == 0)     continue;
    int splits=0;
    for (    Edge edge : next) {
      if (seen.contains(edge))       continue;
      seen.add(edge);
      Path nextPath=(++splits == next.size()) ? path : path.forkPath();
      nextPath.add(edge);
      if (destination.equals(edge.getTo()))       return nextPath;
      edgesAdded=true;
      if (nextPath != path)       paths.add(nextPath);
    }
  }
  if (edgesAdded)   return breadthFirst(from,destination,paths,seen);
  return null;
}

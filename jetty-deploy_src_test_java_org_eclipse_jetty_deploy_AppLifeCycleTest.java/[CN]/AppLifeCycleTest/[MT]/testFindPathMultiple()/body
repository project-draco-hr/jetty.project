{
  AppLifeCycle lifecycle=new AppLifeCycle();
  List<String> expected=new ArrayList<String>();
  File outputDir=MavenTestingUtils.getTargetTestingDir(this.getClass().getName() + ".testFindPathMultiple");
  outputDir.mkdirs();
  GraphOutputDot.write(lifecycle,new File(outputDir,"multiple-1.dot"));
  lifecycle.insertNode(lifecycle.getPath("deployed","started").getEdge(0),"staging");
  GraphOutputDot.write(lifecycle,new File(outputDir,"multiple-2.dot"));
  lifecycle.insertNode(lifecycle.getPath("staging","started").getEdge(0),"staged");
  GraphOutputDot.write(lifecycle,new File(outputDir,"multiple-3.dot"));
  expected.clear();
  assertPath(lifecycle,"deployed","deployed",expected);
  expected.clear();
  expected.add("deployed");
  expected.add("staging");
  expected.add("staged");
  assertPath(lifecycle,"deployed","staged",expected);
  expected.clear();
  expected.add("staged");
  expected.add("starting");
  expected.add("started");
  expected.add("stopping");
  expected.add("deployed");
  expected.add("undeploying");
  expected.add("undeployed");
  assertPath(lifecycle,"staged","undeployed",expected);
  expected.clear();
  expected.add("undeployed");
  expected.add("deploying");
  expected.add("deployed");
  expected.add("staging");
  expected.add("staged");
  expected.add("starting");
  expected.add("started");
  assertPath(lifecycle,"undeployed","started",expected);
}

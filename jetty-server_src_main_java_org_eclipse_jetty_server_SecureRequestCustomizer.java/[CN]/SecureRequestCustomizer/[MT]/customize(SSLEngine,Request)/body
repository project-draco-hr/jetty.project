{
  request.setScheme(HttpScheme.HTTPS.asString());
  SSLSession sslSession=sslEngine.getSession();
  if (_sniHostCheck) {
    String sniName=(String)sslSession.getValue("org.eclipse.jetty.util.ssl.sniname");
    if (sniName != null && !sniName.equalsIgnoreCase(request.getServerName())) {
      LOG.warn("Host does not match SNI Name: {}!={}",sniName,request.getServerName());
      throw new BadMessageException(400,"Host does not match SNI");
    }
  }
  try {
    String cipherSuite=sslSession.getCipherSuite();
    Integer keySize;
    X509Certificate[] certs;
    String idStr;
    CachedInfo cachedInfo=(CachedInfo)sslSession.getValue(CACHED_INFO_ATTR);
    if (cachedInfo != null) {
      keySize=cachedInfo.getKeySize();
      certs=cachedInfo.getCerts();
      idStr=cachedInfo.getIdStr();
    }
 else {
      keySize=new Integer(SslContextFactory.deduceKeyLength(cipherSuite));
      certs=SslContextFactory.getCertChain(sslSession);
      byte[] bytes=sslSession.getId();
      idStr=TypeUtil.toHexString(bytes);
      cachedInfo=new CachedInfo(keySize,certs,idStr);
      sslSession.putValue(CACHED_INFO_ATTR,cachedInfo);
    }
    if (certs != null)     request.setAttribute("javax.servlet.request.X509Certificate",certs);
    request.setAttribute("javax.servlet.request.cipher_suite",cipherSuite);
    request.setAttribute("javax.servlet.request.key_size",keySize);
    request.setAttribute("javax.servlet.request.ssl_session_id",idStr);
  }
 catch (  Exception e) {
    LOG.warn(Log.EXCEPTION,e);
  }
}

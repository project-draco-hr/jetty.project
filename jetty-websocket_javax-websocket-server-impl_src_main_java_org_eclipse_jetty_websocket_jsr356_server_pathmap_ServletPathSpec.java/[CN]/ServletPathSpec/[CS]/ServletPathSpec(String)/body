{
  super();
  assertValidServletPathSpec(servletPathSpec);
  if ((servletPathSpec == null) || (servletPathSpec.length() == 0) || "/".equals(servletPathSpec)) {
    super.pathSpec="/";
    super.pattern=Pattern.compile("^(/.*)$");
    super.pathDepth=-1;
    this.specLength=1;
    this.group=PathSpecGroup.DEFAULT;
    return;
  }
  StringBuilder regex=new StringBuilder();
  regex.append("^");
  this.specLength=servletPathSpec.length();
  super.pathDepth=0;
  char lastChar=servletPathSpec.charAt(specLength - 1);
  if ((servletPathSpec.charAt(0) == '/') && (specLength > 1) && (lastChar == '*')) {
    this.group=PathSpecGroup.PREFIX_GLOB;
  }
 else   if (servletPathSpec.charAt(0) == '*') {
    this.group=PathSpecGroup.SUFFIX_GLOB;
  }
 else {
    this.group=PathSpecGroup.EXACT;
  }
  for (int i=0; i < specLength; i++) {
    int cp=servletPathSpec.codePointAt(i);
    if (cp >= 128) {
      regex.appendCodePoint(cp);
    }
 else {
      char c=(char)cp;
switch (c) {
case '*':
        if (group != PathSpecGroup.PREFIX_GLOB) {
          regex.append(".*");
        }
      break;
case '.':
    regex.append("\\.");
  break;
case '/':
super.pathDepth++;
if ((group == PathSpecGroup.PREFIX_GLOB) && (i == (specLength - 2))) {
regex.append("(/.*)?");
}
 else {
regex.append('/');
}
break;
default :
regex.append(c);
break;
}
}
}
if ((group == PathSpecGroup.EXACT) && (lastChar != '/')) {
super.pathDepth++;
regex.append("/?$");
}
 else {
regex.append('$');
}
super.pathSpec=servletPathSpec;
super.pattern=Pattern.compile(regex.toString());
}

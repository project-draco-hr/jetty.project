{
switch (_state) {
case START:
{
      if (info == null)       return Result.NEED_INFO;
      if (header == null)       return Result.NEED_HEADER;
      if (_persistent == null)       _persistent=(info.getHttpVersion().ordinal() > HttpVersion.HTTP_1_0.ordinal());
      int pos=BufferUtil.flipToFill(header);
      try {
        generateRequestLine(info,header);
        if (info.getHttpVersion() == HttpVersion.HTTP_0_9)         _noContent=true;
 else         generateHeaders(info,header,content,last);
        boolean expect100=info.getHttpFields().contains(HttpHeader.EXPECT,HttpHeaderValue.CONTINUE.asString());
        if (expect100) {
          _state=State.COMMITTED;
        }
 else {
          int len=BufferUtil.length(content);
          if (len > 0) {
            _contentPrepared+=len;
            if (isChunking())             prepareChunk(header,len);
          }
          _state=last ? State.COMPLETING : State.COMMITTED;
        }
        return Result.FLUSH;
      }
 catch (      Exception e) {
        String message=(e instanceof BufferOverflowException) ? "Response header too large" : e.getMessage();
        throw new IOException(message,e);
      }
 finally {
        BufferUtil.flipToFlush(header,pos);
      }
    }
case COMMITTED:
{
    int len=BufferUtil.length(content);
    if (len > 0) {
      if (isChunking()) {
        if (chunk == null)         return Result.NEED_CHUNK;
        BufferUtil.clearToFill(chunk);
        prepareChunk(chunk,len);
        BufferUtil.flipToFlush(chunk,0);
      }
      _contentPrepared+=len;
    }
    if (last) {
      _state=State.COMPLETING;
      return len > 0 ? Result.FLUSH : Result.CONTINUE;
    }
    return Result.FLUSH;
  }
case COMPLETING:
{
  if (BufferUtil.hasContent(content)) {
    if (LOG.isDebugEnabled())     LOG.debug("discarding content in COMPLETING");
    BufferUtil.clear(content);
  }
  if (isChunking()) {
    if (chunk == null)     return Result.NEED_CHUNK;
    BufferUtil.clearToFill(chunk);
    prepareChunk(chunk,0);
    BufferUtil.flipToFlush(chunk,0);
    _endOfContent=EndOfContent.UNKNOWN_CONTENT;
    return Result.FLUSH;
  }
  _state=State.END;
  return Boolean.TRUE.equals(_persistent) ? Result.DONE : Result.SHUTDOWN_OUT;
}
case END:
if (BufferUtil.hasContent(content)) {
if (LOG.isDebugEnabled()) LOG.debug("discarding content in COMPLETING");
BufferUtil.clear(content);
}
return Result.DONE;
default :
throw new IllegalStateException();
}
}

{
  if (_state != State.HEADER)   return;
  if (isResponse() && _status == 0)   throw new EofException();
  if (_last && !allContentAdded)   throw new IllegalStateException("last?");
  _last=_last | allContentAdded;
  if (isRequest() && _version == HttpVersion.HTTP_0_9)   _noContent=true;
  boolean has_server=false;
  try {
    if (isRequest()) {
      _persistent=true;
      if (_version == HttpVersion.HTTP_0_9) {
        _contentLength=HttpTokens.NO_CONTENT;
        buffer.put(_method);
        buffer.put((byte)' ');
        buffer.put(_uri);
        buffer.put(HttpTokens.CRLF);
        _state=State.FLUSHING;
        _noContent=true;
        return;
      }
 else {
        buffer.put(_method);
        buffer.put((byte)' ');
        buffer.put(_uri);
        buffer.put((byte)' ');
        buffer.put((_version == HttpVersion.HTTP_1_0 ? HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1).toBytes());
        buffer.put(HttpTokens.CRLF);
      }
    }
 else {
      if (_version == HttpVersion.HTTP_0_9) {
        _persistent=false;
        _contentLength=HttpTokens.EOF_CONTENT;
        _state=State.CONTENT;
        return;
      }
 else {
        if (_persistent == null)         _persistent=(_version.ordinal() > HttpVersion.HTTP_1_0.ordinal());
        Status status=_status < __status.length ? __status[_status] : null;
        if (status == null) {
          buffer.put(HTTP_1_1_SPACE);
          buffer.put((byte)('0' + _status / 100));
          buffer.put((byte)('0' + (_status % 100) / 10));
          buffer.put((byte)('0' + (_status % 10)));
          buffer.put((byte)' ');
          if (_reason == null) {
            buffer.put((byte)('0' + _status / 100));
            buffer.put((byte)('0' + (_status % 100) / 10));
            buffer.put((byte)('0' + (_status % 10)));
          }
 else           buffer.put(_reason);
          buffer.put(HttpTokens.CRLF);
        }
 else {
          if (_reason == null)           buffer.put(status._responseLine);
 else {
            buffer.put(status._schemeCode);
            buffer.put(_reason);
            buffer.put(HttpTokens.CRLF);
          }
        }
        if (_status < 200 && _status >= 100) {
          _noContent=true;
          if (_status != 101) {
            buffer.put(HttpTokens.CRLF);
            _state=State.CONTENT;
            return;
          }
        }
 else         if (_status == 204 || _status == 304) {
          _noContent=true;
        }
      }
    }
    if (_status >= 200 && _date != null) {
      buffer.put(HttpHeader.DATE.toBytesColonSpace());
      buffer.put(_date);
      buffer.put(CRLF);
    }
    HttpFields.Field content_length=null;
    HttpFields.Field transfer_encoding=null;
    boolean keep_alive=false;
    boolean close=false;
    boolean content_type=false;
    StringBuilder connection=null;
    if (fields != null) {
      int s=fields.size();
      for (int f=0; f < s; f++) {
        HttpFields.Field field=fields.getField(f);
        if (field == null)         continue;
        HttpHeader header=HttpHeader.CACHE.get(field.getName());
        HttpHeaderValue value=null;
switch (header == null ? HttpHeader.UNKNOWN : header) {
case CONTENT_LENGTH:
          content_length=field;
        _contentLength=field.getLongValue();
      if (_contentLength < _contentWritten || _last && _contentLength != _contentWritten)       content_length=null;
    field.putTo(buffer);
  break;
case CONTENT_TYPE:
if (field.getValue().startsWith(MimeTypes.Type.MULTIPART_BYTERANGES.toString())) _contentLength=HttpTokens.SELF_DEFINING_CONTENT;
content_type=true;
field.putTo(buffer);
break;
case TRANSFER_ENCODING:
if (_version == HttpVersion.HTTP_1_1) transfer_encoding=field;
break;
case CONNECTION:
if (isRequest()) field.putTo(buffer);
value=HttpHeaderValue.CACHE.get(field.getValue());
switch (value == null ? HttpHeaderValue.UNKNOWN : value) {
case UPGRADE:
{
if (isResponse()) {
field.putTo(buffer);
continue;
}
}
case CLOSE:
{
close=true;
if (isResponse()) _persistent=false;
if (!_persistent && isResponse() && _contentLength == HttpTokens.UNKNOWN_CONTENT) _contentLength=HttpTokens.EOF_CONTENT;
break;
}
case KEEP_ALIVE:
{
if (_version == HttpVersion.HTTP_1_0) {
keep_alive=true;
if (isResponse()) _persistent=true;
}
break;
}
default :
{
String[] values=field.getValue().split(",");
for (int i=0; values != null && i < values.length; i++) {
HttpHeaderValue v=HttpHeaderValue.CACHE.get(field.getValue());
if (v != null) {
switch (v) {
case CLOSE:
close=true;
if (isResponse()) _persistent=false;
keep_alive=false;
if (!_persistent && isResponse() && _contentLength == HttpTokens.UNKNOWN_CONTENT) _contentLength=HttpTokens.EOF_CONTENT;
break;
case KEEP_ALIVE:
if (_version == HttpVersion.HTTP_1_0) {
keep_alive=true;
if (isResponse()) _persistent=true;
}
break;
default :
if (connection == null) connection=new StringBuilder();
 else connection.append(',');
connection.append(values[i]);
}
}
 else {
if (connection == null) connection=new StringBuilder();
 else connection.append(',');
connection.append(values[i]);
}
}
break;
}
}
break;
case SERVER:
if (getSendServerVersion()) {
has_server=true;
field.putTo(buffer);
}
break;
case UNKNOWN:
field.putTo(buffer);
break;
default :
buffer.put(header.toBytesColonSpace());
field.putValueTo(buffer);
buffer.put(CRLF);
}
}
}
switch ((int)_contentLength) {
case HttpTokens.UNKNOWN_CONTENT:
if (_contentWritten == 0 && isResponse() && (_status < 200 || _status == 204 || _status == 304)) _contentLength=HttpTokens.NO_CONTENT;
 else if (_last) {
_contentLength=_contentWritten;
if (content_length == null && (isResponse() || _contentLength > 0 || content_type) && !_noContent) {
buffer.put(HttpHeader.CONTENT_LENGTH.toBytes());
buffer.put(HttpTokens.COLON);
buffer.put((byte)' ');
BufferUtil.putDecLong(buffer,_contentLength);
buffer.put(HttpTokens.CRLF);
}
}
 else {
_contentLength=(!_persistent || _version.ordinal() < HttpVersion.HTTP_1_1.ordinal()) ? HttpTokens.EOF_CONTENT : HttpTokens.CHUNKED_CONTENT;
if (isRequest() && _contentLength == HttpTokens.EOF_CONTENT) {
_contentLength=HttpTokens.NO_CONTENT;
_noContent=true;
}
}
break;
case HttpTokens.NO_CONTENT:
if (content_length == null && isResponse() && _status >= 200 && _status != 204 && _status != 304) buffer.put(CONTENT_LENGTH_0);
break;
case HttpTokens.EOF_CONTENT:
_persistent=isRequest();
break;
case HttpTokens.CHUNKED_CONTENT:
break;
default :
break;
}
if (_contentLength == HttpTokens.CHUNKED_CONTENT) {
if (transfer_encoding != null && !HttpHeaderValue.CHUNKED.toString().equalsIgnoreCase(transfer_encoding.getValue())) {
String c=transfer_encoding.getValue();
if (c.endsWith(HttpHeaderValue.CHUNKED.toString())) transfer_encoding.putTo(buffer);
 else throw new IllegalArgumentException("BAD TE");
}
 else buffer.put(TRANSFER_ENCODING_CHUNKED);
}
if (_contentLength == HttpTokens.EOF_CONTENT) {
keep_alive=false;
_persistent=false;
}
if (isResponse()) {
if (!_persistent && (close || _version.ordinal() > HttpVersion.HTTP_1_0.ordinal())) {
if (connection == null) buffer.put(CONNECTION_CLOSE);
 else {
buffer.put(CONNECTION_CLOSE,0,CONNECTION_CLOSE.length - 2);
buffer.put((byte)',');
buffer.put(connection.toString().getBytes());
buffer.put(CRLF);
}
}
 else if (keep_alive) {
if (connection == null) buffer.put(CONNECTION_KEEP_ALIVE);
 else {
buffer.put(CONNECTION_KEEP_ALIVE,0,CONNECTION_CLOSE.length - 2);
buffer.put((byte)',');
buffer.put(connection.toString().getBytes());
buffer.put(CRLF);
}
}
 else if (connection != null) {
buffer.put(CONNECTION_);
buffer.put(connection.toString().getBytes());
buffer.put(CRLF);
}
}
if (!has_server && _status > 199 && getSendServerVersion()) buffer.put(SERVER);
buffer.put(HttpTokens.CRLF);
_state=State.CONTENT;
}
 catch (ArrayIndexOutOfBoundsException e) {
throw new RuntimeException("Header>" + buffer.capacity(),e);
}
}

{
  Result result=Result.OK;
  if (_state == State.END)   return result;
  if (action == null)   action=Action.PREPARE;
  if (BufferUtil.hasContent(content)) {
    if (_contentLength > 0 && content.remaining() > (_contentLength - _contentPrepared)) {
      LOG.warn("Content truncated at {}",new Throwable());
      content.limit(content.position() + (int)(_contentLength - _contentPrepared));
    }
    if (BufferUtil.isEmpty(buffer) && content.remaining() > _largeContent) {
      if (isCommitted()) {
        if (isChunking()) {
          if (chunk == null)           return Result.NEED_CHUNK;
          BufferUtil.clearToFill(chunk);
          prepareChunk(chunk,content.remaining());
          BufferUtil.flipToFlush(chunk,0);
        }
        _contentPrepared+=content.remaining();
        return Result.FLUSH_CONTENT;
      }
      _state=action == Action.COMPLETE ? State.COMMITTING_COMPLETING : State.COMMITTING;
      result=Result.FLUSH_CONTENT;
    }
 else {
      if (buffer == null)       return Result.NEED_BUFFER;
      _contentPrepared+=BufferUtil.put(content,buffer);
      if (BufferUtil.isAtCapacity(buffer)) {
        if (isCommitted()) {
          if (isChunking()) {
            if (chunk == null)             return Result.NEED_CHUNK;
            BufferUtil.clearToFill(chunk);
            prepareChunk(chunk,buffer.remaining());
            BufferUtil.flipToFlush(chunk,0);
          }
          return Result.FLUSH;
        }
        _state=action == Action.COMPLETE ? State.COMMITTING_COMPLETING : State.COMMITTING;
        result=Result.FLUSH;
      }
    }
  }
  if (result == Result.OK) {
switch (action) {
case COMPLETE:
      if (!isCommitted())       _state=State.COMMITTING_COMPLETING;
 else       if (_state == State.COMMITTED)       _state=State.COMPLETING;
    result=BufferUtil.hasContent(buffer) ? Result.FLUSH : Result.OK;
  break;
case FLUSH:
if (!isCommitted()) _state=State.COMMITTING;
result=BufferUtil.hasContent(buffer) ? Result.FLUSH : Result.OK;
break;
}
}
final int pos=header == null ? -1 : BufferUtil.flipToFill(header);
try {
switch (_state) {
case START:
return Result.OK;
case COMMITTING:
case COMMITTING_COMPLETING:
{
if (isRequest()) {
if (header == null || header.capacity() <= CHUNK_SIZE) return Result.NEED_HEADER;
if (_version == HttpVersion.HTTP_0_9) {
_noContent=true;
generateRequestLine(header);
_state=State.END;
return Result.OK;
}
_persistent=true;
generateRequestLine(header);
}
 else {
if (_version == HttpVersion.HTTP_0_9) {
_persistent=false;
_contentLength=HttpTokens.EOF_CONTENT;
_state=State.COMMITTED;
if (result == Result.FLUSH_CONTENT) _contentPrepared+=content.remaining();
return result;
}
if (header == null || header.capacity() <= CHUNK_SIZE) return Result.NEED_HEADER;
if (_persistent == null) _persistent=(_version.ordinal() > HttpVersion.HTTP_1_0.ordinal());
generateResponseLine(header);
if (_status >= 100 && _status < 200) {
_noContent=true;
if (_status != 101) {
header.put(HttpTokens.CRLF);
_state=State.START;
return Result.OK;
}
}
 else if (_status == 204 || _status == 304) {
_noContent=true;
}
}
boolean completing=action == Action.COMPLETE || _state == State.COMMITTING_COMPLETING;
generateHeaders(header,content,completing);
_state=completing ? State.COMPLETING : State.COMMITTED;
switch (result) {
case FLUSH:
if (isChunking()) prepareChunk(header,buffer.remaining());
break;
case FLUSH_CONTENT:
if (isChunking()) prepareChunk(header,content.remaining());
_contentPrepared+=content.remaining();
break;
case OK:
if (BufferUtil.hasContent(buffer)) {
if (isChunking()) prepareChunk(header,buffer.remaining());
}
result=Result.FLUSH;
}
return result;
}
case COMMITTED:
return Result.OK;
case COMPLETING:
if (isChunking()) {
if (chunk == null) return Result.NEED_CHUNK;
BufferUtil.clearToFill(chunk);
switch (result) {
case FLUSH:
prepareChunk(chunk,buffer.remaining());
break;
case FLUSH_CONTENT:
prepareChunk(chunk,content.remaining());
case OK:
if (BufferUtil.hasContent(buffer)) {
result=Result.FLUSH;
prepareChunk(chunk,buffer.remaining());
}
 else {
result=Result.FLUSH;
_state=State.END;
prepareChunk(chunk,0);
}
}
BufferUtil.flipToFlush(chunk,0);
}
 else if (result == Result.OK) {
if (BufferUtil.hasContent(buffer)) result=Result.FLUSH;
 else _state=State.END;
}
return result;
default :
throw new IllegalStateException();
}
}
  finally {
if (pos >= 0) BufferUtil.flipToFlush(header,pos);
}
}

{
switch (_state) {
case START:
{
      if (info == null)       return Result.NEED_INFO;
      HttpVersion version=info.getVersion();
      if (version == null)       throw new IllegalStateException("No version");
switch (version) {
case HTTP_1_0:
        if (_persistent == null)         _persistent=Boolean.FALSE;
      break;
case HTTP_1_1:
    if (_persistent == null)     _persistent=Boolean.TRUE;
  break;
default :
_persistent=false;
_endOfContent=EndOfContent.EOF_CONTENT;
if (BufferUtil.hasContent(content)) _contentPrepared+=content.remaining();
_state=last ? State.COMPLETING : State.COMMITTED;
return Result.FLUSH;
}
if (header == null) return Result.NEED_HEADER;
int pos=BufferUtil.flipToFill(header);
try {
generateResponseLine(info,header);
int status=info.getStatus();
if (status >= 100 && status < 200) {
_noContent=true;
if (status != HttpStatus.SWITCHING_PROTOCOLS_101) {
header.put(HttpTokens.CRLF);
_state=State.COMPLETING_1XX;
return Result.FLUSH;
}
}
 else if (status == HttpStatus.NO_CONTENT_204 || status == HttpStatus.NOT_MODIFIED_304) {
_noContent=true;
}
generateHeaders(info,header,content,last);
int len=BufferUtil.length(content);
if (len > 0) {
_contentPrepared+=len;
if (isChunking() && !head) prepareChunk(header,len);
}
_state=last ? State.COMPLETING : State.COMMITTED;
}
 catch (Exception e) {
String message=(e instanceof BufferOverflowException) ? "Response header too large" : e.getMessage();
throw new IOException(message,e);
}
 finally {
BufferUtil.flipToFlush(header,pos);
}
return Result.FLUSH;
}
case COMMITTED:
{
int len=BufferUtil.length(content);
if (len > 0) {
if (isChunking()) {
if (chunk == null) return Result.NEED_CHUNK;
BufferUtil.clearToFill(chunk);
prepareChunk(chunk,len);
BufferUtil.flipToFlush(chunk,0);
}
_contentPrepared+=len;
}
if (last) {
_state=State.COMPLETING;
return len > 0 ? Result.FLUSH : Result.CONTINUE;
}
return len > 0 ? Result.FLUSH : Result.DONE;
}
case COMPLETING_1XX:
{
reset();
return Result.DONE;
}
case COMPLETING:
{
if (BufferUtil.hasContent(content)) {
if (LOG.isDebugEnabled()) LOG.debug("discarding content in COMPLETING");
BufferUtil.clear(content);
}
if (isChunking()) {
if (chunk == null) return Result.NEED_CHUNK;
BufferUtil.clearToFill(chunk);
prepareChunk(chunk,0);
BufferUtil.flipToFlush(chunk,0);
_endOfContent=EndOfContent.UNKNOWN_CONTENT;
return Result.FLUSH;
}
_state=State.END;
return Boolean.TRUE.equals(_persistent) ? Result.DONE : Result.SHUTDOWN_OUT;
}
case END:
if (BufferUtil.hasContent(content)) {
if (LOG.isDebugEnabled()) LOG.debug("discarding content in COMPLETING");
BufferUtil.clear(content);
}
return Result.DONE;
default :
throw new IllegalStateException();
}
}

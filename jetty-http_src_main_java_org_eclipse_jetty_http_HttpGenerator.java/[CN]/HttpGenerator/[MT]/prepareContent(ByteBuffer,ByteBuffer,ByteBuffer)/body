{
  if (_contentLength > 0 && content.remaining() > (_contentLength - _contentPrepared)) {
    LOG.warn("Content truncated at {}",new Throwable());
    content.limit(content.position() + (int)(_contentLength - _contentPrepared));
  }
switch (_state) {
case START:
    if (BufferUtil.isEmpty(buffer) && content.remaining() > _largeContent)     return Result.NEED_COMMIT;
  if (buffer == null)   return Result.NEED_BUFFER;
_contentPrepared+=BufferUtil.put(content,buffer);
if (BufferUtil.isAtCapacity(buffer)) return Result.NEED_COMMIT;
return Result.OK;
case COMPLETING:
return Result.NEED_COMPLETE;
case COMMITTED:
if (BufferUtil.isEmpty(buffer) && content.remaining() > _largeContent) {
if (isChunking()) {
if (chunk == null) return Result.NEED_CHUNK;
BufferUtil.clearToFill(chunk);
prepareChunk(chunk,content.remaining());
BufferUtil.flipToFlush(chunk,0);
}
_contentPrepared+=content.remaining();
return Result.FLUSH_CONTENT;
}
if (buffer == null) return Result.NEED_BUFFER;
_contentPrepared+=BufferUtil.put(content,buffer);
if (BufferUtil.isAtCapacity(buffer)) {
if (isChunking()) {
if (chunk == null) return Result.NEED_CHUNK;
BufferUtil.clearToFill(chunk);
prepareChunk(chunk,buffer.remaining());
BufferUtil.flipToFlush(chunk,0);
}
return Result.FLUSH;
}
return Result.OK;
default :
throw new IllegalStateException();
}
}

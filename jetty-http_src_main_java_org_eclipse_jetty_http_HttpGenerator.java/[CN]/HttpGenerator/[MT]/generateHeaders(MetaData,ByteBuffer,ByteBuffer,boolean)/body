{
  final MetaData.Request request=(_info instanceof MetaData.Request) ? (MetaData.Request)_info : null;
  final MetaData.Response response=(_info instanceof MetaData.Response) ? (MetaData.Response)_info : null;
  int send=_send;
  HttpField transfer_encoding=null;
  boolean keep_alive=false;
  boolean close=false;
  boolean content_type=false;
  StringBuilder connection=null;
  if (_info.getFields() != null) {
    for (    HttpField field : _info.getFields()) {
      String v=field.getValue();
      if (v == null || v.length() == 0)       continue;
      HttpHeader h=field.getHeader();
switch (h == null ? HttpHeader.UNKNOWN : h) {
case CONTENT_LENGTH:
        if (_info.getContentLength() >= 0)         _endOfContent=EndOfContent.CONTENT_LENGTH;
      break;
case CONTENT_TYPE:
{
      if (field.getValue().startsWith(MimeTypes.Type.MULTIPART_BYTERANGES.toString()))       _endOfContent=EndOfContent.SELF_DEFINING_CONTENT;
      content_type=true;
      putTo(field,header);
      break;
    }
case TRANSFER_ENCODING:
{
    if (_info.getVersion() == HttpVersion.HTTP_1_1)     transfer_encoding=field;
    break;
  }
case CONNECTION:
{
  if (request != null)   putTo(field,header);
  HttpHeaderValue[] values=HttpHeaderValue.CLOSE.is(field.getValue()) ? CLOSE : new HttpHeaderValue[]{HttpHeaderValue.CACHE.get(field.getValue())};
  String[] split=null;
  if (values[0] == null) {
    split=field.getValue().split("\\s*,\\s*");
    if (split.length > 0) {
      values=new HttpHeaderValue[split.length];
      for (int i=0; i < split.length; i++)       values[i]=HttpHeaderValue.CACHE.get(split[i]);
    }
  }
  for (int i=0; i < values.length; i++) {
    HttpHeaderValue value=values[i];
switch (value == null ? HttpHeaderValue.UNKNOWN : value) {
case UPGRADE:
{
        header.put(HttpHeader.CONNECTION.getBytesColonSpace()).put(HttpHeader.UPGRADE.getBytes());
        header.put(CRLF);
        break;
      }
case CLOSE:
{
      close=true;
      if (response != null) {
        _persistent=false;
        if (_endOfContent == EndOfContent.UNKNOWN_CONTENT)         _endOfContent=EndOfContent.EOF_CONTENT;
      }
      break;
    }
case KEEP_ALIVE:
{
    if (_info.getVersion() == HttpVersion.HTTP_1_0) {
      keep_alive=true;
      if (response != null)       _persistent=true;
    }
    break;
  }
default :
{
  if (connection == null)   connection=new StringBuilder();
 else   connection.append(',');
  connection.append(split == null ? field.getValue() : split[i]);
}
}
}
break;
}
case SERVER:
{
send=send & ~SEND_SERVER;
putTo(field,header);
break;
}
default :
putTo(field,header);
}
}
}
int status=response != null ? response.getStatus() : -1;
switch (_endOfContent) {
case UNKNOWN_CONTENT:
if (_contentPrepared == 0 && response != null && (status < 200 || status == 204 || status == 304)) _endOfContent=EndOfContent.NO_CONTENT;
 else if (_info.getContentLength() > 0) {
_endOfContent=EndOfContent.CONTENT_LENGTH;
long content_length=_info.getContentLength();
if ((response != null || content_length > 0 || content_type) && !_noContent) {
header.put(HttpHeader.CONTENT_LENGTH.getBytesColonSpace());
BufferUtil.putDecLong(header,content_length);
header.put(HttpTokens.CRLF);
}
}
 else if (last) {
_endOfContent=EndOfContent.CONTENT_LENGTH;
long content_length=_contentPrepared + BufferUtil.length(content);
if ((response != null || content_length > 0 || content_type) && !_noContent) {
header.put(HttpHeader.CONTENT_LENGTH.getBytesColonSpace());
BufferUtil.putDecLong(header,content_length);
header.put(HttpTokens.CRLF);
}
}
 else {
_endOfContent=EndOfContent.CHUNKED_CONTENT;
if (!isPersistent() || _info.getVersion().ordinal() < HttpVersion.HTTP_1_1.ordinal()) _endOfContent=EndOfContent.EOF_CONTENT;
}
break;
case CONTENT_LENGTH:
{
long content_length=_info.getContentLength();
if ((response != null || content_length > 0 || content_type) && !_noContent) {
header.put(HttpHeader.CONTENT_LENGTH.getBytesColonSpace());
BufferUtil.putDecLong(header,content_length);
header.put(HttpTokens.CRLF);
}
break;
}
case SELF_DEFINING_CONTENT:
{
long content_length=_info.getContentLength();
if (content_length > 0) {
header.put(HttpHeader.CONTENT_LENGTH.getBytesColonSpace());
BufferUtil.putDecLong(header,content_length);
header.put(HttpTokens.CRLF);
}
break;
}
case NO_CONTENT:
if (response != null && status >= 200 && status != 204 && status != 304) header.put(CONTENT_LENGTH_0);
break;
case EOF_CONTENT:
_persistent=request != null;
break;
case CHUNKED_CONTENT:
break;
default :
break;
}
if (isChunking()) {
if (transfer_encoding != null && !HttpHeaderValue.CHUNKED.toString().equalsIgnoreCase(transfer_encoding.getValue())) {
String c=transfer_encoding.getValue();
if (c.endsWith(HttpHeaderValue.CHUNKED.toString())) putTo(transfer_encoding,header);
 else throw new IllegalArgumentException("BAD TE");
}
 else header.put(TRANSFER_ENCODING_CHUNKED);
}
if (_endOfContent == EndOfContent.EOF_CONTENT) {
keep_alive=false;
_persistent=false;
}
if (response != null) {
if (!isPersistent() && (close || _info.getVersion().ordinal() > HttpVersion.HTTP_1_0.ordinal())) {
if (connection == null) header.put(CONNECTION_CLOSE);
 else {
header.put(CONNECTION_CLOSE,0,CONNECTION_CLOSE.length - 2);
header.put((byte)',');
header.put(StringUtil.getBytes(connection.toString()));
header.put(CRLF);
}
}
 else if (keep_alive) {
if (connection == null) header.put(CONNECTION_KEEP_ALIVE);
 else {
header.put(CONNECTION_KEEP_ALIVE,0,CONNECTION_KEEP_ALIVE.length - 2);
header.put((byte)',');
header.put(StringUtil.getBytes(connection.toString()));
header.put(CRLF);
}
}
 else if (connection != null) {
header.put(HttpHeader.CONNECTION.getBytesColonSpace());
header.put(StringUtil.getBytes(connection.toString()));
header.put(CRLF);
}
}
if (status > 199) header.put(SEND[send]);
header.put(HttpTokens.CRLF);
}

{
  if (_includes == null)   _includes=DEFAULT_INCLUDES;
  if (_excludes == null)   _excludes=DEFAULT_EXCLUDES;
  if (!exists())   return;
  String urlString=this.getURL().toExternalForm().trim();
  int endOfJarUrl=urlString.indexOf("!/");
  int startOfJarUrl=(endOfJarUrl >= 0 ? 4 : 0);
  if (endOfJarUrl < 0)   throw new IOException("Not a valid jar url: " + urlString);
  URL jarFileURL=new URL(urlString.substring(startOfJarUrl,endOfJarUrl));
  InputStream is=jarFileURL.openConnection().getInputStream();
  JarInputStream jin=new JarInputStream(is);
  JarEntry entry;
  while ((entry=jin.getNextJarEntry()) != null) {
    String entryName=entry.getName();
    LOG.debug("Looking at " + entryName);
    String dotCheck=entryName.replace('\\','/');
    dotCheck=URIUtil.canonicalPath(dotCheck);
    if (dotCheck == null) {
      LOG.info("Invalid entry: " + entryName);
      continue;
    }
    File file=new File(directory,entryName);
    if (entry.isDirectory()) {
      if (isIncluded(entryName)) {
        if (!isExcluded(entryName)) {
          if (!file.exists())           file.mkdirs();
        }
 else         LOG.debug("{} dir is excluded",entryName);
      }
 else       LOG.debug("{} dir is NOT included",entryName);
    }
 else {
      if (isIncluded(entryName)) {
        if (!isExcluded(entryName)) {
          File dir=new File(file.getParent());
          if (!dir.exists())           dir.mkdirs();
          FileOutputStream fout=null;
          try {
            fout=new FileOutputStream(file);
            IO.copy(jin,fout);
          }
  finally {
            IO.close(fout);
          }
          if (entry.getTime() >= 0)           file.setLastModified(entry.getTime());
        }
 else         LOG.debug("{} file is excluded",entryName);
      }
 else       LOG.debug("{} file is NOT included",entryName);
    }
  }
  Manifest manifest=jin.getManifest();
  if (manifest != null) {
    if (isIncluded("META-INF") && !isExcluded("META-INF")) {
      File metaInf=new File(directory,"META-INF");
      metaInf.mkdir();
      File f=new File(metaInf,"MANIFEST.MF");
      FileOutputStream fout=new FileOutputStream(f);
      manifest.write(fout);
      fout.close();
    }
  }
  IO.close(jin);
}

{
  needInBuffer();
  try {
    ByteBuffer in_buffer=_inNIOBuffer.getByteBuffer();
    _inNIOBuffer.compact();
    int total_filled=0;
    boolean remoteClosed=false;
    LOG.debug("{} unwrap space={} open={}",_session,_inNIOBuffer.space(),super.isOpen());
    while (_inNIOBuffer.space() > 0 && super.isOpen()) {
      int filled=super.fill(_inNIOBuffer);
      if (_debug)       LOG.debug("{} filled {}",_session,filled);
      if (filled < 0)       remoteClosed=true;
      if (filled <= 0)       break;
      total_filled+=filled;
    }
    if (total_filled == 0 && _inNIOBuffer.length() == 0) {
      if (isOpen() && remoteClosed) {
        try {
          _engine.closeInbound();
        }
 catch (        SSLException x) {
          super.close();
        }
      }
      if (!isOpen())       throw new EofException();
      return false;
    }
    try {
      in_buffer.position(_inNIOBuffer.getIndex());
      in_buffer.limit(_inNIOBuffer.putIndex());
      _result=_engine.unwrap(in_buffer,buffer);
      if (!_handshook && _result.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED)       _handshook=true;
      if (_debug)       LOG.debug("{} unwrap {}",_session,_result);
      _inNIOBuffer.skip(_result.bytesConsumed());
    }
 catch (    SSLException e) {
      LOG.warn(getRemoteAddr() + ":" + getRemotePort()+ " ",e);
      super.close();
      throw e;
    }
 finally {
      in_buffer.position(0);
      in_buffer.limit(in_buffer.capacity());
    }
switch (_result.getStatus()) {
case BUFFER_OVERFLOW:
      LOG.debug("{} unwrap overflow",_session);
    return false;
case BUFFER_UNDERFLOW:
  if (LOG.isDebugEnabled())   LOG.debug("{} unwrap {}",_session,_result);
if (!isOpen()) {
  _inNIOBuffer.clear();
  if (_outNIOBuffer != null)   _outNIOBuffer.clear();
  throw new EofException();
}
return (total_filled > 0);
case CLOSED:
if (super.isOpen()) super.close();
return total_filled > 0 || _result.bytesConsumed() > 0 || _result.bytesProduced() > 0;
case OK:
return total_filled > 0 || _result.bytesConsumed() > 0 || _result.bytesProduced() > 0;
default :
LOG.warn("{} unwrap default: {}",_session,_result);
throw new IOException(_result.toString());
}
}
  finally {
releaseInBuffer();
}
}

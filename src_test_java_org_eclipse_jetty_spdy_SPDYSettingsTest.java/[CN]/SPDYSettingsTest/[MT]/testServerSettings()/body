{
  Map<SettingsInfo.Key,Integer> settings=new HashMap<>();
  settings.put(new SettingsInfo.Key(SettingsInfo.Key.UPLOAD_BANDWIDTH),1024 * 1024);
  settings.put(new SettingsInfo.Key(SettingsInfo.Key.DOWNLOAD_BANDWIDTH),1024 * 1024);
  settings.put(new SettingsInfo.Key(SettingsInfo.Key.FLAG_PERSIST | SettingsInfo.Key.CONGESTION_WINDOW),1024);
  final SettingsInfo serverSettingsInfo=new SettingsInfo(settings);
  ServerSessionFrameListener serverSessionFrameListener=new ServerSessionFrameListener.Adapter(){
    @Override public void onConnect(    Session session){
      session.settings((short)2,serverSettingsInfo);
    }
  }
;
  final CountDownLatch latch=new CountDownLatch(1);
  Session.FrameListener clientSessionFrameListener=new Session.FrameListener.Adapter(){
    @Override public void onSettings(    Session session,    SettingsInfo clientSettingsInfo){
      Assert.assertEquals(serverSettingsInfo,clientSettingsInfo);
      latch.countDown();
    }
  }
;
  startClient(startServer(serverSessionFrameListener),clientSessionFrameListener);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

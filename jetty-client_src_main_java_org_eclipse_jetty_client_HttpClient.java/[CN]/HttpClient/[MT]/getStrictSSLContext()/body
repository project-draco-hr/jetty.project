{
  try {
    if (_trustStoreInputStream == null && _trustStoreLocation == null) {
      _trustStoreLocation=_keyStoreLocation;
      _trustStoreInputStream=_keyStoreInputStream;
      _trustStoreType=_keyStoreType;
    }
    InputStream keyStoreInputStream=null;
    InputStream trustStoreInputStream=null;
    if (_keyStoreInputStream != null && _keyStoreInputStream == _trustStoreInputStream) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      byte[] buffer=new byte[1024];
      int read;
      while ((read=_keyStoreInputStream.read(buffer)) >= 0)       baos.write(buffer,0,read);
      _keyStoreInputStream.close();
      keyStoreInputStream=new ByteArrayInputStream(baos.toByteArray());
      trustStoreInputStream=new ByteArrayInputStream(baos.toByteArray());
    }
    if (keyStoreInputStream == null)     keyStoreInputStream=_keyStoreInputStream == null ? Resource.newResource(_keyStoreLocation).getInputStream() : _keyStoreInputStream;
    KeyStore keyStore=KeyStore.getInstance(_keyStoreType);
    keyStore.load(keyStoreInputStream,_keyStorePassword == null ? null : _keyStorePassword.toCharArray());
    keyStoreInputStream.close();
    KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(_keyManagerAlgorithm);
    keyManagerFactory.init(keyStore,_keyManagerPassword == null ? null : _keyManagerPassword.toCharArray());
    KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();
    if (trustStoreInputStream == null)     trustStoreInputStream=_trustStoreInputStream == null ? Resource.newResource(_trustStoreLocation).getInputStream() : _trustStoreInputStream;
    KeyStore trustStore=KeyStore.getInstance(_trustStoreType);
    trustStore.load(trustStoreInputStream,_trustStorePassword == null ? null : _trustStorePassword.toCharArray());
    trustStoreInputStream.close();
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(_trustManagerAlgorithm);
    trustManagerFactory.init(trustStore);
    TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
    SecureRandom secureRandom=_secureRandomAlgorithm == null ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
    SSLContext context=_provider == null ? SSLContext.getInstance(_protocol) : SSLContext.getInstance(_protocol,_provider);
    context.init(keyManagers,trustManagers,secureRandom);
    return context;
  }
 catch (  Exception x) {
    throw (IOException)new IOException("Error generating SSLContext for keystore " + _keyStoreLocation).initCause(x);
  }
}

{
  Log.getLog().setDebugEnabled(false);
  ((StdErrLog)Log.getLog()).setSource(false);
  String jetty_root="..";
  Server server=new Server();
  server.setSendDateHeader(true);
  MBeanContainer mbContainer=new MBeanContainer(ManagementFactory.getPlatformMBeanServer());
  server.getContainer().addEventListener(mbContainer);
  server.addBean(mbContainer);
  mbContainer.addBean(Log.getLog());
  QueuedThreadPool threadPool=new QueuedThreadPool();
  threadPool.setMaxThreads(100);
  server.setThreadPool(threadPool);
  SelectChannelConnector connector0=new SelectChannelConnector();
  connector0.setPort(8080);
  connector0.setMaxIdleTime(30000);
  connector0.setConfidentialPort(8443);
  connector0.setUseDirectBuffers(true);
  server.addConnector(connector0);
  HandlerCollection handlers=new HandlerCollection();
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  RequestLogHandler requestLogHandler=new RequestLogHandler();
  handlers.setHandlers(new Handler[]{contexts,new DefaultHandler(),requestLogHandler});
  server.setHandler(handlers);
  HashLoginService login=new HashLoginService();
  login.setName("Test Realm");
  login.setConfig(jetty_root + "/test-jetty-webapp/src/main/config/etc/realm.properties");
  server.addBean(login);
  File log=File.createTempFile("jetty-yyyy_mm_dd-",".log");
  NCSARequestLog requestLog=new NCSARequestLog(log.toString());
  requestLog.setExtended(false);
  requestLogHandler.setRequestLog(requestLog);
  server.setStopAtShutdown(true);
  server.setSendServerVersion(true);
  final Resource baseResource=Resource.newResource("../test-jetty-webapp/src/main/webapp");
  ResourceFactory resources=new ResourceFactory(){
    public Resource getResource(    String path){
      try {
        return baseResource.addPath(path);
      }
 catch (      IOException e) {
        throw new RuntimeIOException(e);
      }
    }
  }
;
  ResourceCache cache=new ResourceCache(resources,new MimeTypes(),true);
  WebAppClassLoader.Context loaderContext=new WebAppClassLoader.Context(){
    private ClasspathPattern _systemClasses=ClasspathPattern.fromArray(WebAppContext.__dftSystemClasses);
    private ClasspathPattern _serverClasses=ClasspathPattern.fromArray(WebAppContext.__dftServerClasses);
    public Resource newResource(    String urlOrPath) throws IOException {
      return Resource.newResource(urlOrPath);
    }
    public PermissionCollection getPermissions(){
      return null;
    }
    public boolean isSystemClass(    String clazz){
      return _systemClasses.match(clazz);
    }
    public boolean isServerClass(    String clazz){
      return _serverClasses.match(clazz);
    }
    public boolean isParentLoaderPriority(){
      return true;
    }
    public String getExtraClasspath(){
      return null;
    }
  }
;
  WebAppClassLoader loader=new WebAppClassLoader(loaderContext);
  loader.addClassPath("../test-jetty-webapp/target/classes");
  loader.addJars(Resource.newResource("../test-jetty-webapp/target/test-jetty-webapp-7.2.0-SNAPSHOT/WEB-INF/lib"));
  boolean cloud=Boolean.getBoolean("nocloud");
  if (cloud) {
    final WebAppContext template=new WebAppContext();
    template.setClassLoader(loader);
    template.setBaseResource(baseResource);
    template.setDefaultsDescriptor("src/main/config/etc/webdefault.xml");
    template.setAttribute("instance","-1");
    template.setServer(server);
    template.preConfigure();
    template.configure();
    template.postConfigure();
    for (int i=0; i < 10; i++) {
      final WebAppContext webapp=new WebAppContext(template);
      webapp.setAttribute("cloudCache",cache);
      webapp.setAttribute("instance",i);
      if (i > 0)       webapp.setVirtualHosts(new String[]{"127.0.0." + i});
      contexts.addHandler(webapp);
    }
  }
 else {
    for (int i=0; i < 10; i++) {
      final WebAppContext webapp=new WebAppContext();
      webapp.setWar("../test-jetty-webapp/target/test-jetty-webapp-7.2.0-SNAPSHOT.war");
      webapp.setAttribute("instance",i);
      if (i > 0)       webapp.setVirtualHosts(new String[]{"127.0.0." + i});
      contexts.addHandler(webapp);
    }
  }
  server.start();
  System.err.println(server.dump());
  for (int i=0; i < 10; i++) {
    for (    String uri : new String[]{"/","/d.txt","/da.txt","/dat.txt","/data.txt","/data.txt.gz","/dump/info"}) {
      URL url=new URL("http://127.0.0." + (i == 0 ? 10 : i) + ":8080"+ uri);
      System.err.println("GOT " + url + " "+ String.valueOf(IO.toString(url.openStream())).length());
    }
  }
  server.join();
}

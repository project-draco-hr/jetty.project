{
  boolean not_indexed=HpackEncoder.__DO_NOT_INDEX.contains(header);
  ByteBuffer buffer=BufferUtil.allocate(name.length() + value.length() + 10);
  BufferUtil.clearToFill(buffer);
  boolean huffman;
  int bits;
  if (not_indexed) {
    boolean never_index=HpackEncoder.__NEVER_INDEX.contains(header);
    huffman=!HpackEncoder.__DO_NOT_HUFFMAN.contains(header);
    buffer.put(never_index ? (byte)0x10 : (byte)0x00);
    bits=4;
  }
 else   if (header == HttpHeader.CONTENT_LENGTH && value.length() > 1) {
    buffer.put((byte)0x00);
    huffman=true;
    bits=4;
  }
 else {
    buffer.put((byte)0x40);
    huffman=!HpackEncoder.__DO_NOT_HUFFMAN.contains(header);
    bits=6;
  }
  int name_idx=HpackContext.staticIndex(header);
  if (name_idx > 0)   NBitInteger.encode(buffer,bits,name_idx);
 else {
    buffer.put((byte)0x80);
    NBitInteger.encode(buffer,7,Huffman.octetsNeededLC(name));
    Huffman.encodeLC(buffer,name);
  }
  HpackEncoder.encodeValue(buffer,huffman,value);
  BufferUtil.flipToFlush(buffer,0);
  return BufferUtil.toArray(buffer);
}

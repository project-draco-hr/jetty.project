{
  System.err.printf("[GzipTester] requesting /context/%s%n",requestedFilename);
  HttpTester request=new HttpTester();
  HttpTester response=new HttpTester();
  request.setMethod("GET");
  request.setVersion("HTTP/1.0");
  request.setHeader("Host","tester");
  request.setHeader("Accept-Encoding",compressionType);
  if (this.userAgent != null)   request.setHeader("User-Agent",this.userAgent);
  request.setURI("/context/" + requestedFilename);
  ByteArrayBuffer reqsBuff=new ByteArrayBuffer(request.generate().getBytes());
  ByteArrayBuffer respBuff=servletTester.getResponses(reqsBuff);
  response.parse(respBuff.asArray());
  Assert.assertThat("Response.method",response.getMethod(),nullValue());
  Assert.assertThat("Response.header[Content-Length]",response.getHeader("Content-Length"),notNullValue());
  Assert.assertThat("Response.header[Content-Encoding]",response.getHeader("Content-Encoding"),containsString(compressionType));
  File serverFile=testdir.getFile(serverFilename);
  String expected=IO.readToString(serverFile);
  String actual=null;
  ByteArrayInputStream bais=null;
  InputStream in=null;
  ByteArrayOutputStream out=null;
  try {
    bais=new ByteArrayInputStream(response.getContentBytes());
    if (compressionType.equals(GzipFilter.GZIP)) {
      in=new GZIPInputStream(bais);
    }
 else     if (compressionType.equals(GzipFilter.DEFLATE)) {
      in=new InflaterInputStream(bais,new Inflater(true));
    }
    out=new ByteArrayOutputStream();
    IO.copy(in,out);
    actual=out.toString(encoding);
    assertThat("Uncompressed contents",actual,equalTo(expected));
  }
  finally {
    IO.close(out);
    IO.close(in);
    IO.close(bais);
  }
}

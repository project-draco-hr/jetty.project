{
  System.err.printf("[GzipTester] requesting /context/%s%n",filename);
  HttpTester request=new HttpTester();
  HttpTester response=new HttpTester();
  request.setMethod("GET");
  request.setVersion("HTTP/1.0");
  request.setHeader("Host","tester");
  request.setHeader("Accept-Encoding",compressionType);
  if (this.userAgent != null)   request.setHeader("User-Agent",this.userAgent);
  if (filename == null)   request.setURI("/context/");
 else   request.setURI("/context/" + filename);
  ByteArrayBuffer reqsBuff=new ByteArrayBuffer(request.generate().getBytes());
  ByteArrayBuffer respBuff=servletTester.getResponses(reqsBuff);
  response.parse(respBuff.asArray());
  Assert.assertThat("Response.method",response.getMethod(),nullValue());
  Assert.assertThat("Response.status",response.getStatus(),is(status));
  if (expectedFilesize != (-1)) {
    Assert.assertThat("Response.header[Content-Length]",response.getHeader("Content-Length"),notNullValue());
    int serverLength=Integer.parseInt(response.getHeader("Content-Length"));
    Assert.assertThat("Response.header[Content-Length]",serverLength,is(expectedFilesize));
  }
  Assert.assertThat("Response.header[Content-Encoding]",response.getHeader("Content-Encoding"),not(containsString(compressionType)));
  if (filename != null) {
    File serverFile=testdir.getFile(filename);
    String expected=IO.readToString(serverFile);
    String actual=null;
    InputStream in=null;
    ByteArrayOutputStream out=null;
    try {
      in=new ByteArrayInputStream(response.getContentBytes());
      out=new ByteArrayOutputStream();
      IO.copy(in,out);
      actual=out.toString(encoding);
      Assert.assertEquals("Server contents",expected,actual);
    }
  finally {
      IO.close(out);
      IO.close(in);
    }
  }
}

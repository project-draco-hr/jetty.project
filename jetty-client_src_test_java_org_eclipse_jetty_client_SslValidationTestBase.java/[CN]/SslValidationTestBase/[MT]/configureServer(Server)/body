{
  setProtocol("https");
  SslContextFactory srvFactory=new SslContextFactory(){
    @Override protected KeyStore getKeyStore(    InputStream storeStream,    String storePath,    String storeType,    String storeProvider,    String storePassword) throws Exception {
      return CertificateUtils.getKeyStore(storeStream,storePath,storeType,storeProvider,storePassword);
    }
    @Override protected Collection<? extends CRL> loadCRL(    String crlPath) throws Exception {
      return CertificateUtils.loadCRL(crlPath);
    }
  }
;
  srvFactory.setValidateCerts(true);
  srvFactory.setCrlPath(_crlpath);
  srvFactory.setNeedClientAuth(true);
  srvFactory.setKeyStorePath(_keypath);
  srvFactory.setKeyStorePassword(_password);
  srvFactory.setKeyManagerPassword(_password);
  srvFactory.setTrustStore(_trustpath);
  srvFactory.setTrustStorePassword(_password);
  Constructor<? extends SslConnector> constructor=__klass.getConstructor(SslContextFactory.class);
  SslConnector connector=constructor.newInstance(srvFactory);
  connector.setMaxIdleTime(5000);
  server.addConnector(connector);
  Handler handler=new TestHandler(getBasePath());
  ServletContextHandler root=new ServletContextHandler();
  root.setContextPath("/");
  root.setResourceBase(getBasePath());
  ServletHolder servletHolder=new ServletHolder(new DefaultServlet());
  servletHolder.setInitParameter("gzip","true");
  root.addServlet(servletHolder,"/*");
  HandlerCollection handlers=new HandlerCollection();
  handlers.setHandlers(new Handler[]{handler,root});
  server.setHandler(handlers);
}

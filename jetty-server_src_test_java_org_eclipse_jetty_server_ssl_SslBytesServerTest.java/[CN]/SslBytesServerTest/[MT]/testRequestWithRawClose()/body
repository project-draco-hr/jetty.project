{
  final SSLSocket client=newClient();
  SimpleProxy.AutomaticFlow automaticProxyFlow=proxy.startAutomaticFlow();
  client.startHandshake();
  Assert.assertTrue(automaticProxyFlow.stop(5,TimeUnit.SECONDS));
  Future<Object> request=threadPool.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      OutputStream clientOutput=client.getOutputStream();
      clientOutput.write(("" + "GET / HTTP/1.1\r\n" + "Host: localhost\r\n"+ "\r\n").getBytes("UTF-8"));
      clientOutput.flush();
      return null;
    }
  }
);
  TLSRecord record=proxy.readFromClient();
  Assert.assertEquals(TLSRecord.Type.APPLICATION,record.getType());
  proxy.flushToServer(record);
  Assert.assertNull(request.get(5,TimeUnit.SECONDS));
  record=proxy.readFromServer();
  Assert.assertEquals(TLSRecord.Type.APPLICATION,record.getType());
  proxy.flushToClient(record);
  proxy.flushToServer(null);
  record=proxy.readFromServer();
  Assert.assertNull(String.valueOf(record),record);
  proxy.flushToClient(record);
  TimeUnit.MILLISECONDS.sleep(500);
  Assert.assertThat(sslFills.get(),Matchers.lessThan(20));
  Assert.assertThat(sslFlushes.get(),Matchers.lessThan(20));
  Assert.assertThat(httpParses.get(),Matchers.lessThan(20));
  client.close();
}

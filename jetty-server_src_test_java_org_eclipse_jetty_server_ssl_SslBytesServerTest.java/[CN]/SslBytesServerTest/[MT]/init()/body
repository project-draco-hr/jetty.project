{
  threadPool=Executors.newCachedThreadPool();
  server=new Server();
  File keyStore=MavenTestingUtils.getTestResourceFile("keystore");
  SslContextFactory sslContextFactory=new SslContextFactory();
  sslContextFactory.setKeyStorePath(keyStore.getAbsolutePath());
  sslContextFactory.setKeyStorePassword("storepwd");
  sslContextFactory.setKeyManagerPassword("keypwd");
  ServerConnector connector=new ServerConnector(server,sslContextFactory){
    @Override protected SelectChannelEndPoint newEndPoint(    SocketChannel channel,    ManagedSelector selectSet,    SelectionKey key) throws IOException {
      SelectChannelEndPoint endp=super.newEndPoint(channel,selectSet,key);
      serverEndPoint.set(endp);
      return endp;
    }
  }
;
  connector.setIdleTimeout(idleTimeout);
  connector.setPort(0);
  server.addConnector(connector);
  server.setHandler(new AbstractHandler(){
    @Override public void handle(    String target,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      try {
        request.setHandled(true);
        String contentLength=request.getHeader("Content-Length");
        if (contentLength != null) {
          int length=Integer.parseInt(contentLength);
          ServletInputStream input=httpRequest.getInputStream();
          ServletOutputStream output=httpResponse.getOutputStream();
          byte[] buffer=new byte[32 * 1024];
          while (length > 0) {
            int read=input.read(buffer);
            if (read < 0)             throw new EOFException();
            length-=read;
            if (target.startsWith("/echo"))             output.write(buffer,0,read);
          }
        }
      }
 catch (      IOException x) {
        if (!(target.endsWith("suppress_exception")))         throw x;
      }
    }
  }
);
  server.start();
  serverPort=connector.getLocalPort();
  sslContext=sslContextFactory.getSslContext();
  proxy=new SimpleProxy(threadPool,"localhost",serverPort);
  proxy.start();
  logger.debug(":{} <==> :{}",proxy.getPort(),serverPort);
}

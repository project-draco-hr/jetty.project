{
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
    }
  }
);
  String host="localhost";
  int port=connector.getLocalPort();
  String authority=host + ":" + port;
  InetSocketAddress address=new InetSocketAddress(host,port);
  FuturePromise<Session> promise=new FuturePromise<>();
  client.connect(address,new Session.Listener.Adapter(),promise);
  Session session=promise.get();
  HttpFields fields=new HttpFields();
  MetaData.Request metaData=new MetaData.Request(HttpScheme.HTTP,"GET",authority,host,port,path,fields);
  HeadersFrame frame=new HeadersFrame(1,metaData,null,true);
  final CountDownLatch latch=new CountDownLatch(1);
  session.newStream(frame,new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      Assert.assertTrue(stream.isClosed());
      Assert.assertTrue(stream.getId() > 0);
      Assert.assertTrue(frame.isEndStream());
      Assert.assertEquals(stream.getId(),frame.getStreamId());
      Assert.assertTrue(frame.getMetaData().isResponse());
      MetaData.Response response=(MetaData.Response)frame.getMetaData();
      Assert.assertEquals(200,response.getStatus());
      latch.countDown();
    }
  }
);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

{
  final byte[] content="Hello World!".getBytes(StandardCharsets.UTF_8);
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      resp.getOutputStream().write(content);
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter());
  HttpFields fields=new HttpFields();
  MetaData.Request metaData=newRequest("GET",fields);
  HeadersFrame frame=new HeadersFrame(1,metaData,null,true);
  final CountDownLatch latch=new CountDownLatch(2);
  session.newStream(frame,new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      Assert.assertFalse(stream.isClosed());
      Assert.assertTrue(stream.getId() > 0);
      Assert.assertFalse(frame.isEndStream());
      Assert.assertEquals(stream.getId(),frame.getStreamId());
      Assert.assertTrue(frame.getMetaData().isResponse());
      MetaData.Response response=(MetaData.Response)frame.getMetaData();
      Assert.assertEquals(200,response.getStatus());
      latch.countDown();
    }
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      Assert.assertTrue(stream.isClosed());
      Assert.assertTrue(frame.isEndStream());
      Assert.assertEquals(ByteBuffer.wrap(content),frame.getData());
      callback.succeeded();
      latch.countDown();
    }
  }
);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

{
  final CountDownLatch timeoutLatch=new CountDownLatch(1);
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      stream.setIdleTimeout(idleTimeout);
      return new Stream.Listener.Adapter(){
        @Override public void onTimeout(        Stream stream,        Throwable x){
          timeoutLatch.countDown();
        }
      }
;
    }
  }
);
  final CountDownLatch resetLatch=new CountDownLatch(1);
  Session session=newClient(new Session.Listener.Adapter());
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(metaData,null,false);
  session.newStream(requestFrame,new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onReset(    Stream stream,    ResetFrame frame){
      resetLatch.countDown();
    }
  }
);
  Assert.assertTrue(timeoutLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(resetLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(session.getStreams().isEmpty());
  Assert.assertFalse(session.isClosed());
  Assert.assertFalse(((HTTP2Session)session).isDisconnected());
}

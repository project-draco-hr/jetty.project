{
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      stream.setIdleTimeout(10 * idleTimeout);
      sleep(idleTimeout + idleTimeout / 2);
      MetaData.Response metaData=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),metaData,null,true);
      stream.headers(responseFrame,Callback.Adapter.INSTANCE);
      return null;
    }
  }
);
  connector.setIdleTimeout(idleTimeout);
  final CountDownLatch closeLatch=new CountDownLatch(1);
  Session session=newClient(new ServerSessionListener.Adapter(){
    @Override public void onClose(    Session session,    GoAwayFrame frame){
      closeLatch.countDown();
    }
  }
);
  final CountDownLatch replyLatch=new CountDownLatch(1);
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(0,metaData,null,true);
  session.newStream(requestFrame,new Promise.Adapter<Stream>(){
    @Override public void succeeded(    Stream stream){
      stream.setIdleTimeout(10 * idleTimeout);
    }
  }
,new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      replyLatch.countDown();
    }
  }
);
  Assert.assertTrue(replyLatch.await(3 * idleTimeout,TimeUnit.MILLISECONDS));
  Assert.assertFalse(closeLatch.await(idleTimeout / 2,TimeUnit.MILLISECONDS));
}

{
  final CountDownLatch timeoutLatch=new CountDownLatch(1);
  startServer(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      stream.setIdleTimeout(idleTimeout);
      return new Stream.Listener.Adapter(){
        @Override public void onTimeout(        Stream stream,        Throwable x){
          timeoutLatch.countDown();
        }
      }
;
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter());
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(0,metaData,null,false);
  FuturePromise<Stream> promise=new FuturePromise<>();
  session.newStream(requestFrame,promise,new Stream.Listener.Adapter());
  final Stream stream=promise.get(5,TimeUnit.SECONDS);
  sleep(idleTimeout / 2);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  stream.data(new DataFrame(stream.getId(),ByteBuffer.allocate(1),false),new Callback.Adapter(){
    private int sends;
    @Override public void succeeded(){
      sleep(idleTimeout / 2);
      final boolean last=++sends == 2;
      stream.data(new DataFrame(stream.getId(),ByteBuffer.allocate(1),last),!last ? this : new Adapter(){
        @Override public void succeeded(){
          dataLatch.countDown();
        }
      }
);
    }
  }
);
  Assert.assertTrue(dataLatch.await(2 * idleTimeout,TimeUnit.MILLISECONDS));
  Assert.assertFalse(timeoutLatch.await(0,TimeUnit.SECONDS));
}

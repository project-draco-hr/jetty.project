{
  final CountDownLatch closeLatch=new CountDownLatch(1);
  startServer(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      MetaData.Response metaData=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),metaData,null,true);
      stream.headers(responseFrame,Callback.Adapter.INSTANCE);
      return null;
    }
    @Override public void onClose(    Session session,    GoAwayFrame frame){
      closeLatch.countDown();
    }
  }
);
  client.setIdleTimeout(idleTimeout);
  Session session=newClient(new Session.Listener.Adapter());
  final CountDownLatch replyLatch=new CountDownLatch(1);
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(0,metaData,null,true);
  session.newStream(requestFrame,new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      try {
        Thread.sleep(2 * idleTimeout);
        replyLatch.countDown();
      }
 catch (      InterruptedException e) {
        Assert.fail();
      }
    }
  }
);
  Assert.assertFalse(closeLatch.await(2 * idleTimeout,TimeUnit.MILLISECONDS));
  Assert.assertTrue(replyLatch.await(3 * idleTimeout,TimeUnit.MILLISECONDS));
}

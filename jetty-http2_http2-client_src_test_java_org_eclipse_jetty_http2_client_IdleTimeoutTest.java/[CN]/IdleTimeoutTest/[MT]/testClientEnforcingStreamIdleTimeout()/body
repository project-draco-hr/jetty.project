{
  final int idleTimeout=1000;
  start(new HttpServlet(){
    @Override protected void doGet(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      sleep(2 * idleTimeout);
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter());
  final CountDownLatch dataLatch=new CountDownLatch(1);
  final CountDownLatch timeoutLatch=new CountDownLatch(1);
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(metaData,null,true);
  session.newStream(requestFrame,new Promise.Adapter<Stream>(){
    @Override public void succeeded(    Stream stream){
      stream.setIdleTimeout(idleTimeout);
    }
  }
,new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      dataLatch.countDown();
    }
    @Override public void onTimeout(    Stream stream,    Throwable x){
      Assert.assertThat(x,Matchers.instanceOf(TimeoutException.class));
      timeoutLatch.countDown();
    }
  }
);
  Assert.assertTrue(timeoutLatch.await(5,TimeUnit.SECONDS));
  Assert.assertFalse(dataLatch.await(2 * idleTimeout,TimeUnit.MILLISECONDS));
  Assert.assertTrue(session.getStreams().isEmpty());
  Assert.assertFalse(session.isClosed());
  Assert.assertFalse(((HTTP2Session)session).isDisconnected());
}

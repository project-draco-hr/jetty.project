{
  byte[] bigbuf=new byte[64 * 1024];
  SecureRandom rand=new SecureRandom(new byte[]{0x11,0x22,0x33,0x44});
  rand.nextBytes(bigbuf);
  String sample="<a href=\"http://webtide.com/\">Webtide</a>\n<a href=\"http://google.com\">Google</a>\n";
  byte[] bytes=sample.getBytes(StandardCharsets.UTF_8);
  System.arraycopy(bytes,0,bigbuf,0,bytes.length);
  startServer(new EchoHttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      response.setHeader(HttpHeader.CONTENT_ENCODING.asString(),"gzip");
      super.service(request,response);
    }
  }
);
  startProxy(new AsyncMiddleManServlet(){
    @Override protected ContentTransformer newServerResponseContentTransformer(    HttpServletRequest clientRequest,    HttpServletResponse proxyResponse,    Response serverResponse){
      return new GZIPContentTransformer(new HeadTransformer());
    }
  }
);
  startClient();
  ContentResponse response=client.newRequest("localhost",serverConnector.getLocalPort()).header(HttpHeader.CONTENT_ENCODING,"gzip").content(new BytesContentProvider(gzip(bigbuf))).timeout(5,TimeUnit.SECONDS).send();
  Assert.assertEquals(200,response.getStatus());
  String expectedStr="<a href=\"http://webtide.com/\">Webtide</a>";
  byte[] expected=expectedStr.getBytes(StandardCharsets.UTF_8);
  Assert.assertArrayEquals(expected,response.getContent());
}

{
  final Path targetTestsDir=prepareTargetTestsDir();
  final CountDownLatch serviceLatch=new CountDownLatch(1);
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      response.setHeader(HttpHeader.CONNECTION.asString(),HttpHeaderValue.CLOSE.asString());
      response.setContentLength(2);
      OutputStream output=response.getOutputStream();
      output.write('x');
      output.flush();
      serviceLatch.countDown();
    }
  }
);
  final CountDownLatch destroyLatch=new CountDownLatch(1);
  startProxy(new AsyncMiddleManServlet(){
    @Override protected ContentTransformer newServerResponseContentTransformer(    HttpServletRequest clientRequest,    HttpServletResponse proxyResponse,    Response serverResponse){
      return new AfterContentTransformer(){
{
          setOverflowDirectory(targetTestsDir);
          setMaxInputBufferSize(0);
          setMaxOutputBufferSize(0);
        }
        @Override public boolean transform(        Source source,        Sink sink) throws IOException {
          IO.copy(source.getInputStream(),sink.getOutputStream());
          return true;
        }
        @Override public void destroy(){
          super.destroy();
          destroyLatch.countDown();
        }
      }
;
    }
  }
);
  startClient();
  ContentResponse response=client.newRequest("localhost",serverConnector.getLocalPort()).timeout(5,TimeUnit.SECONDS).send();
  Assert.assertTrue(serviceLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(destroyLatch.await(5,TimeUnit.SECONDS));
  Assert.assertEquals(HttpStatus.BAD_GATEWAY_502,response.getStatus());
}

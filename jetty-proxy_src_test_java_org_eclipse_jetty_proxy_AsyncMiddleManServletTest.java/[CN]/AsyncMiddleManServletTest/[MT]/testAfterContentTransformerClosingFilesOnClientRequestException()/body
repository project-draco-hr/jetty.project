{
  final Path targetTestsDir=prepareTargetTestsDir();
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      IO.copy(request.getInputStream(),IO.getNullStream());
    }
  }
);
  final CountDownLatch destroyLatch=new CountDownLatch(1);
  startProxy(new AsyncMiddleManServlet(){
    @Override protected ContentTransformer newClientRequestContentTransformer(    HttpServletRequest clientRequest,    Request proxyRequest){
      return new AfterContentTransformer(){
{
          setOverflowDirectory(targetTestsDir);
          setMaxInputBufferSize(0);
          setMaxOutputBufferSize(0);
        }
        @Override public boolean transform(        Source source,        Sink sink) throws IOException {
          IO.copy(source.getInputStream(),sink.getOutputStream());
          return true;
        }
        @Override public void destroy(){
          super.destroy();
          destroyLatch.countDown();
        }
      }
;
    }
  }
);
  long idleTimeout=1000;
  proxyConnector.setIdleTimeout(idleTimeout);
  startClient();
  final byte[] data=new byte[]{'c','a','f','e'};
  ContentResponse response=client.newRequest("localhost",serverConnector.getLocalPort()).header(HttpHeader.CONNECTION,HttpHeaderValue.CLOSE.asString()).content(new BytesContentProvider(data){
    @Override public long getLength(){
      return data.length + 1;
    }
  }
).timeout(5 * idleTimeout,TimeUnit.MILLISECONDS).send();
  Assert.assertTrue(destroyLatch.await(5 * idleTimeout,TimeUnit.MILLISECONDS));
  Assert.assertEquals(HttpStatus.GATEWAY_TIMEOUT_504,response.getStatus());
}

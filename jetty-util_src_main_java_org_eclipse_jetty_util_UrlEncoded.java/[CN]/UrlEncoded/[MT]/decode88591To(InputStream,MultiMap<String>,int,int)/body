{
synchronized (map) {
    StringBuffer buffer=new StringBuffer();
    String key=null;
    String value=null;
    int b;
    int totalLength=0;
    while ((b=in.read()) >= 0) {
switch ((char)b) {
case '&':
        value=buffer.length() == 0 ? "" : buffer.toString();
      buffer.setLength(0);
    if (key != null) {
      map.add(key,value);
    }
 else     if (value != null && value.length() > 0) {
      map.add(value,"");
    }
  key=null;
value=null;
if (maxKeys > 0 && map.size() > maxKeys) throw new IllegalStateException("Form too many keys");
break;
case '=':
if (key != null) {
buffer.append((char)b);
break;
}
key=buffer.toString();
buffer.setLength(0);
break;
case '+':
buffer.append(' ');
break;
case '%':
int code0=in.read();
if ('u' == code0) {
int code1=in.read();
if (code1 >= 0) {
int code2=in.read();
if (code2 >= 0) {
int code3=in.read();
if (code3 >= 0) buffer.append(Character.toChars((convertHexDigit(code0) << 12) + (convertHexDigit(code1) << 8) + (convertHexDigit(code2) << 4)+ convertHexDigit(code3)));
}
}
}
 else if (code0 >= 0) {
int code1=in.read();
if (code1 >= 0) buffer.append((char)((convertHexDigit(code0) << 4) + convertHexDigit(code1)));
}
break;
default :
buffer.append((char)b);
break;
}
if (maxLength >= 0 && (++totalLength > maxLength)) throw new IllegalStateException("Form too large");
}
if (key != null) {
value=buffer.length() == 0 ? "" : buffer.toString();
buffer.setLength(0);
map.add(key,value);
}
 else if (buffer.length() > 0) {
map.add(buffer.toString(),"");
}
}
}

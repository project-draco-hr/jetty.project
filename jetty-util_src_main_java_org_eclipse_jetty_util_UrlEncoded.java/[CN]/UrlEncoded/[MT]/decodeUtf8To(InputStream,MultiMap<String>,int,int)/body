{
synchronized (map) {
    Utf8StringBuilder buffer=new Utf8StringBuilder();
    String key=null;
    String value=null;
    int b;
    int totalLength=0;
    while ((b=in.read()) >= 0) {
      try {
switch ((char)b) {
case '&':
          value=buffer.toReplacedString();
        buffer.reset();
      if (key != null) {
        map.add(key,value);
      }
 else       if (value != null && value.length() > 0) {
        map.add(value,"");
      }
    key=null;
  value=null;
if (maxKeys > 0 && map.size() > maxKeys) throw new IllegalStateException("Form too many keys");
break;
case '=':
if (key != null) {
buffer.append((byte)b);
break;
}
key=buffer.toReplacedString();
buffer.reset();
break;
case '+':
buffer.append((byte)' ');
break;
case '%':
int code0=in.read();
boolean decoded=false;
if ('u' == code0) {
code0=in.read();
if (code0 >= 0) {
int code1=in.read();
if (code1 >= 0) {
int code2=in.read();
if (code2 >= 0) {
int code3=in.read();
if (code3 >= 0) {
buffer.getStringBuilder().append(Character.toChars((convertHexDigit(code0) << 12) + (convertHexDigit(code1) << 8) + (convertHexDigit(code2) << 4)+ convertHexDigit(code3)));
decoded=true;
}
}
}
}
}
 else if (code0 >= 0) {
int code1=in.read();
if (code1 >= 0) {
buffer.append((byte)((convertHexDigit(code0) << 4) + convertHexDigit(code1)));
decoded=true;
}
}
if (!decoded) buffer.getStringBuilder().append(Utf8Appendable.REPLACEMENT);
break;
default :
buffer.append((byte)b);
break;
}
}
 catch (NotUtf8Exception e) {
LOG.warn(e.toString());
LOG.debug(e);
}
catch (NumberFormatException e) {
buffer.append(Utf8Appendable.REPLACEMENT_UTF8,0,3);
LOG.warn(e.toString());
LOG.debug(e);
}
if (maxLength >= 0 && (++totalLength > maxLength)) throw new IllegalStateException("Form too large");
}
if (key != null) {
value=buffer.toReplacedString();
buffer.reset();
map.add(key,value);
}
 else if (buffer.length() > 0) {
map.add(buffer.toReplacedString(),"");
}
}
}

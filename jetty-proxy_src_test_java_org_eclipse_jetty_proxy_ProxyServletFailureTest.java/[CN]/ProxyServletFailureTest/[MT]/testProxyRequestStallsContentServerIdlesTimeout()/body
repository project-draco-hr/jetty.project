{
  final byte[] content=new byte[]{'C','0','F','F','E','E'};
  if (proxyServlet instanceof AsyncProxyServlet) {
    proxyServlet=new AsyncProxyServlet(){
      @Override protected ContentProvider proxyRequestContent(      HttpServletRequest request,      HttpServletResponse response,      Request proxyRequest) throws IOException {
        DeferredContentProvider provider=new DeferredContentProvider(){
          @Override public boolean offer(          ByteBuffer buffer,          Callback callback){
            buffer.limit(buffer.limit() - 1);
            return super.offer(buffer.slice(),callback);
          }
        }
;
        request.getInputStream().setReadListener(newReadListener(request,response,proxyRequest,provider));
        return provider;
      }
    }
;
  }
 else {
    proxyServlet=new ProxyServlet(){
      @Override protected ContentProvider proxyRequestContent(      HttpServletRequest request,      HttpServletResponse response,      Request proxyRequest) throws IOException {
        return new BytesContentProvider(content){
          @Override public long getLength(){
            return content.length + 1;
          }
        }
;
      }
    }
;
  }
  prepareProxy();
  prepareServer(new EchoHttpServlet());
  long idleTimeout=1000;
  serverConnector.setIdleTimeout(idleTimeout);
  try (StacklessLogging stackless=new StacklessLogging(ServletHandler.class)){
    ContentResponse response=client.newRequest("localhost",serverConnector.getLocalPort()).content(new BytesContentProvider(content)).send();
    Assert.assertEquals(500,response.getStatus());
  }
 }

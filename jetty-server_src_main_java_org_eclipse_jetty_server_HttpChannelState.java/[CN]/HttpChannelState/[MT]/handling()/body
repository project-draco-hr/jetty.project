{
  if (DEBUG)   LOG.debug("{} handling {}",this,_state);
  try (Locker.Lock lock=_locker.lock()){
switch (_state) {
case IDLE:
      _initial=true;
    _state=State.DISPATCHED;
  return Action.REQUEST_DISPATCH;
case COMPLETING:
return Action.COMPLETE;
case COMPLETED:
return Action.WAIT;
case ASYNC_WOKEN:
if (_asyncReadPossible) {
_state=State.ASYNC_IO;
_asyncReadUnready=false;
return Action.READ_CALLBACK;
}
if (_asyncWrite) {
_state=State.ASYNC_IO;
_asyncWrite=false;
return Action.WRITE_CALLBACK;
}
if (_async != null) {
Async async=_async;
switch (async) {
case COMPLETE:
_state=State.COMPLETING;
return Action.COMPLETE;
case DISPATCH:
_state=State.DISPATCHED;
_async=null;
return Action.ASYNC_DISPATCH;
case EXPIRING:
break;
case EXPIRED:
_state=State.DISPATCHED;
_async=null;
return Action.ASYNC_EXPIRED;
case STARTED:
return Action.WAIT;
}
}
return Action.WAIT;
default :
return Action.WAIT;
}
}
 }

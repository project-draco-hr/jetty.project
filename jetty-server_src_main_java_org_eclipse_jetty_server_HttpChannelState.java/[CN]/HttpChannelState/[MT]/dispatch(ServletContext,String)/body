{
  boolean dispatch;
  try (Locker.Lock lock=_locker.lock()){
switch (_async) {
case STARTED:
case EXPIRING:
case ERRORED:
      break;
default :
    throw new IllegalStateException(this.getStatusStringLocked());
}
_async=Async.DISPATCH;
if (context != null) _event.setDispatchContext(context);
if (path != null) _event.setDispatchPath(path);
switch (_state) {
case DISPATCHED:
case ASYNC_IO:
  dispatch=false;
break;
case ASYNC_WAIT:
_state=State.ASYNC_WOKEN;
dispatch=true;
break;
case ASYNC_WOKEN:
dispatch=false;
break;
default :
LOG.warn("async dispatched when complete {}",this);
dispatch=false;
break;
}
}
 cancelTimeout();
if (dispatch) scheduleDispatch();
}

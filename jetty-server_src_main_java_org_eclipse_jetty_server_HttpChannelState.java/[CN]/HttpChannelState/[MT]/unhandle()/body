{
  Action action;
  AsyncContextEvent schedule_event=null;
  boolean read_interested=false;
  if (DEBUG)   LOG.debug("{} unhandle {}",this,_state);
  try (SpinLock.Lock lock=_lock.lock()){
switch (_state) {
case DISPATCHED:
case ASYNC_IO:
      break;
default :
    throw new IllegalStateException(this.getStatusString());
}
if (_async != null) {
  _initial=false;
switch (_async) {
case COMPLETE:
    _state=State.COMPLETING;
  _async=null;
action=Action.COMPLETE;
break;
case DISPATCH:
_state=State.DISPATCHED;
_async=null;
action=Action.ASYNC_DISPATCH;
break;
case EXPIRED:
_state=State.DISPATCHED;
_async=null;
action=Action.ASYNC_EXPIRED;
break;
case STARTED:
if (_asyncReadUnready && _asyncReadPossible) {
_state=State.ASYNC_IO;
_asyncReadUnready=false;
action=Action.READ_CALLBACK;
}
 else if (_asyncWrite) {
_asyncWrite=false;
_state=State.ASYNC_IO;
action=Action.WRITE_CALLBACK;
}
 else {
schedule_event=_event;
read_interested=_asyncReadUnready;
_state=State.ASYNC_WAIT;
action=Action.WAIT;
}
break;
case EXPIRING:
schedule_event=_event;
_state=State.ASYNC_WAIT;
action=Action.WAIT;
break;
default :
_state=State.COMPLETING;
action=Action.COMPLETE;
break;
}
}
 else {
_state=State.COMPLETING;
action=Action.COMPLETE;
}
}
 if (schedule_event != null) scheduleTimeout(schedule_event);
if (read_interested) _channel.asyncReadFillInterested();
return action;
}

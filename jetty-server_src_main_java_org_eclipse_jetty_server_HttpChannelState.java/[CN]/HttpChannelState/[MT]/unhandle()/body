{
  Action action;
  boolean read_interested=false;
  if (DEBUG)   LOG.debug("{} unhandle {}",this,_state);
  try (Locker.Lock lock=_locker.lock()){
switch (_state) {
case COMPLETING:
case COMPLETED:
      return Action.TERMINATED;
case DISPATCHED:
case ASYNC_IO:
    break;
default :
  throw new IllegalStateException(this.getStatusStringLocked());
}
_initial=false;
switch (_async) {
case COMPLETE:
_state=State.COMPLETING;
_async=Async.NOT_ASYNC;
action=Action.COMPLETE;
break;
case DISPATCH:
_state=State.DISPATCHED;
_async=Async.NOT_ASYNC;
action=Action.ASYNC_DISPATCH;
break;
case EXPIRED:
_state=State.DISPATCHED;
_async=Async.NOT_ASYNC;
action=Action.ERROR_DISPATCH;
break;
case STARTED:
if (_asyncReadUnready && _asyncReadPossible) {
_state=State.ASYNC_IO;
_asyncReadUnready=false;
action=Action.READ_CALLBACK;
}
 else if (_asyncWrite) {
_asyncWrite=false;
_state=State.ASYNC_IO;
action=Action.WRITE_CALLBACK;
}
 else {
_state=State.ASYNC_WAIT;
action=Action.WAIT;
if (_asyncReadUnready) _channel.asyncReadFillInterested();
Scheduler scheduler=_channel.getScheduler();
if (scheduler != null && _timeoutMs > 0) _event.setTimeoutTask(scheduler.schedule(_event,_timeoutMs,TimeUnit.MILLISECONDS));
}
break;
case EXPIRING:
_state=State.ASYNC_WAIT;
action=Action.WAIT;
break;
case ERRORING:
_state=State.DISPATCHED;
action=Action.ASYNC_ERROR;
break;
case ERRORED:
_state=State.DISPATCHED;
action=Action.ERROR_DISPATCH;
_async=Async.NOT_ASYNC;
break;
case NOT_ASYNC:
_state=State.COMPLETING;
action=Action.COMPLETE;
break;
default :
_state=State.COMPLETING;
action=Action.COMPLETE;
break;
}
}
 return action;
}

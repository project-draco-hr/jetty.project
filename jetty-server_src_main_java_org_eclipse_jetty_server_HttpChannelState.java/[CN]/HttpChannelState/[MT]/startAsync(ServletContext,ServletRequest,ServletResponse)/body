{
synchronized (this) {
switch (_state) {
case DISPATCHED:
case REDISPATCHED:
      _dispatched=false;
    _expired=false;
  _responseWrapped=response != _channel.getResponse();
_event=new AsyncEventState(context,request,response);
_event._pathInContext=(request instanceof HttpServletRequest) ? URIUtil.addPaths(((HttpServletRequest)request).getServletPath(),((HttpServletRequest)request).getPathInfo()) : null;
_state=State.ASYNCSTARTED;
List<AsyncListener> listeners=_lastAsyncListeners;
_lastAsyncListeners=_asyncListeners;
_asyncListeners=listeners;
if (_asyncListeners != null) _asyncListeners.clear();
break;
default :
throw new IllegalStateException(this.getStatusString());
}
}
if (_lastAsyncListeners != null) {
for (AsyncListener listener : _lastAsyncListeners) {
try {
listener.onStartAsync(_event);
}
 catch (Exception e) {
LOG.warn(e);
}
}
}
}

{
  try {
    getLog().debug("Starting Jetty Server ...");
    if (stopPort > 0 && stopKey != null) {
      ShutdownMonitor monitor=ShutdownMonitor.getInstance();
      monitor.setPort(stopPort);
      monitor.setKey(stopKey);
      monitor.setExitVm(!daemon);
    }
    printSystemProperties();
    applyJettyXml();
    if (httpConnector != null) {
      if (httpConnector.getPort() <= 0) {
        String tmp=System.getProperty(PORT_SYSPROPERTY,MavenServerConnector.DEFAULT_PORT_STR);
        httpConnector.setPort(Integer.parseInt(tmp.trim()));
      }
      if (httpConnector.getServer() == null)       httpConnector.setServer(this.server);
      this.server.addConnector(httpConnector);
    }
    Connector[] connectors=this.server.getConnectors();
    if (connectors == null || connectors.length == 0) {
      if (httpConnector == null) {
        httpConnector=new MavenServerConnector();
        String tmp=System.getProperty(PORT_SYSPROPERTY,MavenServerConnector.DEFAULT_PORT_STR);
        httpConnector.setPort(Integer.parseInt(tmp.trim()));
      }
      if (httpConnector.getServer() == null)       httpConnector.setServer(this.server);
      this.server.setConnectors(new Connector[]{httpConnector});
    }
    if (this.requestLog != null)     this.server.setRequestLog(this.requestLog);
    this.server.configureHandlers();
    configureWebApplication();
    this.server.addWebApplication(webApp);
    for (int i=0; (this.loginServices != null) && i < this.loginServices.length; i++) {
      getLog().debug(this.loginServices[i].getClass().getName() + ": " + this.loginServices[i].toString());
      this.server.addBean(this.loginServices[i]);
    }
    finishConfigurationBeforeStart();
    this.server.start();
    getLog().info("Started Jetty Server");
    configureScanner();
    startScanner();
    startConsoleScanner();
    if (!daemon) {
      server.join();
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Failure",e);
  }
 finally {
    if (!daemon) {
      getLog().info("Jetty server exiting.");
    }
  }
}

{
  while (true) {
switch (_state.get()) {
case OPEN:
      break;
case ASYNC:
    throw new IllegalStateException("isReady() not called");
case READY:
  if (!_state.compareAndSet(OutputState.READY,OutputState.PENDING))   continue;
boolean last=isLastContentToWrite(len);
if (!last && len <= _commitSize) {
if (_aggregate == null) _aggregate=_channel.getByteBufferPool().acquire(getBufferSize(),_interceptor.isOptimizedForDirectBuffers());
int filled=BufferUtil.fill(_aggregate,b,off,len);
if (filled == len && !BufferUtil.isFull(_aggregate)) {
  if (!_state.compareAndSet(OutputState.PENDING,OutputState.ASYNC))   throw new IllegalStateException();
  return;
}
off+=filled;
len-=filled;
}
new AsyncWrite(b,off,len,last).iterate();
return;
case PENDING:
case UNREADY:
throw new WritePendingException();
case ERROR:
throw new EofException(_onError);
case CLOSED:
throw new EofException("Closed");
default :
throw new IllegalStateException();
}
break;
}
int capacity=getBufferSize();
boolean last=isLastContentToWrite(len);
if (!last && len <= _commitSize) {
if (_aggregate == null) _aggregate=_channel.getByteBufferPool().acquire(capacity,_interceptor.isOptimizedForDirectBuffers());
int filled=BufferUtil.fill(_aggregate,b,off,len);
if (filled == len && !BufferUtil.isFull(_aggregate)) return;
off+=filled;
len-=filled;
}
if (BufferUtil.hasContent(_aggregate)) {
write(_aggregate,last && len == 0);
if (len > 0 && !last && len <= _commitSize && len <= BufferUtil.space(_aggregate)) {
BufferUtil.append(_aggregate,b,off,len);
return;
}
}
if (len > 0) {
ByteBuffer view=ByteBuffer.wrap(b,off,len);
while (len > getBufferSize()) {
int p=view.position();
int l=p + getBufferSize();
view.limit(p + getBufferSize());
write(view,false);
len-=getBufferSize();
view.limit(l + Math.min(len,getBufferSize()));
view.position(l);
}
write(view,last);
}
 else if (last) {
write(BufferUtil.EMPTY_BUFFER,true);
}
if (last) closed();
}

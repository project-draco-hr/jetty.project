{
  loop:   while (true) {
    OutputState state=_state.get();
switch (state) {
case CLOSED:
      break loop;
case UNREADY:
    if (_state.compareAndSet(state,OutputState.ERROR))     _writeListener.onError(_onError == null ? new EofException("Async close") : _onError);
  continue;
default :
if (_state.compareAndSet(state,OutputState.CLOSED)) {
  try {
    write(BufferUtil.hasContent(_aggregate) ? _aggregate : BufferUtil.EMPTY_BUFFER,!_channel.getResponse().isIncluding());
  }
 catch (  IOException e) {
    LOG.debug(e);
    _channel.failed();
  }
  releaseBuffer();
  return;
}
}
}
}

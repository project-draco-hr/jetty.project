{
  if (isClosed())   throw new IOException("Closed");
  if (content instanceof HttpContent) {
    HttpContent httpContent=(HttpContent)content;
    Response response=_channel.getResponse();
    String contentType=httpContent.getContentType();
    if (contentType != null && !response.getHttpFields().containsKey(HttpHeader.CONTENT_TYPE.asString()))     response.getHttpFields().put(HttpHeader.CONTENT_TYPE,contentType);
    if (httpContent.getContentLength() > 0)     response.getHttpFields().putLongField(HttpHeader.CONTENT_LENGTH,httpContent.getContentLength());
    String lm=httpContent.getLastModified();
    if (lm != null)     response.getHttpFields().put(HttpHeader.LAST_MODIFIED,lm);
 else     if (httpContent.getResource() != null) {
      long lml=httpContent.getResource().lastModified();
      if (lml != -1)       response.getHttpFields().putDateField(HttpHeader.LAST_MODIFIED,lml);
    }
    String etag=httpContent.getETag();
    if (etag != null)     response.getHttpFields().put(HttpHeader.ETAG,etag);
    content=httpContent.getDirectBuffer();
    if (content == null)     content=httpContent.getIndirectBuffer();
    if (content == null)     content=httpContent.getReadableByteChannel();
    if (content == null)     content=httpContent.getInputStream();
  }
 else   if (content instanceof Resource) {
    Resource resource=(Resource)content;
    _channel.getResponse().getHttpFields().putDateField(HttpHeader.LAST_MODIFIED,resource.lastModified());
    content=resource.getInputStream();
  }
  if (content instanceof ByteBuffer) {
    _channel.write((ByteBuffer)content,true);
    _closed=true;
  }
 else   if (content instanceof ReadableByteChannel) {
    ReadableByteChannel channel=(ReadableByteChannel)content;
    ByteBuffer buffer=_channel.getByteBufferPool().acquire(getBufferSize(),true);
    try {
      while (channel.isOpen()) {
        int pos=BufferUtil.flipToFill(buffer);
        int len=channel.read(buffer);
        if (len < 0)         break;
        BufferUtil.flipToFlush(buffer,pos);
        _channel.write(buffer,false);
      }
    }
  finally {
      close();
      _channel.getByteBufferPool().release(buffer);
    }
  }
 else   if (content instanceof InputStream) {
    InputStream in=(InputStream)content;
    ByteBuffer buffer=_channel.getByteBufferPool().acquire(getBufferSize(),false);
    byte[] array=buffer.array();
    int offset=buffer.arrayOffset();
    int size=array.length - offset;
    try {
      while (true) {
        int len=in.read(array,offset,size);
        if (len < 0)         break;
        buffer.position(0);
        buffer.limit(len);
        _channel.write(buffer,false);
      }
    }
  finally {
      close();
      _channel.getByteBufferPool().release(buffer);
    }
  }
 else   throw new IllegalArgumentException("unknown content type " + content.getClass());
}

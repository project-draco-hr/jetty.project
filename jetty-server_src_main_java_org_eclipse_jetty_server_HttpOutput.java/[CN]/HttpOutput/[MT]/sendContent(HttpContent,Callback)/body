{
  if (BufferUtil.hasContent(_aggregate))   throw new IOException("written");
  if (_channel.isCommitted())   throw new IOException("committed");
  while (true) {
switch (_state.get()) {
case OPEN:
      if (!_state.compareAndSet(OutputState.OPEN,OutputState.PENDING))       continue;
    break;
case ERROR:
  throw new EofException(_onError);
case CLOSED:
throw new EofException("Closed");
default :
throw new IllegalStateException();
}
break;
}
ByteBuffer buffer=_channel.useDirectBuffers() ? httpContent.getDirectBuffer() : null;
if (buffer == null) buffer=httpContent.getIndirectBuffer();
if (buffer != null) {
if (LOG.isDebugEnabled()) LOG.debug("sendContent({}=={},{},direct={})",httpContent,BufferUtil.toDetailString(buffer),callback,_channel.useDirectBuffers());
sendContent(buffer,callback);
return;
}
ReadableByteChannel rbc=httpContent.getReadableByteChannel();
if (rbc != null) {
if (LOG.isDebugEnabled()) LOG.debug("sendContent({}=={},{},direct={})",httpContent,rbc,callback,_channel.useDirectBuffers());
sendContent(rbc,callback);
return;
}
InputStream in=httpContent.getInputStream();
if (in != null) {
if (LOG.isDebugEnabled()) LOG.debug("sendContent({}=={},{},direct={})",httpContent,in,callback,_channel.useDirectBuffers());
sendContent(in,callback);
return;
}
callback.failed(new IllegalArgumentException("unknown content for " + httpContent));
}

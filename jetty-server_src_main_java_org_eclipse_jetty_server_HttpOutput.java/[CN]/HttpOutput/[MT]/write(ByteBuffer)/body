{
  while (true) {
switch (_state.get()) {
case OPEN:
      break;
case ASYNC:
    throw new IllegalStateException("isReady() not called");
case READY:
  if (!_state.compareAndSet(OutputState.READY,OutputState.PENDING))   continue;
boolean last=isLastContentToWrite(buffer.remaining());
new AsyncWrite(buffer,last).iterate();
return;
case PENDING:
case UNREADY:
throw new WritePendingException();
case ERROR:
throw new EofException(_onError);
case CLOSED:
throw new EofException("Closed");
default :
throw new IllegalStateException();
}
break;
}
int len=BufferUtil.length(buffer);
boolean last=isLastContentToWrite(len);
if (BufferUtil.hasContent(_aggregate)) write(_aggregate,last && len == 0);
if (len > 0) write(buffer,last);
 else if (last) write(BufferUtil.EMPTY_BUFFER,true);
if (last) closed();
}

{
  if (BufferUtil.hasContent(_aggregate)) {
    _completed=_len == 0;
    write(_aggregate,_complete && _completed,this);
    return Next.SCHEDULED;
  }
  if (!_complete && _len < BufferUtil.space(_aggregate) && _len < _commitSize) {
    BufferUtil.put(_buffer,_aggregate);
    return Next.SUCCEEDED;
  }
  if (_buffer.hasRemaining()) {
    if (_slice == null) {
      _completed=true;
      write(_buffer,_complete,this);
      return Next.SCHEDULED;
    }
    int p=_buffer.position();
    int l=Math.min(getBufferSize(),_buffer.remaining());
    int pl=p + l;
    _slice.limit(pl);
    _buffer.position(pl);
    _slice.position(p);
    _completed=!_buffer.hasRemaining();
    write(_slice,_complete && _completed,this);
    return Next.SCHEDULED;
  }
  if (_complete) {
    if (!_completed) {
      _completed=true;
      write(BufferUtil.EMPTY_BUFFER,_complete,this);
      return Next.SCHEDULED;
    }
    closed();
  }
  return Next.SUCCEEDED;
}

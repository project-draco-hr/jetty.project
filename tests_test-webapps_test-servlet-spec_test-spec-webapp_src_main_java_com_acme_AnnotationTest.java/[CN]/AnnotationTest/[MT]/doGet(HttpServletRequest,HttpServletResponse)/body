{
  try {
    response.setContentType("text/html");
    ServletOutputStream out=response.getOutputStream();
    out.println("<html>");
    out.println("<body>");
    out.println("<h1>Results</h1>");
    out.println("<h2>Init Params from Annotation</h2>");
    out.println("<pre>");
    out.println("initParams={@WebInitParam(name=\"fromAnnotation\", value=\"xyz\")}");
    out.println("</pre>");
    out.println("<br/><b>Result: " + ("xyz".equals(config.getInitParameter("fromAnnotation")) ? "PASS" : "FAIL"));
    out.println("<h2>Init Params from web-fragment</h2>");
    out.println("<pre>");
    out.println("extra1=123, extra2=345");
    out.println("</pre>");
    boolean fragInitParamResult="123".equals(config.getInitParameter("extra1")) && "345".equals(config.getInitParameter("extra2"));
    out.println("<br/><b>Result: " + (fragInitParamResult ? "PASS" : "FAIL"));
    __HandlesTypes=Arrays.asList("javax.servlet.GenericServlet","javax.servlet.http.HttpServlet","com.acme.AnnotationTest","com.acme.RoleAnnotationTest","com.acme.MultiPartTest","com.acme.FragmentServlet","com.acme.TestListener","com.acme.SecuredServlet","com.acme.Bar");
    out.println("<h2>@ContainerInitializer</h2>");
    out.println("<pre>");
    out.println("@HandlesTypes({javax.servlet.Servlet.class, Foo.class})");
    out.println("</pre>");
    out.print("<br/><b>Result: ");
    List<Class> classes=(List<Class>)config.getServletContext().getAttribute("com.acme.Foo");
    List<String> classNames=new ArrayList<String>();
    if (classes != null) {
      for (      Class c : classes) {
        classNames.add(c.getName());
        out.print(c.getName() + " ");
      }
      if (classNames.size() != __HandlesTypes.size())       out.println("<br/>FAIL");
 else       if (!classNames.containsAll(__HandlesTypes))       out.println("<br/>FAIL");
 else       out.println("<br/>PASS");
    }
 else     out.print("<br/>FAIL (No such attribute com.acme.Foo)");
    out.println("</b>");
    out.println("<h2>Complete Servlet Registration</h2>");
    Boolean complete=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.complete");
    out.println("<br/><b>Result: " + (complete.booleanValue() ? "PASS" : "FAIL") + "</b>");
    out.println("<h2>ServletContextListener Programmatic Registration from ServletContainerInitializer</h2>");
    Boolean programmaticListener=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.listenerTest");
    out.println("<br/><b>Result: " + (programmaticListener.booleanValue() ? "PASS" : "FAIL") + "</b>");
    out.println("<h2>ServletContextListener Programmatic Registration Prevented from ServletContextListener</h2>");
    Boolean programmaticListenerPrevention=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.listenerRegoTest");
    out.println("<br/><b>Result: " + (programmaticListenerPrevention.booleanValue() ? "PASS" : "FAIL") + "</b>");
    out.println("<h2>@PostConstruct Callback</h2>");
    out.println("<pre>");
    out.println("@PostConstruct");
    out.println("private void myPostConstructMethod ()");
    out.println("{}");
    out.println("</pre>");
    out.println("<br/><b>Result: " + postConstructResult + "</b>");
    out.println("<h2>@Resource Injection for DataSource</h2>");
    out.println("<pre>");
    out.println("@Resource(mappedName=\"jdbc/mydatasource\");");
    out.println("public void setMyDatasource(DataSource ds)");
    out.println("{");
    out.println("myDS=ds;");
    out.println("}");
    out.println("</pre>");
    out.println("<br/><b>Result: " + dsResult + "</b>");
    out.println("<br/><b>JNDI Lookup Result: " + dsLookupResult + "</b>");
    out.println("<h2>@Resource Injection for env-entry </h2>");
    out.println("<pre>");
    out.println("@Resource(mappedName=\"maxAmount\")");
    out.println("private Double maxAmount;");
    out.println("@Resource(name=\"minAmount\")");
    out.println("private Double minAmount;");
    out.println("</pre>");
    out.println("<br/><b>Result: " + envResult + ": "+ (maxAmount.compareTo(new Double(55)) == 0 ? " PASS" : " FAIL")+ "</b>");
    out.println("<br/><b>JNDI Lookup Result: " + envLookupResult + "</b>");
    out.println("<br/><b>Result: " + envResult2 + ": "+ (minAmount.compareTo(new Double("0.99")) == 0 ? " PASS" : " FAIL")+ "</b>");
    out.println("<br/><b>JNDI Lookup Result: " + envLookupResult2 + "</b>");
    out.println("<br/><b>Result: " + envResult3 + ": "+ (avgAmount.compareTo(new Double("1.25")) == 0 ? " PASS" : " FAIL")+ "</b>");
    out.println("<br/><b>JNDI Lookup Result: " + envLookupResult3 + "</b>");
    out.println("<h2>@Resource Injection for UserTransaction </h2>");
    out.println("<pre>");
    out.println("@Resource(mappedName=\"UserTransaction\")");
    out.println("private UserTransaction myUserTransaction;");
    out.println("</pre>");
    out.println("<br/><b>Result: " + txResult + "</b>");
    out.println("<br/><b>JNDI Lookup Result: " + txLookupResult + "</b>");
    out.println("<h2>DeclaresRoles</h2>");
    out.println("<p>Login as user \"admin\" with password \"admin\" when prompted after clicking the button below to test @DeclareRoles annotation</p>");
    String context=request.getContextPath();
    if (!context.endsWith("/"))     context+="/";
    context+="role/";
    out.println("<form action=" + context + " method=\"post\"><button type=\"submit\">Test Role Annotations</button></form>");
    out.println("<h2>ServletSecurity</h2>");
    out.println("<p>Login as user \"admin\" with password \"admin\" when prompted after clicking the button below to test @ServletSecurity annotation</p>");
    context=request.getContextPath();
    if (!context.endsWith("/"))     context+="/";
    String path=context + "sec/foo";
    out.println("<form action=" + path + " method=\"post\"><button type=\"submit\">Test ServletSecurity Annotation</button></form>");
    out.println("<h2>AsyncListener Resource Injection</h2>");
    out.println("<p>Click the following link to test that javax.servlet.AsyncListeners are injectable</p>");
    path=context + "asy/xx";
    out.println("<form action=" + path + " method=\"post\"><button type=\"submit\">Test AsyncListener</button></form>");
    out.println("</body>");
    out.println("</html>");
    out.flush();
  }
 catch (  Exception e) {
    throw new ServletException(e);
  }
}

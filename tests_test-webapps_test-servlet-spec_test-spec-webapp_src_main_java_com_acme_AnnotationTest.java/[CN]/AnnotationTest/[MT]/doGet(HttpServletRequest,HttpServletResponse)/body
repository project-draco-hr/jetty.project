{
  try {
    response.setContentType("text/html");
    ServletOutputStream out=response.getOutputStream();
    out.println("<html>");
    out.println("<HEAD><link rel=\"stylesheet\" type=\"text/css\"  href=\"stylesheet.css\"/></HEAD>");
    out.println("<body>");
    out.println("<h1>Results</h1>");
    out.println("<h2>Init Params from Annotation</h2>");
    out.println("<pre>");
    out.println("initParams={@WebInitParam(name=\"fromAnnotation\", value=\"xyz\")}");
    out.println("</pre>");
    out.println("<p><b>Result: " + ("xyz".equals(config.getInitParameter("fromAnnotation")) ? "<span class=\"pass\">PASS" : "<span class=\"fail\">FAIL") + "</span></p>");
    out.println("<h2>Init Params from web-fragment</h2>");
    out.println("<pre>");
    out.println("extra1=123, extra2=345");
    out.println("</pre>");
    boolean fragInitParamResult="123".equals(config.getInitParameter("extra1")) && "345".equals(config.getInitParameter("extra2"));
    out.println("<p><b>Result: " + (fragInitParamResult ? "<span class=\"pass\">PASS" : "<span class=\"fail\">FAIL") + "</span></p>");
    __HandlesTypes=Arrays.asList("javax.servlet.GenericServlet","javax.servlet.http.HttpServlet","com.acme.AsyncListenerServlet","com.acme.AnnotationTest","com.acme.RoleAnnotationTest","com.acme.MultiPartTest","com.acme.FragmentServlet","com.acme.TestListener","com.acme.SecuredServlet","com.acme.Bar");
    out.println("<h2>@ContainerInitializer</h2>");
    out.println("<pre>");
    out.println("@HandlesTypes({javax.servlet.Servlet.class, Foo.class})");
    out.println("</pre>");
    out.print("<p><b>Result: ");
    List<Class> classes=(List<Class>)config.getServletContext().getAttribute("com.acme.Foo");
    List<String> classNames=new ArrayList<String>();
    if (classes != null) {
      for (      Class c : classes) {
        classNames.add(c.getName());
        out.print(c.getName() + " ");
      }
      if (classNames.size() != __HandlesTypes.size())       out.println("<br/><span class=\"fail\">FAIL</span>");
 else       if (!classNames.containsAll(__HandlesTypes))       out.println("<br/><span class=\"fail\">FAIL</span>");
 else       out.println("<br/><span class=\"pass\">PASS</span>");
    }
 else     out.print("<br/><span class=\"fail\">FAIL</span> (No such attribute com.acme.Foo)");
    out.println("</b></p>");
    out.println("<h2>Complete Servlet Registration</h2>");
    Boolean complete=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.complete");
    out.println("<p><b>Result: " + (complete.booleanValue() ? "<span class=\"pass\">PASS" : "<span class=\"fail\">FAIL") + "</span></b></p>");
    out.println("<h2>ServletContextListener Programmatic Registration from ServletContainerInitializer</h2>");
    Boolean programmaticListener=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.listenerTest");
    out.println("<p><b>Result: " + (programmaticListener.booleanValue() ? "<span class=\"pass\">PASS" : "<span class=\"fail\">FAIL") + "</span></b></p>");
    out.println("<h2>ServletContextListener Programmatic Registration Prevented from ServletContextListener</h2>");
    Boolean programmaticListenerPrevention=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.listenerRegoTest");
    out.println("<p><b>Result: " + (programmaticListenerPrevention.booleanValue() ? "<span class=\"pass\">PASS" : "<span class=\"fail\">FAIL") + "</span></b></p>");
    out.println("<h2>ServletContextListener Registration Prevented from ServletContextListener</h2>");
    Boolean webListenerPrevention=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.sclFromSclRegoTest");
    out.println("<p><b>Result: " + (webListenerPrevention.booleanValue() ? "<span class=\"pass\">PASS" : "<span class=\"fail\">FAIL") + "</span></b></p>");
    out.println("<h2>Invalid Type for Listener Detection</h2>");
    Boolean badListener=(Boolean)config.getServletContext().getAttribute("com.acme.AnnotationTest.invalidListenerRegoTest");
    out.println("<p><b>Result: " + (badListener.booleanValue() ? "<span class=\"pass\">PASS" : "<span class=\"fail\">FAIL") + "</span></b></p>");
    out.println("<h2>@PostConstruct Callback</h2>");
    out.println("<pre>");
    out.println("@PostConstruct");
    out.println("private void myPostConstructMethod ()");
    out.println("{}");
    out.println("</pre>");
    out.println("<p><b>Result: " + postConstructResult + "</b></p>");
    out.println("<h2>@Resource Injection for DataSource</h2>");
    out.println("<pre>");
    out.println("@Resource(mappedName=\"jdbc/mydatasource\");");
    out.println("public void setMyDatasource(DataSource ds)");
    out.println("{");
    out.println("myDS=ds;");
    out.println("}");
    out.println("</pre>");
    out.println("<p><b>Result: " + dsResult + "</b>");
    out.println("<br/><b>JNDI Lookup Result: " + dsLookupResult + "</b></p>");
    out.println("<h2>@Resource Injection for env-entry </h2>");
    out.println("<pre>");
    out.println("@Resource(mappedName=\"maxAmount\")");
    out.println("private Double maxAmount;");
    out.println("@Resource(name=\"minAmount\")");
    out.println("private Double minAmount;");
    out.println("</pre>");
    out.println("<p><b>Result: " + envResult + ": "+ (maxAmount.compareTo(new Double(55)) == 0 ? " <span class=\"pass\">PASS" : " <span class=\"fail\">FAIL")+ "</span></b>");
    out.println("<br/><b>JNDI Lookup Result: " + envLookupResult + "</b>");
    out.println("<br/><b>Result: " + envResult2 + ": "+ (minAmount.compareTo(new Double("0.99")) == 0 ? " <span class=\"pass\">PASS" : " <span class=\"fail\">FAIL")+ "</span></b>");
    out.println("<br/><b>JNDI Lookup Result: " + envLookupResult2 + "</b>");
    out.println("<br/><b>Result: " + envResult3 + ": "+ (avgAmount.compareTo(new Double("1.25")) == 0 ? " <span class=\"pass\">PASS" : " <span class=\"fail\">FAIL")+ "</span></b>");
    out.println("<br/><b>JNDI Lookup Result: " + envLookupResult3 + "</b></p>");
    out.println("<h2>@Resource Injection for UserTransaction </h2>");
    out.println("<pre>");
    out.println("@Resource(mappedName=\"UserTransaction\")");
    out.println("private UserTransaction myUserTransaction;");
    out.println("</pre>");
    out.println("<p><b>Result: " + txResult + "</b>");
    out.println("<br/><b>JNDI Lookup Result: " + txLookupResult + "</b></p>");
    out.println("</body>");
    out.println("</html>");
    out.flush();
  }
 catch (  Exception e) {
    throw new ServletException(e);
  }
}

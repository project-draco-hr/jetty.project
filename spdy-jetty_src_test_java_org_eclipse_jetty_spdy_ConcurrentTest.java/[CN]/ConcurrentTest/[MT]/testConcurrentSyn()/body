{
  final CountDownLatch slowServerLatch=new CountDownLatch(1);
  final CountDownLatch fastServerLatch=new CountDownLatch(1);
  Session session=startClient(startServer(new ServerSessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      try {
        Headers headers=synInfo.getHeaders();
        String url=headers.get("url").value();
switch (url) {
case "/slow":
          Assert.assertTrue(fastServerLatch.await(10,TimeUnit.SECONDS));
        slowServerLatch.countDown();
      break;
case "/fast":
    fastServerLatch.countDown();
  break;
default :
Assert.fail();
}
stream.reply(new ReplyInfo(true));
return null;
}
 catch (InterruptedException x) {
throw new SPDYException(x);
}
}
}
),null);
final CountDownLatch slowClientLatch=new CountDownLatch(1);
Headers headers1=new Headers();
headers1.put("url","/slow");
session.syn(new SynInfo(headers1,true),new StreamFrameListener.Adapter(){
@Override public void onReply(Stream stream,ReplyInfo replyInfo){
slowClientLatch.countDown();
}
}
);
final CountDownLatch fastClientLatch=new CountDownLatch(1);
Headers headers2=new Headers();
headers2.put("url","/fast");
session.syn(new SynInfo(headers2,true),new StreamFrameListener.Adapter(){
@Override public void onReply(Stream stream,ReplyInfo replyInfo){
fastClientLatch.countDown();
}
}
);
Assert.assertTrue(fastServerLatch.await(5,TimeUnit.SECONDS));
Assert.assertTrue(fastClientLatch.await(5,TimeUnit.SECONDS));
Assert.assertTrue(slowServerLatch.await(5,TimeUnit.SECONDS));
Assert.assertTrue(slowClientLatch.await(5,TimeUnit.SECONDS));
}

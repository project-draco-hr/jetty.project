{
  final CountDownLatch slowServerLatch=new CountDownLatch(1);
  final CountDownLatch fastServerLatch=new CountDownLatch(1);
  Session session=startClient(version,startHTTPServer(version,new AbstractHandler(){
    @Override public void handle(    String target,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      try {
        request.setHandled(true);
switch (target) {
case "/slow":
          Assert.assertTrue(fastServerLatch.await(10,TimeUnit.SECONDS));
        slowServerLatch.countDown();
      break;
case "/fast":
    fastServerLatch.countDown();
  break;
default :
Assert.fail();
break;
}
}
 catch (InterruptedException x) {
throw new ServletException(x);
}
}
}
),null);
Headers headers=new Headers();
headers.put(HTTPSPDYHeader.METHOD.name(version),"GET");
headers.put(HTTPSPDYHeader.URI.name(version),"/slow");
headers.put(HTTPSPDYHeader.VERSION.name(version),"HTTP/1.1");
headers.put(HTTPSPDYHeader.HOST.name(version),"localhost:" + connector.getLocalPort());
final CountDownLatch slowClientLatch=new CountDownLatch(1);
session.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
@Override public void onReply(Stream stream,ReplyInfo replyInfo){
Headers replyHeaders=replyInfo.getHeaders();
Assert.assertTrue(replyHeaders.get(HTTPSPDYHeader.STATUS.name(version)).value().contains("200"));
slowClientLatch.countDown();
}
}
);
headers.clear();
headers.put(HTTPSPDYHeader.METHOD.name(version),"GET");
headers.put(HTTPSPDYHeader.URI.name(version),"/fast");
headers.put(HTTPSPDYHeader.VERSION.name(version),"HTTP/1.1");
headers.put(HTTPSPDYHeader.HOST.name(version),"localhost:" + connector.getLocalPort());
final CountDownLatch fastClientLatch=new CountDownLatch(1);
session.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
@Override public void onReply(Stream stream,ReplyInfo replyInfo){
Headers replyHeaders=replyInfo.getHeaders();
Assert.assertTrue(replyHeaders.get(HTTPSPDYHeader.STATUS.name(version)).value().contains("200"));
fastClientLatch.countDown();
}
}
);
Assert.assertTrue(fastServerLatch.await(5,TimeUnit.SECONDS));
Assert.assertTrue(slowServerLatch.await(5,TimeUnit.SECONDS));
Assert.assertTrue(fastClientLatch.await(5,TimeUnit.SECONDS));
Assert.assertTrue(slowClientLatch.await(5,TimeUnit.SECONDS));
}

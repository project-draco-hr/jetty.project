{
  if (!isStarted())   return;
  final Request base_request=(request instanceof Request) ? ((Request)request) : HttpConnection.getCurrentConnection().getRequest();
  final String old_servlet_name=base_request.getServletName();
  final String old_servlet_path=base_request.getServletPath();
  final String old_path_info=base_request.getPathInfo();
  UserIdentity scoped_identity=null;
  DispatcherType type=base_request.getDispatcherType();
  Object request_listeners=null;
  ServletRequestEvent request_event=null;
  ServletHolder servlet_holder=null;
  FilterChain chain=null;
  UserIdentity old_identity=null;
  if (target.startsWith("/")) {
    PathMap.Entry entry=getHolderEntry(target);
    if (entry != null) {
      servlet_holder=(ServletHolder)entry.getValue();
      if (Log.isDebugEnabled())       Log.debug("servlet=" + servlet_holder);
      String servlet_path_spec=(String)entry.getKey();
      String servlet_path=entry.getMapped() != null ? entry.getMapped() : PathMap.pathMatch(servlet_path_spec,target);
      String path_info=PathMap.pathInfo(servlet_path_spec,target);
      if (DispatcherType.INCLUDE.equals(type)) {
        base_request.setAttribute(Dispatcher.INCLUDE_SERVLET_PATH,servlet_path);
        base_request.setAttribute(Dispatcher.INCLUDE_PATH_INFO,path_info);
      }
 else {
        base_request.setServletPath(servlet_path);
        base_request.setPathInfo(path_info);
      }
      if (servlet_holder != null && _filterMappings != null && _filterMappings.length > 0)       chain=getFilterChain(base_request,target,servlet_holder);
    }
  }
 else {
    servlet_holder=(ServletHolder)_servletNameMap.get(target);
    if (servlet_holder != null) {
      if (_filterMappings != null && _filterMappings.length > 0) {
        chain=getFilterChain(base_request,null,servlet_holder);
      }
    }
  }
  if (Log.isDebugEnabled()) {
    Log.debug("chain=" + chain);
    Log.debug("servlet holder=" + servlet_holder);
  }
  try {
    if (servlet_holder == null) {
      notFound(request,response);
    }
 else {
      base_request.setServletName(servlet_holder.getName());
      if (_identityService != null) {
        old_identity=base_request.getUserIdentity();
        scoped_identity=_identityService.associate(old_identity,servlet_holder);
        base_request.setUserIdentity(scoped_identity);
      }
      request_listeners=base_request.takeRequestListeners();
      if (request_listeners != null) {
        request_event=new ServletRequestEvent(getServletContext(),request);
        final int s=LazyList.size(request_listeners);
        for (int i=0; i < s; i++) {
          final ServletRequestListener listener=(ServletRequestListener)LazyList.get(request_listeners,i);
          listener.requestInitialized(request_event);
        }
      }
      base_request.setHandled(true);
      if (chain != null)       chain.doFilter(request,response);
 else       servlet_holder.handle(base_request,request,response);
    }
  }
 catch (  RetryRequest e) {
    throw e;
  }
catch (  EofException e) {
    throw e;
  }
catch (  Exception e) {
    if (!(DispatcherType.REQUEST.equals(type) || DispatcherType.ASYNC.equals(type))) {
      if (e instanceof IOException)       throw (IOException)e;
      if (e instanceof RuntimeException)       throw (RuntimeException)e;
      if (e instanceof ServletException)       throw (ServletException)e;
    }
    Throwable th=e;
    if (th instanceof UnavailableException) {
      Log.debug(th);
    }
 else     if (th instanceof ServletException) {
      Log.debug(th);
      Throwable cause=((ServletException)th).getRootCause();
      if (cause != th && cause != null)       th=cause;
    }
    if (th instanceof RetryRequest) {
      base_request.setHandled(false);
      throw (RetryRequest)th;
    }
 else     if (th instanceof HttpException) {
      throw (HttpException)th;
    }
 else     if (Log.isDebugEnabled()) {
      Log.warn(request.getRequestURI(),th);
      Log.debug(request.toString());
    }
 else     if (th instanceof IOException || th instanceof UnavailableException) {
      Log.warn(request.getRequestURI() + ": " + th);
    }
 else {
      Log.warn(request.getRequestURI(),th);
    }
    if (!response.isCommitted()) {
      request.setAttribute(Dispatcher.ERROR_EXCEPTION_TYPE,th.getClass());
      request.setAttribute(Dispatcher.ERROR_EXCEPTION,th);
      if (th instanceof UnavailableException) {
        UnavailableException ue=(UnavailableException)th;
        if (ue.isPermanent())         response.sendError(HttpServletResponse.SC_NOT_FOUND,th.getMessage());
 else         response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,th.getMessage());
      }
 else       response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,th.getMessage());
    }
 else     if (Log.isDebugEnabled())     Log.debug("Response already committed for handling " + th);
  }
catch (  Error e) {
    if (!(DispatcherType.REQUEST.equals(type) || DispatcherType.ASYNC.equals(type)))     throw e;
    Log.warn("Error for " + request.getRequestURI(),e);
    if (Log.isDebugEnabled())     Log.debug(request.toString());
    if (!response.isCommitted()) {
      request.setAttribute(Dispatcher.ERROR_EXCEPTION_TYPE,e.getClass());
      request.setAttribute(Dispatcher.ERROR_EXCEPTION,e);
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e.getMessage());
    }
 else     if (Log.isDebugEnabled())     Log.debug("Response already committed for handling ",e);
  }
 finally {
    if (request_listeners != null) {
      for (int i=LazyList.size(request_listeners); i-- > 0; ) {
        final ServletRequestListener listener=(ServletRequestListener)LazyList.get(request_listeners,i);
        listener.requestDestroyed(request_event);
      }
    }
    if (scoped_identity != null) {
      _identityService.disassociate(scoped_identity);
      base_request.setUserIdentity(old_identity);
    }
    base_request.setServletName(old_servlet_name);
    if (!(DispatcherType.INCLUDE.equals(type))) {
      base_request.setServletPath(old_servlet_path);
      base_request.setPathInfo(old_path_info);
    }
  }
}

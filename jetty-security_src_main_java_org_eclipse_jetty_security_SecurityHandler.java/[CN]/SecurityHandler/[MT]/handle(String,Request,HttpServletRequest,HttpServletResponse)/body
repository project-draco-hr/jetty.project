{
  final Response base_response=baseRequest.getResponse();
  final Handler handler=getHandler();
  if (handler == null)   return;
  final Authenticator authenticator=_authenticator;
  if (checkSecurity(baseRequest)) {
    Object constraintInfo=prepareConstraintInfo(pathInContext,baseRequest);
    if (!checkUserDataPermissions(pathInContext,baseRequest,base_response,constraintInfo)) {
      if (!baseRequest.isHandled()) {
        response.sendError(Response.SC_FORBIDDEN);
        baseRequest.setHandled(true);
      }
      return;
    }
    boolean isAuthMandatory=isAuthMandatory(baseRequest,base_response,constraintInfo);
    if (isAuthMandatory && authenticator == null) {
      LOG.warn("No authenticator for: " + constraintInfo);
      if (!baseRequest.isHandled()) {
        response.sendError(Response.SC_FORBIDDEN);
        baseRequest.setHandled(true);
      }
      return;
    }
    Object previousIdentity=null;
    try {
      Authentication authentication=baseRequest.getAuthentication();
      if (authentication == null || authentication == Authentication.NOT_CHECKED)       authentication=authenticator == null ? Authentication.UNAUTHENTICATED : authenticator.validateRequest(request,response,isAuthMandatory);
      if (authentication instanceof Authentication.Wrapped) {
        request=((Authentication.Wrapped)authentication).getHttpServletRequest();
        response=((Authentication.Wrapped)authentication).getHttpServletResponse();
      }
      if (authentication instanceof Authentication.ResponseSent) {
        baseRequest.setHandled(true);
      }
 else       if (authentication instanceof Authentication.User) {
        Authentication.User userAuth=(Authentication.User)authentication;
        baseRequest.setAuthentication(authentication);
        previousIdentity=_identityService.associate(userAuth.getUserIdentity());
        if (isAuthMandatory) {
          boolean authorized=checkWebResourcePermissions(pathInContext,baseRequest,base_response,constraintInfo,userAuth.getUserIdentity());
          if (!authorized) {
            response.sendError(Response.SC_FORBIDDEN,"!role");
            baseRequest.setHandled(true);
            return;
          }
        }
        handler.handle(pathInContext,baseRequest,request,response);
        authenticator.secureResponse(request,response,isAuthMandatory,userAuth);
      }
 else       if (authentication instanceof Authentication.Deferred) {
        DeferredAuthentication deferred=(DeferredAuthentication)authentication;
        deferred.setIdentityService(_identityService);
        deferred.setLoginService(_loginService);
        baseRequest.setAuthentication(authentication);
        try {
          handler.handle(pathInContext,baseRequest,request,response);
        }
  finally {
          previousIdentity=deferred.getPreviousAssociation();
          deferred.setIdentityService(null);
        }
        Authentication auth=baseRequest.getAuthentication();
        if (auth instanceof Authentication.User) {
          Authentication.User userAuth=(Authentication.User)auth;
          authenticator.secureResponse(request,response,isAuthMandatory,userAuth);
        }
 else         authenticator.secureResponse(request,response,isAuthMandatory,null);
      }
 else {
        baseRequest.setAuthentication(authentication);
        if (_identityService != null)         previousIdentity=_identityService.associate(null);
        handler.handle(pathInContext,baseRequest,request,response);
        if (authenticator != null)         authenticator.secureResponse(request,response,isAuthMandatory,null);
      }
    }
 catch (    ServerAuthException e) {
      response.sendError(Response.SC_INTERNAL_SERVER_ERROR,e.getMessage());
    }
 finally {
      if (_identityService != null)       _identityService.disassociate(previousIdentity);
    }
  }
 else   handler.handle(pathInContext,baseRequest,request,response);
}

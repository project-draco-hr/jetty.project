{
  if (_deflater.needsInput()) {
    if (BufferUtil.isEmpty(_content)) {
      if (_deflater.finished()) {
        _factory.recycle(_deflater);
        _deflater=null;
        _channel.getByteBufferPool().release(_buffer);
        _buffer=null;
        if (_copy != null) {
          _channel.getByteBufferPool().release(_copy);
          _copy=null;
        }
        return Action.SUCCEEDED;
      }
      if (!_last) {
        return Action.SUCCEEDED;
      }
      _deflater.finish();
    }
 else     if (_content.hasArray()) {
      byte[] array=_content.array();
      int off=_content.arrayOffset() + _content.position();
      int len=_content.remaining();
      BufferUtil.clear(_content);
      _crc.update(array,off,len);
      _deflater.setInput(array,off,len);
      if (_last)       _deflater.finish();
    }
 else {
      if (_copy == null)       _copy=_channel.getByteBufferPool().acquire(_bufferSize,false);
      BufferUtil.clearToFill(_copy);
      int took=BufferUtil.put(_content,_copy);
      BufferUtil.flipToFlush(_copy,0);
      if (took == 0)       throw new IllegalStateException();
      byte[] array=_copy.array();
      int off=_copy.arrayOffset() + _copy.position();
      int len=_copy.remaining();
      _crc.update(array,off,len);
      _deflater.setInput(array,off,len);
      if (_last && BufferUtil.isEmpty(_content))       _deflater.finish();
    }
  }
  BufferUtil.compact(_buffer);
  int off=_buffer.arrayOffset() + _buffer.limit();
  int len=_buffer.capacity() - _buffer.limit() - (_last ? 8 : 0);
  if (len > 0) {
    int produced=_deflater.deflate(_buffer.array(),off,len,Deflater.NO_FLUSH);
    _buffer.limit(_buffer.limit() + produced);
  }
  boolean finished=_deflater.finished();
  if (finished)   addTrailer();
  _interceptor.write(_buffer,finished,this);
  return Action.SCHEDULED;
}

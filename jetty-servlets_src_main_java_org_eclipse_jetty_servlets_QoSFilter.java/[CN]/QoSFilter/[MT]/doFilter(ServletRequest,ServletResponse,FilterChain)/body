{
  boolean accepted=false;
  try {
    Boolean suspended=(Boolean)request.getAttribute(_suspended);
    if (suspended == null) {
      accepted=_passes.tryAcquire(getWaitMs(),TimeUnit.MILLISECONDS);
      if (accepted) {
        request.setAttribute(_suspended,Boolean.FALSE);
        if (LOG.isDebugEnabled())         LOG.debug("Accepted {}",request);
      }
 else {
        request.setAttribute(_suspended,Boolean.TRUE);
        int priority=getPriority(request);
        AsyncContext asyncContext=request.startAsync();
        long suspendMs=getSuspendMs();
        if (suspendMs > 0)         asyncContext.setTimeout(suspendMs);
        asyncContext.addListener(_listeners[priority]);
        _queues[priority].add(asyncContext);
        if (LOG.isDebugEnabled())         LOG.debug("Suspended {}",request);
        return;
      }
    }
 else {
      if (suspended) {
        request.setAttribute(_suspended,Boolean.FALSE);
        Boolean resumed=(Boolean)request.getAttribute(_resumed);
        if (resumed == Boolean.TRUE) {
          _passes.acquire();
          accepted=true;
          if (LOG.isDebugEnabled())           LOG.debug("Resumed {}",request);
        }
 else {
          accepted=_passes.tryAcquire(getWaitMs(),TimeUnit.MILLISECONDS);
          if (LOG.isDebugEnabled())           LOG.debug("Timeout {}",request);
        }
      }
 else {
        _passes.acquire();
        accepted=true;
        if (LOG.isDebugEnabled())         LOG.debug("Passthrough {}",request);
      }
    }
    if (accepted) {
      chain.doFilter(request,response);
    }
 else {
      if (LOG.isDebugEnabled())       LOG.debug("Rejected {}",request);
      ((HttpServletResponse)response).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    }
  }
 catch (  InterruptedException e) {
    ((HttpServletResponse)response).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
  }
 finally {
    if (accepted) {
      for (int p=_queues.length - 1; p >= 0; --p) {
        AsyncContext asyncContext=_queues[p].poll();
        if (asyncContext != null) {
          ServletRequest candidate=asyncContext.getRequest();
          Boolean suspended=(Boolean)candidate.getAttribute(_suspended);
          if (suspended == Boolean.TRUE) {
            candidate.setAttribute(_resumed,Boolean.TRUE);
            asyncContext.dispatch();
            break;
          }
        }
      }
      _passes.release();
    }
  }
}

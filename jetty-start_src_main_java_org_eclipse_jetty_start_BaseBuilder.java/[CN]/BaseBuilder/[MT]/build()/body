{
  Modules modules=startArgs.getAllModules();
  boolean dirty=false;
  String dirSource="<add-to-startd>";
  String iniSource="<add-to-start-ini>";
  int count=0;
  count+=modules.enableAll(startArgs.getAddToStartdIni(),dirSource);
  count+=modules.enableAll(startArgs.getAddToStartIni(),iniSource);
  Matcher startDMatcher=new AndMatcher(new EnabledMatcher(),new UniqueSourceMatcher(dirSource));
  Matcher startIniMatcher=new AndMatcher(new EnabledMatcher(),new UniqueSourceMatcher(iniSource));
  Matcher ambiguousMatcher=new AndMatcher(new EnabledMatcher(),new SourceSetMatcher(dirSource,iniSource));
  List<Module> ambiguous=modules.getMatching(ambiguousMatcher);
  if (ambiguous.size() > 0) {
    StringBuilder err=new StringBuilder();
    err.append("Unable to add ");
    err.append(ambiguous.size());
    err.append(" module");
    if (ambiguous.size() > 1) {
      err.append('s');
    }
    err.append(" (found declared via both --add-to-start and --add-to-startd): [");
    for (int i=0; i < ambiguous.size(); i++) {
      if (i > 0) {
        err.append(", ");
      }
      err.append(ambiguous.get(i).getName());
    }
    err.append(']');
    throw new RuntimeException(err.toString());
  }
  StartLog.debug("Adding %s new module(s)",count);
  ackLicenses();
  List<Module> startDModules=modules.getMatching(startDMatcher);
  List<Module> startIniModules=modules.getMatching(startIniMatcher);
  List<FileArg> files=new ArrayList<FileArg>();
  if (!startDModules.isEmpty()) {
    StartDirBuilder builder=new StartDirBuilder(this);
    for (    Module mod : startDModules) {
      dirty|=builder.addModule(mod);
      for (      String file : mod.getFiles()) {
        files.add(new FileArg(mod,file));
      }
    }
  }
  if (!startIniModules.isEmpty()) {
    StartIniBuilder builder=new StartIniBuilder(this);
    for (    Module mod : startIniModules) {
      dirty|=builder.addModule(mod);
      for (      String file : mod.getFiles()) {
        files.add(new FileArg(mod,file));
      }
    }
  }
  files.addAll(startArgs.getFiles());
  dirty|=processFileResources(files);
  return dirty;
}

{
  Modules modules=startArgs.getAllModules();
  boolean dirty=false;
  String dirCriteria="<add-to-startd>";
  String iniCriteria="<add-to-start-ini>";
  Selection startDirSelection=new Selection(dirCriteria);
  Selection startIniSelection=new Selection(iniCriteria);
  List<String> startDNames=new ArrayList<>();
  startDNames.addAll(startArgs.getAddToStartdIni());
  List<String> startIniNames=new ArrayList<>();
  startIniNames.addAll(startArgs.getAddToStartIni());
  int count=0;
  count+=modules.selectNodes(startDNames,startDirSelection);
  count+=modules.selectNodes(startIniNames,startIniSelection);
  Predicate ambiguousPredicate=new CriteriaSetPredicate(dirCriteria,iniCriteria);
  List<Module> ambiguous=modules.getMatching(ambiguousPredicate);
  if (ambiguous.size() > 0) {
    StringBuilder warn=new StringBuilder();
    warn.append("Ambiguous module locations detected, defaulting to --add-to-start for the following module selections:");
    warn.append(" [");
    for (int i=0; i < ambiguous.size(); i++) {
      if (i > 0) {
        warn.append(", ");
      }
      warn.append(ambiguous.get(i).getName());
    }
    warn.append(']');
    StartLog.warn(warn.toString());
  }
  StartLog.debug("Adding %s new module(s)",count);
  ackLicenses();
  Predicate startDMatcher=new UniqueCriteriaPredicate(dirCriteria);
  Predicate startIniMatcher=new UniqueCriteriaPredicate(iniCriteria);
  List<Module> startDModules=modules.getMatching(startDMatcher);
  List<Module> startIniModules=modules.getMatching(startIniMatcher);
  List<FileArg> files=new ArrayList<FileArg>();
  if (!startDModules.isEmpty()) {
    StartDirBuilder builder=new StartDirBuilder(this);
    for (    Module mod : startDModules) {
      if (ambiguous.contains(mod)) {
        continue;
      }
      dirty|=builder.addModule(mod);
      for (      String file : mod.getFiles()) {
        files.add(new FileArg(mod,file));
      }
    }
  }
  if (!startIniModules.isEmpty()) {
    StartIniBuilder builder=new StartIniBuilder(this);
    for (    Module mod : startIniModules) {
      dirty|=builder.addModule(mod);
      for (      String file : mod.getFiles()) {
        files.add(new FileArg(mod,file));
      }
    }
  }
  files.addAll(startArgs.getFiles());
  dirty|=processFileResources(files);
  return dirty;
}

{
  _dispatchedStats.increment();
  final long start;
  HttpChannelState state=baseRequest.getHttpChannelState();
  if (state.isInitial()) {
    _requestStats.increment();
    start=baseRequest.getTimeStamp();
  }
 else {
    start=System.currentTimeMillis();
    _asyncDispatches.incrementAndGet();
  }
  try {
    Handler handler=getHandler();
    if (handler != null && _shutdown.get() == null && isStarted())     handler.handle(path,baseRequest,request,response);
 else     if (baseRequest.isHandled()) {
      if (_wrapWarning.compareAndSet(false,true))       LOG.warn("Bad statistics configuration. Latencies will be incorrect in {}",this);
    }
 else {
      baseRequest.setHandled(true);
      response.sendError(HttpStatus.SERVICE_UNAVAILABLE_503);
    }
  }
  finally {
    final long now=System.currentTimeMillis();
    final long dispatched=now - start;
    _dispatchedStats.decrement();
    _dispatchedTimeStats.set(dispatched);
    if (state.isSuspended()) {
      if (state.isInitial()) {
        state.addListener(_onCompletion);
        _asyncWaitStats.increment();
      }
    }
 else     if (state.isInitial()) {
      long d=_requestStats.decrement();
      _requestTimeStats.set(dispatched);
      updateResponse(baseRequest);
      FutureCallback shutdown=_shutdown.get();
      if (shutdown != null) {
        response.flushBuffer();
        if (d == 0)         shutdown.succeeded();
      }
    }
  }
}

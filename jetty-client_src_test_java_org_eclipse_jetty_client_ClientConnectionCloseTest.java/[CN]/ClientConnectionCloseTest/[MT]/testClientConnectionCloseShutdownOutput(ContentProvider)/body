{
  AtomicReference<EndPoint> ref=new AtomicReference<>();
  start(new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      ref.set(baseRequest.getHttpChannel().getEndPoint());
      ServletInputStream input=request.getInputStream();
      while (true) {
        int read=input.read();
        if (read < 0)         break;
      }
      response.setStatus(HttpStatus.OK_200);
    }
  }
);
  ContentResponse response=client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).path("/ctx/path").header(HttpHeader.CONNECTION,HttpHeaderValue.CLOSE.asString()).content(content).send();
  Assert.assertEquals(HttpStatus.OK_200,response.getStatus());
  Thread.sleep(1000);
  EndPoint serverEndPoint=ref.get();
  ByteBuffer buffer=BufferUtil.allocate(1);
  int read=serverEndPoint.fill(buffer);
  Assert.assertEquals(-1,read);
}

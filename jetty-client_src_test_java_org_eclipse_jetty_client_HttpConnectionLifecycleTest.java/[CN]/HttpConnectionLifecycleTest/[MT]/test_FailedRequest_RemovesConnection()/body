{
  start(new EmptyServerHandler());
  String host="localhost";
  int port=connector.getLocalPort();
  HttpDestination destination=(HttpDestination)client.getDestination(scheme,host,port);
  final BlockingQueue<Connection> idleConnections=destination.getIdleConnections();
  Assert.assertEquals(0,idleConnections.size());
  final BlockingQueue<Connection> activeConnections=destination.getActiveConnections();
  Assert.assertEquals(0,activeConnections.size());
  final CountDownLatch beginLatch=new CountDownLatch(1);
  final CountDownLatch failureLatch=new CountDownLatch(2);
  final AtomicBoolean failed=new AtomicBoolean(false);
  client.newRequest(host,port).scheme(scheme).listener(new Request.Listener.Empty(){
    @Override public void onBegin(    Request request){
      activeConnections.peek().close();
      beginLatch.countDown();
    }
    @Override public void onFailure(    Request request,    Throwable failure){
      failureLatch.countDown();
    }
  }
).send(new Response.Listener.Empty(){
    @Override public void onComplete(    Result result){
      failed.set(result.isFailed());
      failureLatch.countDown();
    }
  }
);
  Assert.assertTrue(beginLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(failureLatch.await(5,TimeUnit.SECONDS));
  Assert.assertEquals(0,idleConnections.size());
  Assert.assertEquals(0,activeConnections.size());
  Assert.assertTrue(failed.get());
}

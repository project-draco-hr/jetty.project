{
  start(new EmptyServerHandler());
  String host="localhost";
  int port=connector.getLocalPort();
  HttpDestination destination=(HttpDestination)client.getDestination(scheme,host,port);
  final BlockingQueue<Connection> idleConnections=destination.getIdleConnections();
  Assert.assertEquals(0,idleConnections.size());
  final BlockingQueue<Connection> activeConnections=destination.getActiveConnections();
  Assert.assertEquals(0,activeConnections.size());
  final CountDownLatch headersLatch=new CountDownLatch(1);
  final CountDownLatch testLatch=new CountDownLatch(1);
  final CountDownLatch successLatch=new CountDownLatch(3);
  final AtomicBoolean failed=new AtomicBoolean(false);
  client.newRequest(host,port).scheme(scheme).onRequestSuccess(new Request.SuccessListener(){
    @Override public void onSuccess(    Request request){
      successLatch.countDown();
    }
  }
).onResponseHeaders(new Response.HeadersListener(){
    @Override public void onHeaders(    Response response){
      headersLatch.countDown();
      try {
        testLatch.await();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).send(new Response.Listener.Empty(){
    @Override public void onSuccess(    Response response){
      successLatch.countDown();
    }
    @Override public void onComplete(    Result result){
      failed.set(result.isFailed());
      successLatch.countDown();
    }
  }
);
  Assert.assertTrue(headersLatch.await(5,TimeUnit.SECONDS));
  Assert.assertEquals(0,idleConnections.size());
  Assert.assertEquals(1,activeConnections.size());
  testLatch.countDown();
  Assert.assertTrue(successLatch.await(5,TimeUnit.SECONDS));
  Assert.assertEquals(1,idleConnections.size());
  Assert.assertEquals(0,activeConnections.size());
  Assert.assertFalse(failed.get());
}

{
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      response.setHeader("Connection","close");
      baseRequest.setHandled(true);
    }
  }
);
  String scheme="http";
  String host="localhost";
  int port=connector.getLocalPort();
  HttpDestination destination=(HttpDestination)client.getDestination(scheme,host,port);
  final BlockingQueue<Connection> idleConnections=destination.getIdleConnections();
  Assert.assertEquals(0,idleConnections.size());
  final BlockingQueue<Connection> activeConnections=destination.getActiveConnections();
  Assert.assertEquals(0,activeConnections.size());
  final CountDownLatch latch=new CountDownLatch(1);
  client.newRequest(host,port).content(new ByteBufferContentProvider(ByteBuffer.allocate(16 * 1024 * 1024))).send(new Response.Listener.Adapter(){
    @Override public void onComplete(    Result result){
      Assert.assertEquals(0,idleConnections.size());
      Assert.assertEquals(0,activeConnections.size());
      latch.countDown();
    }
  }
);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  Assert.assertEquals(0,idleConnections.size());
  Assert.assertEquals(0,activeConnections.size());
}

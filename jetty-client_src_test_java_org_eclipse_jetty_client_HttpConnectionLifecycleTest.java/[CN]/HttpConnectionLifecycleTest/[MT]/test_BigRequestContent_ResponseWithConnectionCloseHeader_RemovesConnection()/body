{
  StdErrLog logger=StdErrLog.getLogger(org.eclipse.jetty.server.HttpConnection.class);
  logger.setHideStacks(true);
  try {
    start(new AbstractHandler(){
      @Override public void handle(      String target,      org.eclipse.jetty.server.Request baseRequest,      HttpServletRequest request,      HttpServletResponse response) throws IOException, ServletException {
        response.setHeader("Connection","close");
        baseRequest.setHandled(true);
      }
    }
);
    String host="localhost";
    int port=connector.getLocalPort();
    HttpDestination destination=(HttpDestination)client.getDestination(scheme,host,port);
    final BlockingQueue<Connection> idleConnections=destination.getIdleConnections();
    Assert.assertEquals(0,idleConnections.size());
    final BlockingQueue<Connection> activeConnections=destination.getActiveConnections();
    Assert.assertEquals(0,activeConnections.size());
    Log.getLogger(HttpConnection.class).info("Expecting java.lang.IllegalStateException: HttpParser{s=CLOSED,...");
    final CountDownLatch latch=new CountDownLatch(1);
    ByteBuffer buffer=ByteBuffer.allocate(16 * 1024 * 1024);
    Arrays.fill(buffer.array(),(byte)'x');
    client.newRequest(host,port).scheme(scheme).content(new ByteBufferContentProvider(buffer)).send(new Response.Listener.Empty(){
      @Override public void onComplete(      Result result){
        Assert.assertEquals(0,idleConnections.size());
        Assert.assertEquals(0,activeConnections.size());
        latch.countDown();
      }
    }
);
    Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
    Assert.assertEquals(0,idleConnections.size());
    Assert.assertEquals(0,activeConnections.size());
    server.stop();
  }
  finally {
    logger.setHideStacks(false);
  }
}

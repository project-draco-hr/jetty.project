{
  start(new EmptyServerHandler());
  String host="localhost";
  int port=connector.getLocalPort();
  HttpDestination destination=(HttpDestination)client.getDestination(scheme,host,port);
  final BlockingQueue<Connection> idleConnections=destination.getIdleConnections();
  Assert.assertEquals(0,idleConnections.size());
  final BlockingQueue<Connection> activeConnections=destination.getActiveConnections();
  Assert.assertEquals(0,activeConnections.size());
  final long delay=1000;
  final CountDownLatch successLatch=new CountDownLatch(3);
  final AtomicBoolean failed=new AtomicBoolean(false);
  final AtomicBoolean four_hundred=new AtomicBoolean(false);
  client.newRequest(host,port).scheme(scheme).listener(new Request.Listener.Empty(){
    @Override public void onBegin(    Request request){
      request.header(HttpHeader.HOST,null);
    }
    @Override public void onHeaders(    Request request){
      try {
        TimeUnit.MILLISECONDS.sleep(delay);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    @Override public void onSuccess(    Request request){
      successLatch.countDown();
    }
  }
).send(new Response.Listener.Empty(){
    @Override public void onSuccess(    Response response){
      four_hundred.set(response.getStatus() == 400);
      successLatch.countDown();
    }
    @Override public void onComplete(    Result result){
      failed.set(result.isFailed());
      successLatch.countDown();
    }
  }
);
  Assert.assertTrue(successLatch.await(delay * 5,TimeUnit.MILLISECONDS));
  Assert.assertEquals(0,idleConnections.size());
  Assert.assertEquals(0,activeConnections.size());
  Assert.assertFalse(failed.get());
  Assert.assertTrue(four_hundred.get());
}

{
  AnnotationParser parser=new AnnotationParser();
  ClassInheritanceHandler handler=new ClassInheritanceHandler();
  parser.registerHandler(handler);
class Foo implements InterfaceD {
  }
  classNames.clear();
  classNames.add(ClassA.class.getName());
  classNames.add(ClassB.class.getName());
  classNames.add(InterfaceD.class.getName());
  classNames.add(Foo.class.getName());
  parser.parse(classNames,null);
  MultiMap map=handler.getMap();
  assertNotNull(map);
  assertFalse(map.isEmpty());
  assertEquals(2,map.size());
  Map stringArrayMap=map.toStringArrayMap();
  assertTrue(stringArrayMap.keySet().contains("org.eclipse.jetty.annotations.ClassA"));
  assertTrue(stringArrayMap.keySet().contains("org.eclipse.jetty.annotations.InterfaceD"));
  String[] classes=(String[])stringArrayMap.get("org.eclipse.jetty.annotations.ClassA");
  assertEquals(1,classes.length);
  assertEquals("org.eclipse.jetty.annotations.ClassB",classes[0]);
  classes=(String[])stringArrayMap.get("org.eclipse.jetty.annotations.InterfaceD");
  assertEquals(2,classes.length);
  assertEquals("org.eclipse.jetty.annotations.ClassB",classes[0]);
  assertEquals(Foo.class.getName(),classes[1]);
}

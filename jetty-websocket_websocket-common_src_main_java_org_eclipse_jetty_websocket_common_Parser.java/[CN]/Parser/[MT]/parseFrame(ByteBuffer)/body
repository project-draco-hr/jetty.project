{
  if (LOG.isDebugEnabled())   LOG.debug("{} Parsing {} bytes",policy.getBehavior(),buffer.remaining());
  while (buffer.hasRemaining()) {
switch (state) {
case START:
{
        byte b=buffer.get();
        boolean fin=((b & 0x80) != 0);
        byte opcode=(byte)(b & 0x0F);
        if (!OpCode.isKnown(opcode)) {
          throw new ProtocolException("Unknown opcode: " + opcode);
        }
        if (LOG.isDebugEnabled())         LOG.debug("OpCode {}, fin={} rsv={}{}{}",OpCode.name(opcode),fin,(isRsv1InUse() ? '1' : '.'),(isRsv2InUse() ? '1' : '.'),(isRsv3InUse() ? '1' : '.'));
switch (opcode) {
case OpCode.TEXT:
          frame=new TextFrame();
        if (priorDataFrame) {
          throw new ProtocolException("Unexpected " + OpCode.name(opcode) + " frame, was expecting CONTINUATION");
        }
      break;
case OpCode.BINARY:
    frame=new BinaryFrame();
  if (priorDataFrame) {
    throw new ProtocolException("Unexpected " + OpCode.name(opcode) + " frame, was expecting CONTINUATION");
  }
break;
case OpCode.CONTINUATION:
frame=new ContinuationFrame();
if (!priorDataFrame) {
throw new ProtocolException("CONTINUATION frame without prior !FIN");
}
break;
case OpCode.CLOSE:
frame=new CloseFrame();
if (!fin) {
throw new ProtocolException("Fragmented Close Frame [" + OpCode.name(opcode) + "]");
}
break;
case OpCode.PING:
frame=new PingFrame();
if (!fin) {
throw new ProtocolException("Fragmented Ping Frame [" + OpCode.name(opcode) + "]");
}
break;
case OpCode.PONG:
frame=new PongFrame();
if (!fin) {
throw new ProtocolException("Fragmented Pong Frame [" + OpCode.name(opcode) + "]");
}
break;
}
frame.setFin(fin);
if ((b & 0x70) != 0) {
if ((b & 0x40) != 0) {
if (isRsv1InUse()) frame.setRsv1(true);
 else throw new ProtocolException("RSV1 not allowed to be set");
}
if ((b & 0x20) != 0) {
if (isRsv2InUse()) frame.setRsv2(true);
 else throw new ProtocolException("RSV2 not allowed to be set");
}
if ((b & 0x10) != 0) {
if (isRsv3InUse()) frame.setRsv3(true);
 else throw new ProtocolException("RSV3 not allowed to be set");
}
}
 else {
if (LOG.isDebugEnabled()) LOG.debug("OpCode {}, fin={} rsv=000",OpCode.name(opcode),fin);
}
state=State.PAYLOAD_LEN;
break;
}
case PAYLOAD_LEN:
{
byte b=buffer.get();
frame.setMasked((b & 0x80) != 0);
payloadLength=(byte)(0x7F & b);
if (payloadLength == 127) {
payloadLength=0;
state=State.PAYLOAD_LEN_BYTES;
cursor=8;
break;
}
 else if (payloadLength == 126) {
payloadLength=0;
state=State.PAYLOAD_LEN_BYTES;
cursor=2;
break;
}
assertSanePayloadLength(payloadLength);
if (frame.isMasked()) {
state=State.MASK;
}
 else {
if (payloadLength == 0) {
state=State.START;
return true;
}
maskProcessor.reset(frame);
state=State.PAYLOAD;
}
break;
}
case PAYLOAD_LEN_BYTES:
{
byte b=buffer.get();
--cursor;
payloadLength|=(b & 0xFF) << (8 * cursor);
if (cursor == 0) {
assertSanePayloadLength(payloadLength);
if (frame.isMasked()) {
state=State.MASK;
}
 else {
if (payloadLength == 0) {
state=State.START;
return true;
}
maskProcessor.reset(frame);
state=State.PAYLOAD;
}
}
break;
}
case MASK:
{
byte m[]=new byte[4];
frame.setMask(m);
if (buffer.remaining() >= 4) {
buffer.get(m,0,4);
if (payloadLength == 0) {
state=State.START;
return true;
}
maskProcessor.reset(frame);
state=State.PAYLOAD;
}
 else {
state=State.MASK_BYTES;
cursor=4;
}
break;
}
case MASK_BYTES:
{
byte b=buffer.get();
frame.getMask()[4 - cursor]=b;
--cursor;
if (cursor == 0) {
if (payloadLength == 0) {
state=State.START;
return true;
}
maskProcessor.reset(frame);
state=State.PAYLOAD;
}
break;
}
case PAYLOAD:
{
frame.assertValid();
if (parsePayload(buffer)) {
if (frame.getOpCode() == OpCode.CLOSE) {
new CloseInfo(frame);
}
state=State.START;
return true;
}
break;
}
}
}
return false;
}

{
  super();
  Objects.requireNonNull(rawSpec,"Path Param Spec cannot be null");
  if ("".equals(rawSpec) || "/".equals(rawSpec)) {
    super.pathSpec="/";
    super.pattern=Pattern.compile("^/$");
    super.pathDepth=1;
    this.specLength=1;
    this.variables=new String[0];
    this.group=PathSpecGroup.EXACT;
    return;
  }
  if (rawSpec.charAt(0) != '/') {
    StringBuilder err=new StringBuilder();
    err.append("Syntax Error: path spec \"");
    err.append(rawSpec);
    err.append("\" must start with '/'");
    throw new IllegalArgumentException(err.toString());
  }
  for (  String forbidden : FORBIDDEN_SEGMENTS) {
    if (rawSpec.contains(forbidden)) {
      StringBuilder err=new StringBuilder();
      err.append("Syntax Error: segment ");
      err.append(forbidden);
      err.append(" is forbidden in path spec: ");
      err.append(rawSpec);
      throw new IllegalArgumentException(err.toString());
    }
  }
  this.pathSpec=rawSpec;
  StringBuilder regex=new StringBuilder();
  regex.append('^');
  List<String> varNames=new ArrayList<>();
  String segments[]=rawSpec.substring(1).split("/");
  char segmentSignature[]=new char[segments.length];
  this.pathDepth=segments.length;
  for (int i=0; i < segments.length; i++) {
    String segment=segments[i];
    Matcher mat=VARIABLE_PATTERN.matcher(segment);
    if (mat.matches()) {
      String variable=mat.group(1);
      if (varNames.contains(variable)) {
        StringBuilder err=new StringBuilder();
        err.append("Syntax Error: variable ");
        err.append(variable);
        err.append(" is duplicated in path spec: ");
        err.append(rawSpec);
        throw new IllegalArgumentException(err.toString());
      }
      assertIsValidVariableLiteral(variable);
      segmentSignature[i]='v';
      varNames.add(variable);
      regex.append("/([^/]+)");
    }
 else     if (mat.find(0)) {
      StringBuilder err=new StringBuilder();
      err.append("Syntax Error: variable ");
      err.append(mat.group());
      err.append(" must exist as entire path segment: ");
      err.append(rawSpec);
      throw new IllegalArgumentException(err.toString());
    }
 else     if ((segment.indexOf('{') >= 0) || (segment.indexOf('}') >= 0)) {
      StringBuilder err=new StringBuilder();
      err.append("Syntax Error: invalid path segment /");
      err.append(segment);
      err.append("/ variable declaration incomplete: ");
      err.append(rawSpec);
      throw new IllegalArgumentException(err.toString());
    }
 else     if (segment.indexOf('*') >= 0) {
      StringBuilder err=new StringBuilder();
      err.append("Syntax Error: path segment /");
      err.append(segment);
      err.append("/ contains a wildcard symbol (not supported by this uri-template implementation): ");
      err.append(rawSpec);
      throw new IllegalArgumentException(err.toString());
    }
 else {
      segmentSignature[i]='e';
      regex.append('/');
      for (      char c : segment.toCharArray()) {
        if ((c == '.') || (c == '[') || (c == ']')|| (c == '\\')) {
          regex.append('\\');
        }
        regex.append(c);
      }
    }
  }
  if (rawSpec.charAt(rawSpec.length() - 1) == '/') {
    regex.append('/');
  }
  regex.append('$');
  this.pattern=Pattern.compile(regex.toString());
  int varcount=varNames.size();
  this.variables=varNames.toArray(new String[varcount]);
  String sig=String.valueOf(segmentSignature);
  if (Pattern.matches("^e*$",sig)) {
    this.group=PathSpecGroup.EXACT;
  }
 else   if (Pattern.matches("^e*v+",sig)) {
    this.group=PathSpecGroup.PREFIX_GLOB;
  }
 else   if (Pattern.matches("^v+e+",sig)) {
    this.group=PathSpecGroup.SUFFIX_GLOB;
  }
 else {
    this.group=PathSpecGroup.MIDDLE_GLOB;
  }
}

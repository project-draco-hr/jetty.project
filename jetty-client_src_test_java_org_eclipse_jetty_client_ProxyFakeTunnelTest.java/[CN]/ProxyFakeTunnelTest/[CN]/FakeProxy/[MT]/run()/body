{
  Socket toserver=null;
  final InputStream in;
  final OutputStream out;
  try {
    in=_socket.getInputStream();
    out=_socket.getOutputStream();
    String address="";
    int state=0;
    for (int b=in.read(); b >= 0; b=in.read()) {
switch (state) {
case 0:
        if (' ' == b)         state=1;
      break;
case 1:
    if (' ' == b)     state=2;
 else     address+=(char)b;
  break;
case 2:
if ('\r' == b) state=3;
break;
case 3:
if ('\n' == b) state=4;
 else state=2;
break;
case 4:
if ('\r' == b) state=5;
 else state=2;
break;
case 5:
if ('\n' == b) {
state=6;
System.err.println("address=" + address);
String[] parts=address.split(":");
try {
toserver=new Socket(parts[0],Integer.parseInt(parts[1]));
out.write(("HTTP/1.1 200 OK\r\n" + "Server: fake\r\n" + "\r\n").getBytes());
}
 catch (IOException e) {
out.write(("HTTP/1.1 503 Unavailable\r\n" + "Server: fake\r\n" + "Content-Length: 0\r\n"+ "\r\n").getBytes());
}
out.flush();
System.err.println(toserver);
final InputStream from=toserver.getInputStream();
Thread copy=new Thread(){
public void run(){
try {
IO.copy(from,out);
out.close();
}
 catch (IOException e) {
}
 finally {
try {
out.close();
}
 catch (IOException e) {
}
}
}
}
;
copy.setDaemon(true);
copy.start();
}
 else state=2;
break;
case 6:
toserver.getOutputStream().write((byte)b);
}
}
}
 catch (IOException e) {
e.printStackTrace();
}
 finally {
if (toserver != null) {
try {
toserver.close();
}
 catch (IOException e) {
e.printStackTrace();
}
}
}
}

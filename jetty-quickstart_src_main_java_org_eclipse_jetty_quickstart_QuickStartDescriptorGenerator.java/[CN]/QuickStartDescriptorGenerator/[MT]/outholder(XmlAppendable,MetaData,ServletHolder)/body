{
  if (LOG.isDebugEnabled())   out.openTag("servlet",Collections.singletonMap("source",holder.getSource().toString()));
 else   out.openTag("servlet");
  String n=holder.getName();
  out.tag("servlet-name",n);
  String ot=n + ".servlet.";
  ServletHolder s=(ServletHolder)holder;
  if (s.getForcedPath() != null && s.getClassName() == null)   out.tag("jsp-file",s.getForcedPath());
 else   out.tag("servlet-class",origin(md,ot + "servlet-class"),s.getClassName());
  for (  String p : holder.getInitParameters().keySet()) {
    if ("jsp".equalsIgnoreCase(n) && "scratchdir".equalsIgnoreCase(p))     continue;
    out.openTag("init-param",origin(md,ot + "init-param." + p)).tag("param-name",p).tag("param-value",holder.getInitParameter(p)).closeTag();
  }
  if (s.getInitOrder() >= 0)   out.tag("load-on-startup",Integer.toString(s.getInitOrder()));
  if (!s.isEnabled())   out.tag("enabled",origin(md,ot + "enabled"),"false");
  out.tag("async-supported",origin(md,ot + "async-supported"),holder.isAsyncSupported() ? "true" : "false");
  if (s.getRunAsRole() != null)   out.openTag("run-as",origin(md,ot + "run-as")).tag("role-name",s.getRunAsRole()).closeTag();
  Map<String,String> roles=s.getRoleRefMap();
  if (roles != null) {
    for (    Map.Entry<String,String> e : roles.entrySet()) {
      out.openTag("security-role-ref",origin(md,ot + "role-name." + e.getKey())).tag("role-name",e.getKey()).tag("role-link",e.getValue()).closeTag();
    }
  }
  MultipartConfigElement multipartConfig=((ServletHolder.Registration)s.getRegistration()).getMultipartConfig();
  if (multipartConfig != null) {
    out.openTag("multipart-config",origin(md,s.getName() + ".servlet.multipart-config"));
    if (multipartConfig.getLocation() != null)     out.tag("location",multipartConfig.getLocation());
    out.tag("max-file-size",Long.toString(multipartConfig.getMaxFileSize()));
    out.tag("max-request-size",Long.toString(multipartConfig.getMaxRequestSize()));
    out.tag("file-size-threshold",Long.toString(multipartConfig.getFileSizeThreshold()));
    out.closeTag();
  }
  out.closeTag();
}

{
  final AtomicInteger userCount=new AtomicInteger();
  final List<String> users=new ArrayList<String>();
  final File usersFile=initUsersText();
  PropertyUserStore store=new PropertyUserStore();
  store.setHotReload(true);
  store.setConfigPath(usersFile);
  store.registerUserListener(new PropertyUserStore.UserListener(){
    public void update(    String username,    Credential credential,    String[] roleArray){
      if (!users.contains(username)) {
        users.add(username);
        userCount.getAndIncrement();
      }
    }
    public void remove(    String username){
    }
  }
);
  store.start();
  Thread.sleep(2000);
  Assert.assertEquals(3,userCount.get());
  addAdditionalUser(usersFile,"skip: skip, roleA\n");
  long start=System.currentTimeMillis();
  while (userCount.get() < 4 && (System.currentTimeMillis() - start) < 10000) {
    Thread.sleep(10);
  }
  Assert.assertNotNull("Failed to retrieve UserIdentity from PropertyUserStore directly",store.getUserIdentity("skip"));
  Assert.assertEquals(4,userCount.get());
  Assert.assertTrue(users.contains("skip"));
}

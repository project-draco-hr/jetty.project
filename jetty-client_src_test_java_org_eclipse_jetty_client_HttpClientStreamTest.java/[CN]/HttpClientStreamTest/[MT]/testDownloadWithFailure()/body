{
  final byte[] data=new byte[64 * 1024];
  byte value=1;
  Arrays.fill(data,value);
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      response.setContentLength(2 * data.length);
      response.getOutputStream().write(data);
      baseRequest.getHttpChannel().getEndPoint().shutdownOutput();
    }
  }
);
  InputStreamResponseListener listener=new InputStreamResponseListener();
  client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).send(listener);
  Response response=listener.get(5,TimeUnit.SECONDS);
  Assert.assertNotNull(response);
  Assert.assertEquals(200,response.status());
  InputStream input=listener.getInputStream();
  Assert.assertNotNull(input);
  int length=0;
  try {
    length=0;
    while (input.read() == value) {
      if (length % 100 == 0)       Thread.sleep(1);
      ++length;
    }
    fail();
  }
 catch (  IOException expected) {
  }
  Assert.assertEquals(data.length,length);
  Result result=listener.await(5,TimeUnit.SECONDS);
  Assert.assertNotNull(result);
  Assert.assertTrue(result.isFailed());
}

{
  start(new EmptyServerHandler());
  final AtomicInteger bytes=new AtomicInteger();
  final CountDownLatch closeLatch=new CountDownLatch(1);
  InputStream stream=new InputStream(){
    @Override public int read() throws IOException {
      int result=bytes.incrementAndGet();
switch (result) {
case 1:
{
          break;
        }
case 2:
{
        try {
          connector.stop();
        }
 catch (        Exception x) {
          throw new IOException(x);
        }
        break;
      }
default :
{
      result=-1;
      break;
    }
}
return result;
}
@Override public void close() throws IOException {
super.close();
closeLatch.countDown();
}
}
;
InputStreamContentProvider provider=new InputStreamContentProvider(stream,1);
final CountDownLatch completeLatch=new CountDownLatch(1);
client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).content(provider).send(new Response.CompleteListener(){
@Override public void onComplete(Result result){
Assert.assertTrue(result.isFailed());
completeLatch.countDown();
}
}
);
Assert.assertTrue(completeLatch.await(5,TimeUnit.SECONDS));
Assert.assertTrue(closeLatch.await(5,TimeUnit.SECONDS));
}

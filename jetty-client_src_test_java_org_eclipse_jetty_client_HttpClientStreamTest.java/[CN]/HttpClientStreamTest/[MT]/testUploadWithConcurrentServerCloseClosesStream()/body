{
  final CountDownLatch serverLatch=new CountDownLatch(1);
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      AsyncContext asyncContext=request.startAsync();
      asyncContext.setTimeout(0);
      serverLatch.countDown();
    }
  }
);
  final AtomicBoolean commit=new AtomicBoolean();
  final CountDownLatch closeLatch=new CountDownLatch(1);
  InputStream stream=new InputStream(){
    @Override public int read() throws IOException {
      if (commit.get()) {
        try {
          Assert.assertTrue(serverLatch.await(5,TimeUnit.SECONDS));
          connector.stop();
          return 0;
        }
 catch (        Throwable x) {
          throw new IOException(x);
        }
      }
 else {
        return connector.isStopped() ? -1 : 0;
      }
    }
    @Override public void close() throws IOException {
      super.close();
      closeLatch.countDown();
    }
  }
;
  InputStreamContentProvider provider=new InputStreamContentProvider(stream,1);
  final CountDownLatch completeLatch=new CountDownLatch(1);
  client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).content(provider).onRequestCommit(new Request.CommitListener(){
    @Override public void onCommit(    Request request){
      commit.set(true);
    }
  }
).send(new Response.CompleteListener(){
    @Override public void onComplete(    Result result){
      Assert.assertTrue(result.isFailed());
      completeLatch.countDown();
    }
  }
);
  Assert.assertTrue(completeLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(closeLatch.await(5,TimeUnit.SECONDS));
}

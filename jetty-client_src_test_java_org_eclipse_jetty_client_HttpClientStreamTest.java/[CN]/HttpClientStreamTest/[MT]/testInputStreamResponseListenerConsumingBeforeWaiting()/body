{
  final byte[] data=new byte[]{0,1};
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      response.setContentLength(data.length);
      ServletOutputStream output=response.getOutputStream();
      output.write(data);
      output.flush();
    }
  }
);
  final AtomicReference<Throwable> failure=new AtomicReference<>();
  InputStreamResponseListener listener=new InputStreamResponseListener(1){
    @Override protected boolean await(){
      InputStream stream=getInputStream();
      consume(stream,data);
      return super.await();
    }
    private void consume(    InputStream stream,    byte[] data){
      try {
        for (        byte datum : data)         Assert.assertEquals(datum,stream.read());
      }
 catch (      IOException x) {
        failure.compareAndSet(null,x);
      }
    }
  }
;
  client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).send(listener);
  Result result=listener.await(5,TimeUnit.SECONDS);
  Assert.assertEquals(200,result.getResponse().getStatus());
  Assert.assertNull(failure.get());
}

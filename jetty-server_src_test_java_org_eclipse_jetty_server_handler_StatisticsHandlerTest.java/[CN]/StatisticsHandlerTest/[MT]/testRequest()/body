{
  final CyclicBarrier barrier[]={new CyclicBarrier(2),new CyclicBarrier(2)};
  _statsHandler.setHandler(new AbstractHandler(){
    public void handle(    String path,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      try {
        barrier[0].await();
        barrier[1].await();
      }
 catch (      Exception x) {
        Thread.currentThread().interrupt();
        throw (IOException)new IOException().initCause(x);
      }
    }
  }
);
  _server.start();
  String request="GET / HTTP/1.1\r\n" + "Host: localhost\r\n" + "\r\n";
  _connector.executeRequest(request);
  barrier[0].await();
  assertEquals(1,_connector.getConnectionsOpen());
  assertEquals(0,_statsHandler.getRequests());
  assertEquals(1,_statsHandler.getRequestsActive());
  assertEquals(1,_statsHandler.getRequestsActiveMax());
  assertEquals(0,_statsHandler.getDispatched());
  assertEquals(1,_statsHandler.getDispatchedActive());
  assertEquals(1,_statsHandler.getDispatchedActiveMax());
  barrier[1].await();
  boolean passed=_latchHandler.await(1000);
  assertTrue(passed);
  assertEquals(1,_statsHandler.getRequests());
  assertEquals(0,_statsHandler.getRequestsActive());
  assertEquals(1,_statsHandler.getRequestsActiveMax());
  assertEquals(1,_statsHandler.getDispatched());
  assertEquals(0,_statsHandler.getDispatchedActive());
  assertEquals(1,_statsHandler.getDispatchedActiveMax());
  assertEquals(0,_statsHandler.getSuspends());
  assertEquals(0,_statsHandler.getResumes());
  assertEquals(0,_statsHandler.getExpires());
  assertEquals(1,_statsHandler.getResponses2xx());
  _latchHandler.reset();
  barrier[0].reset();
  barrier[1].reset();
  _connector.executeRequest(request);
  barrier[0].await();
  assertEquals(2,_connector.getConnectionsOpen());
  assertEquals(1,_statsHandler.getRequests());
  assertEquals(1,_statsHandler.getRequestsActive());
  assertEquals(1,_statsHandler.getRequestsActiveMax());
  assertEquals(1,_statsHandler.getDispatched());
  assertEquals(1,_statsHandler.getDispatchedActive());
  assertEquals(1,_statsHandler.getDispatchedActiveMax());
  barrier[1].await();
  passed=_latchHandler.await(1000);
  assertTrue(passed);
  assertEquals(2,_statsHandler.getRequests());
  assertEquals(0,_statsHandler.getRequestsActive());
  assertEquals(1,_statsHandler.getRequestsActiveMax());
  assertEquals(2,_statsHandler.getDispatched());
  assertEquals(0,_statsHandler.getDispatchedActive());
  assertEquals(1,_statsHandler.getDispatchedActiveMax());
  assertEquals(0,_statsHandler.getSuspends());
  assertEquals(0,_statsHandler.getResumes());
  assertEquals(0,_statsHandler.getExpires());
  assertEquals(2,_statsHandler.getResponses2xx());
  _latchHandler.reset(2);
  barrier[0]=new CyclicBarrier(3);
  barrier[1]=new CyclicBarrier(3);
  _connector.executeRequest(request);
  _connector.executeRequest(request);
  barrier[0].await();
  assertEquals(4,_connector.getConnectionsOpen());
  assertEquals(2,_statsHandler.getRequests());
  assertEquals(2,_statsHandler.getRequestsActive());
  assertEquals(2,_statsHandler.getRequestsActiveMax());
  assertEquals(2,_statsHandler.getDispatched());
  assertEquals(2,_statsHandler.getDispatchedActive());
  assertEquals(2,_statsHandler.getDispatchedActiveMax());
  barrier[1].await();
  passed=_latchHandler.await(1000);
  assertTrue(passed);
  assertEquals(4,_statsHandler.getRequests());
  assertEquals(0,_statsHandler.getRequestsActive());
  assertEquals(2,_statsHandler.getRequestsActiveMax());
  assertEquals(4,_statsHandler.getDispatched());
  assertEquals(0,_statsHandler.getDispatchedActive());
  assertEquals(2,_statsHandler.getDispatchedActiveMax());
  assertEquals(0,_statsHandler.getSuspends());
  assertEquals(0,_statsHandler.getResumes());
  assertEquals(0,_statsHandler.getExpires());
  assertEquals(4,_statsHandler.getResponses2xx());
}

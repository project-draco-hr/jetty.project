{
  final CyclicBarrier barrier[]={new CyclicBarrier(3),new CyclicBarrier(3)};
  _latchHandler.reset(2);
  _statsHandler.setHandler(new AbstractHandler(){
    @Override public void handle(    String path,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      try {
        barrier[0].await();
        barrier[1].await();
      }
 catch (      Exception x) {
        Thread.currentThread().interrupt();
        throw (IOException)new IOException().initCause(x);
      }
    }
  }
);
  _server.start();
  String request="GET / HTTP/1.1\r\n" + "Host: localhost\r\n" + "\r\n";
  _connector.executeRequest(request);
  _connector.executeRequest(request);
  barrier[0].await();
  assertEquals(2,_statistics.getConnections());
  assertEquals(2,_statsHandler.getRequests());
  assertEquals(2,_statsHandler.getRequestsActive());
  assertEquals(2,_statsHandler.getRequestsActiveMax());
  assertEquals(2,_statsHandler.getDispatched());
  assertEquals(2,_statsHandler.getDispatchedActive());
  assertEquals(2,_statsHandler.getDispatchedActiveMax());
  barrier[1].await();
  assertTrue(_latchHandler.await());
  assertEquals(2,_statsHandler.getRequests());
  assertEquals(0,_statsHandler.getRequestsActive());
  assertEquals(2,_statsHandler.getRequestsActiveMax());
  assertEquals(2,_statsHandler.getDispatched());
  assertEquals(0,_statsHandler.getDispatchedActive());
  assertEquals(2,_statsHandler.getDispatchedActiveMax());
  assertEquals(0,_statsHandler.getAsyncRequests());
  assertEquals(0,_statsHandler.getAsyncDispatches());
  assertEquals(0,_statsHandler.getExpires());
  assertEquals(2,_statsHandler.getResponses2xx());
}

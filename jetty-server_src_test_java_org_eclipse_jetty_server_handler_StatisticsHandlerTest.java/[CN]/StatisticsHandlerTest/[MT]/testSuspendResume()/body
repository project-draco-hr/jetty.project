{
  final AtomicReference<AsyncContext> asyncHolder=new AtomicReference<>();
  final CyclicBarrier barrier[]={new CyclicBarrier(2),new CyclicBarrier(2),new CyclicBarrier(2)};
  _statsHandler.setHandler(new AbstractHandler(){
    @Override public void handle(    String path,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      try {
        barrier[0].await();
        Thread.sleep(10);
        if (asyncHolder.get() == null) {
          asyncHolder.set(request.startAsync());
        }
      }
 catch (      Exception x) {
        Thread.currentThread().interrupt();
        throw (IOException)new IOException().initCause(x);
      }
 finally {
        try {
          barrier[1].await();
        }
 catch (        Exception x) {
          x.printStackTrace();
          Thread.currentThread().interrupt();
          fail();
        }
      }
    }
  }
);
  _server.start();
  String request="GET / HTTP/1.1\r\n" + "Host: localhost\r\n" + "\r\n";
  _connector.executeRequest(request);
  barrier[0].await();
  assertEquals(1,_statistics.getConnectionsOpen());
  assertEquals(1,_statsHandler.getRequests());
  assertEquals(1,_statsHandler.getRequestsActive());
  assertEquals(1,_statsHandler.getDispatched());
  assertEquals(1,_statsHandler.getDispatchedActive());
  barrier[1].await();
  assertTrue(_latchHandler.await());
  assertNotNull(asyncHolder.get());
  assertTrue(asyncHolder.get() != null);
  assertEquals(1,_statsHandler.getRequests());
  assertEquals(1,_statsHandler.getRequestsActive());
  assertEquals(1,_statsHandler.getDispatched());
  assertEquals(0,_statsHandler.getDispatchedActive());
  Thread.sleep(10);
  _latchHandler.reset();
  barrier[0].reset();
  barrier[1].reset();
  Thread.sleep(50);
  asyncHolder.get().addListener(new AsyncListener(){
    @Override public void onTimeout(    AsyncEvent event) throws IOException {
    }
    @Override public void onStartAsync(    AsyncEvent event) throws IOException {
    }
    @Override public void onError(    AsyncEvent event) throws IOException {
    }
    @Override public void onComplete(    AsyncEvent event) throws IOException {
      try {
        barrier[2].await();
      }
 catch (      Exception e) {
      }
    }
  }
);
  asyncHolder.get().dispatch();
  barrier[0].await();
  assertEquals(1,_statistics.getConnectionsOpen());
  assertEquals(1,_statsHandler.getRequests());
  assertEquals(1,_statsHandler.getRequestsActive());
  assertEquals(2,_statsHandler.getDispatched());
  assertEquals(1,_statsHandler.getDispatchedActive());
  barrier[1].await();
  assertTrue(_latchHandler.await());
  barrier[2].await();
  assertEquals(1,_statsHandler.getRequests());
  assertEquals(0,_statsHandler.getRequestsActive());
  assertEquals(2,_statsHandler.getDispatched());
  assertEquals(0,_statsHandler.getDispatchedActive());
  assertEquals(1,_statsHandler.getAsyncRequests());
  assertEquals(1,_statsHandler.getAsyncDispatches());
  assertEquals(0,_statsHandler.getExpires());
  assertEquals(1,_statsHandler.getResponses2xx());
  assertThat(_statsHandler.getRequestTimeTotal(),greaterThanOrEqualTo(50L));
  assertEquals(_statsHandler.getRequestTimeTotal(),_statsHandler.getRequestTimeMax());
  assertEquals(_statsHandler.getRequestTimeTotal(),_statsHandler.getRequestTimeMean(),0.01);
  assertTrue(_statsHandler.getDispatchedTimeTotal() >= 20);
  assertTrue(_statsHandler.getDispatchedTimeMean() + 10 <= _statsHandler.getDispatchedTimeTotal());
  assertTrue(_statsHandler.getDispatchedTimeMax() + 10 <= _statsHandler.getDispatchedTimeTotal());
}

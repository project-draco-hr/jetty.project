{
  final long timeout=1000;
  final AtomicReference<Continuation> continuationHandle=new AtomicReference<Continuation>();
  _statsHandler.setHandler(new AbstractHandler(){
    public void handle(    String path,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      Continuation continuation=ContinuationSupport.getContinuation(httpRequest);
      System.out.println("continuation = " + continuation);
      if (continuationHandle.get() == null) {
        continuation.setTimeout(timeout);
        continuation.suspend();
        continuationHandle.set(continuation);
      }
    }
  }
);
  _server.start();
  String request="GET / HTTP/1.1\r\n" + "Host: localhost\r\n" + "\r\n";
  _connector.executeRequest(request);
  boolean passed=_latchHandler.await(1000);
  assertTrue(passed);
  assertNotNull(continuationHandle.get());
  assertTrue(continuationHandle.get().isSuspended());
  Thread.sleep(timeout);
  passed=_latchHandler.await(1000);
  assertTrue(passed);
  assertEquals(2,_statsHandler.getRequests());
  assertEquals(0,_statsHandler.getRequestsResumed());
  assertEquals(1,_statsHandler.getRequestsExpired());
  assertEquals(1,_statsHandler.getResponses2xx());
}

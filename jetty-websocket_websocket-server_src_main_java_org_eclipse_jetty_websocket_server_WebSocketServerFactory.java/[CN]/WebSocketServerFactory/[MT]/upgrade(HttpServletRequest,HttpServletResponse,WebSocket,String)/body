{
  if (!"websocket".equalsIgnoreCase(request.getHeader("Upgrade"))) {
    throw new IllegalStateException("Not a 'WebSocket: Ugprade' request");
  }
  if (!"HTTP/1.1".equals(request.getProtocol())) {
    throw new IllegalStateException("Not a 'HTTP/1.1' request");
  }
  int version=request.getIntHeader("Sec-WebSocket-Version");
  if (version < 0) {
    version=request.getIntHeader("Sec-WebSocket-Draft");
  }
  List<ExtensionConfig> extensionsRequested=new ArrayList<>();
  Enumeration<String> e=request.getHeaders("Sec-WebSocket-Extensions");
  while (e.hasMoreElements()) {
    QuotedStringTokenizer tok=new QuotedStringTokenizer(e.nextElement(),",");
    while (tok.hasMoreTokens()) {
      extensionsRequested.add(ExtensionConfig.parse(tok.nextToken()));
    }
  }
  WebSocketServer.Handshake handshaker=handshakes.get(version);
  if (handshaker == null) {
    LOG.warn("Unsupported Websocket version: " + version);
    response.setHeader("Sec-WebSocket-Version",supportedVersions);
    response.sendError(HttpStatus.BAD_REQUEST_400,"Unsupported websocket version specification");
    return;
  }
  HttpConnection http=HttpConnection.getCurrentConnection();
  AsyncEndPoint endp=http.getEndPoint();
  Executor executor=http.getConnector().findExecutor();
  final AsyncWebSocketConnection connection=new AsyncWebSocketConnection(endp,executor,policy);
  endp.setAsyncConnection(connection);
  List<Extension> extensions=initExtensions(extensionsRequested);
  handshaker.doHandshakeResponse(request,response,extensions,acceptedSubProtocol);
  addConnection(connection);
  LOG.debug("Websocket upgrade {} {} {} {}",request.getRequestURI(),version,acceptedSubProtocol,connection);
  request.setAttribute("org.eclipse.jetty.io.Connection",connection);
}

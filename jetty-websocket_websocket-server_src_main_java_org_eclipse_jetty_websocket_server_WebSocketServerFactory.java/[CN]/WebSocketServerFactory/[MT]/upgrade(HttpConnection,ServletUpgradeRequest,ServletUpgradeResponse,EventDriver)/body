{
  if (!"websocket".equalsIgnoreCase(request.getHeader("Upgrade"))) {
    throw new IllegalStateException("Not a 'WebSocket: Upgrade' request");
  }
  if (!"HTTP/1.1".equals(request.getHttpVersion())) {
    throw new IllegalStateException("Not a 'HTTP/1.1' request");
  }
  int version=request.getHeaderInt("Sec-WebSocket-Version");
  if (version < 0) {
    version=request.getHeaderInt("Sec-WebSocket-Draft");
  }
  WebSocketHandshake handshaker=handshakes.get(version);
  if (handshaker == null) {
    StringBuilder warn=new StringBuilder();
    warn.append("Client ").append(request.getRemoteAddress());
    warn.append(" (:").append(request.getRemotePort());
    warn.append(") User Agent: ");
    String ua=request.getHeader("User-Agent");
    if (ua == null) {
      warn.append("[unset] ");
    }
 else {
      warn.append('"').append(StringUtil.sanitizeXmlString(ua)).append("\" ");
    }
    warn.append("requested WebSocket version [").append(version);
    warn.append("], Jetty supports version");
    if (handshakes.size() > 1) {
      warn.append('s');
    }
    warn.append(": [").append(supportedVersions).append("]");
    LOG.warn(warn.toString());
    response.setHeader("Sec-WebSocket-Version",supportedVersions);
    response.sendError(HttpStatus.BAD_REQUEST_400,"Unsupported websocket version specification");
    return false;
  }
  ExtensionStack extensionStack=new ExtensionStack(getExtensionFactory());
  if (response.isExtensionsNegotiated()) {
    extensionStack.negotiate(response.getExtensions());
  }
 else {
    extensionStack.negotiate(request.getExtensions());
  }
  EndPoint endp=http.getEndPoint();
  Executor executor=http.getConnector().getExecutor();
  ByteBufferPool bufferPool=http.getConnector().getByteBufferPool();
  WebSocketServerConnection wsConnection=new WebSocketServerConnection(endp,executor,scheduler,driver.getPolicy(),bufferPool);
  extensionStack.setPolicy(driver.getPolicy());
  extensionStack.configure(wsConnection.getParser());
  extensionStack.configure(wsConnection.getGenerator());
  if (LOG.isDebugEnabled()) {
    LOG.debug("HttpConnection: {}",http);
    LOG.debug("WebSocketConnection: {}",wsConnection);
  }
  WebSocketSession session=createSession(request.getRequestURI(),driver,wsConnection);
  session.setPolicy(driver.getPolicy());
  session.setUpgradeRequest(request);
  response.setExtensions(extensionStack.getNegotiatedExtensions());
  session.setUpgradeResponse(response);
  wsConnection.setSession(session);
  wsConnection.setNextIncomingFrames(extensionStack);
  extensionStack.setNextIncoming(session);
  session.setOutgoingHandler(extensionStack);
  extensionStack.setNextOutgoing(wsConnection);
  try {
    session.start();
  }
 catch (  Exception e) {
    throw new IOException("Unable to start Session",e);
  }
  try {
    extensionStack.start();
  }
 catch (  Exception e) {
    throw new IOException("Unable to start Extension Stack",e);
  }
  request.setServletAttribute(HttpConnection.UPGRADE_CONNECTION_ATTRIBUTE,wsConnection);
  if (LOG.isDebugEnabled())   LOG.debug("Handshake Response: {}",handshaker);
  handshaker.doHandshakeResponse(request,response);
  if (LOG.isDebugEnabled())   LOG.debug("Websocket upgrade {} {} {} {}",request.getRequestURI(),version,response.getAcceptedSubProtocol(),wsConnection);
  return true;
}

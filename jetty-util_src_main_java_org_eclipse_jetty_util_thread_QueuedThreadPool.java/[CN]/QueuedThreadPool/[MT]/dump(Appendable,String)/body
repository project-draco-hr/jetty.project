{
  List<Object> dump=new ArrayList<>(getMaxThreads());
  for (  final Thread thread : _threads) {
    final StackTraceElement[] trace=thread.getStackTrace();
    boolean inIdleJobPoll=false;
    for (    StackTraceElement t : trace) {
      if ("idleJobPoll".equals(t.getMethodName())) {
        inIdleJobPoll=true;
        break;
      }
    }
    final boolean idle=inIdleJobPoll;
    if (isDetailedDump()) {
      dump.add(new Dumpable(){
        @Override public void dump(        Appendable out,        String indent) throws IOException {
          out.append(String.valueOf(thread.getId())).append(' ').append(thread.getName()).append(' ').append(thread.getState().toString()).append(idle ? " IDLE" : "");
          if (thread.getPriority() != Thread.NORM_PRIORITY)           out.append(" prio=" + thread.getPriority());
          out.append('\n');
          if (!idle)           ContainerLifeCycle.dump(out,indent,Arrays.asList(trace));
        }
        @Override public String dump(){
          return null;
        }
      }
);
    }
 else {
      int p=thread.getPriority();
      dump.add(thread.getId() + " " + thread.getName()+ " "+ thread.getState()+ " @ "+ (trace.length > 0 ? trace[0] : "???")+ (idle ? " IDLE" : "")+ (p == Thread.NORM_PRIORITY ? "" : (" prio=" + p)));
    }
  }
  ContainerLifeCycle.dumpObject(out,this);
  ContainerLifeCycle.dump(out,indent,dump);
}

{
  final int size=512;
  final CountDownLatch dataLatch=new CountDownLatch(3);
  final AtomicReference<Callback> callbackRef=new AtomicReference<>();
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame requestFrame){
      HttpFields fields=new HttpFields();
      MetaData.Response response=new MetaData.Response(HttpVersion.HTTP_2,200,fields);
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),response,null,true);
      stream.headers(responseFrame,Callback.NOOP);
      return new Stream.Listener.Adapter(){
        private final AtomicInteger dataFrames=new AtomicInteger();
        @Override public void onData(        Stream stream,        DataFrame frame,        Callback callback){
          dataLatch.countDown();
          int dataFrameCount=dataFrames.incrementAndGet();
          if (dataFrameCount == 1) {
            callbackRef.set(callback);
            Map<Integer,Integer> settings=new HashMap<>();
            settings.put(SettingsFrame.INITIAL_WINDOW_SIZE,size);
            stream.getSession().settings(new SettingsFrame(settings,false),Callback.NOOP);
          }
 else           if (dataFrameCount > 1) {
            callback.succeeded();
          }
        }
      }
;
    }
  }
);
  final CountDownLatch settingsLatch=new CountDownLatch(2);
  Session session=newClient(new Session.Listener.Adapter(){
    @Override public void onSettings(    Session session,    SettingsFrame frame){
      settingsLatch.countDown();
    }
  }
);
  MetaData.Request request=newRequest("POST",new HttpFields());
  FuturePromise<Stream> promise=new FuturePromise<>();
  session.newStream(new HeadersFrame(0,request,null,false),promise,new Stream.Listener.Adapter());
  Stream stream=promise.get(5,TimeUnit.SECONDS);
  stream.data(new DataFrame(stream.getId(),ByteBuffer.allocate(size * 2),false),Callback.NOOP);
  settingsLatch.await(5,TimeUnit.SECONDS);
  stream.data(new DataFrame(stream.getId(),ByteBuffer.allocate(size * 2),true),Callback.NOOP);
  Assert.assertFalse(dataLatch.await(1,TimeUnit.SECONDS));
  callbackRef.get().succeeded();
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
}

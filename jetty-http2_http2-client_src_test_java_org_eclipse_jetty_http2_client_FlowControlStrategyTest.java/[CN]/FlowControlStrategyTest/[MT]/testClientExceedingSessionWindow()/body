{
  start(new ServerSessionListener.Adapter());
  final CountDownLatch closeLatch=new CountDownLatch(1);
  Session session=newClient(new Session.Listener.Adapter(){
    @Override public void onClose(    Session session,    GoAwayFrame frame){
      if (frame.getError() == ErrorCode.FLOW_CONTROL_ERROR.code)       closeLatch.countDown();
    }
  }
);
  MetaData.Request metaData=newRequest("POST",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(metaData,null,false);
  FuturePromise<Stream> streamPromise=new FuturePromise<>();
  session.newStream(requestFrame,streamPromise,new Stream.Listener.Adapter());
  Stream stream=streamPromise.get(5,TimeUnit.SECONDS);
  ByteBuffer data=ByteBuffer.allocate(FlowControlStrategy.DEFAULT_WINDOW_SIZE);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  stream.data(new DataFrame(stream.getId(),data,false),new Callback.NonBlocking(){
    @Override public void succeeded(){
      dataLatch.countDown();
    }
  }
);
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
  Thread.sleep(1000);
  HTTP2Session http2Session=(HTTP2Session)session;
  ByteBufferPool.Lease lease=new ByteBufferPool.Lease(connector.getByteBufferPool());
  ByteBuffer extraData=ByteBuffer.allocate(1024);
  http2Session.getGenerator().data(lease,new DataFrame(stream.getId(),extraData,true),extraData.remaining());
  List<ByteBuffer> buffers=lease.getByteBuffers();
  http2Session.getEndPoint().write(Callback.NOOP,buffers.toArray(new ByteBuffer[buffers.size()]));
  Assert.assertTrue(closeLatch.await(5,TimeUnit.SECONDS));
}

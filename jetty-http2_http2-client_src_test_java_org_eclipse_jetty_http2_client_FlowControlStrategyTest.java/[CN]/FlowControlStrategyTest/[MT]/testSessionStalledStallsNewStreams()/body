{
  final int windowSize=1024;
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame requestFrame){
      MetaData.Request request=(MetaData.Request)requestFrame.getMetaData();
      if ("POST".equalsIgnoreCase(request.getMethod())) {
        ByteBuffer data=ByteBuffer.allocate(FlowControlStrategy.DEFAULT_WINDOW_SIZE - windowSize);
        DataFrame dataFrame=new DataFrame(stream.getId(),data,true);
        stream.data(dataFrame,Callback.NOOP);
        return null;
      }
 else {
        MetaData.Response metaData=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
        HeadersFrame responseFrame=new HeadersFrame(stream.getId(),metaData,null,false);
        stream.headers(responseFrame,Callback.NOOP);
        DataFrame dataFrame=new DataFrame(stream.getId(),ByteBuffer.allocate(windowSize / 2),true);
        stream.data(dataFrame,Callback.NOOP);
        return null;
      }
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter());
  final List<Callback> callbacks1=new ArrayList<>();
  final CountDownLatch prepareLatch=new CountDownLatch(1);
  MetaData.Request request1=newRequest("POST",new HttpFields());
  session.newStream(new HeadersFrame(request1,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callbacks1.add(callback);
      if (frame.isEndStream())       prepareLatch.countDown();
    }
  }
);
  Assert.assertTrue(prepareLatch.await(5,TimeUnit.SECONDS));
  MetaData.Request request2=newRequest("GET",new HttpFields());
  session.newStream(new HeadersFrame(request2,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
    }
  }
);
  MetaData.Request request3=newRequest("GET",new HttpFields());
  session.newStream(new HeadersFrame(request3,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  MetaData.Request request4=newRequest("GET",new HttpFields());
  session.newStream(new HeadersFrame(request4,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream())       latch.countDown();
    }
  }
);
  Assert.assertFalse(latch.await(1,TimeUnit.SECONDS));
  for (  Callback callback : callbacks1)   callback.succeeded();
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

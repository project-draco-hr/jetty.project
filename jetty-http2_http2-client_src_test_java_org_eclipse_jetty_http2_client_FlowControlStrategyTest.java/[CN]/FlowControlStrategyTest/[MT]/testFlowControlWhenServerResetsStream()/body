{
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      MetaData.Request request=(MetaData.Request)frame.getMetaData();
      if (HttpMethod.GET.is(request.getMethod()))       return new Stream.Listener.Adapter();
      return new Stream.Listener.Adapter(){
        @Override public void onData(        Stream stream,        DataFrame frame,        Callback callback){
          callback.failed(new Throwable());
          stream.reset(new ResetFrame(stream.getId(),ErrorCode.CANCEL_STREAM_ERROR.code),Callback.Adapter.INSTANCE);
        }
      }
;
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter());
  MetaData.Request metaData=newRequest("POST",new HttpFields());
  HeadersFrame frame=new HeadersFrame(0,metaData,null,false);
  FuturePromise<Stream> streamPromise=new FuturePromise<>();
  final CountDownLatch resetLatch=new CountDownLatch(1);
  session.newStream(frame,streamPromise,new Stream.Listener.Adapter(){
    @Override public void onReset(    Stream stream,    ResetFrame frame){
      resetLatch.countDown();
    }
  }
);
  Stream stream=streamPromise.get(5,TimeUnit.SECONDS);
  ByteBuffer data=ByteBuffer.allocate(5 * FlowControlStrategy.DEFAULT_WINDOW_SIZE);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  stream.data(new DataFrame(stream.getId(),data,true),new Callback.Adapter(){
    @Override public void failed(    Throwable x){
      dataLatch.countDown();
    }
  }
);
  Assert.assertTrue(resetLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
}

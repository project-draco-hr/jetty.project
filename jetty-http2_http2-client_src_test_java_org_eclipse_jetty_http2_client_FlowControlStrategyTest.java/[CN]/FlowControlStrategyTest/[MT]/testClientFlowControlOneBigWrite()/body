{
  final int windowSize=1536;
  final Exchanger<Callback> exchanger=new Exchanger<>();
  final CountDownLatch settingsLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  start(new ServerSessionListener.Adapter(){
    @Override public Map<Integer,Integer> onPreface(    Session session){
      Map<Integer,Integer> settings=new HashMap<>();
      settings.put(SettingsFrame.INITIAL_WINDOW_SIZE,windowSize);
      return settings;
    }
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame requestFrame){
      MetaData.Response metaData=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),metaData,null,false);
      stream.headers(responseFrame,Callback.Adapter.INSTANCE);
      return new Stream.Listener.Adapter(){
        private AtomicInteger dataFrames=new AtomicInteger();
        @Override public void onData(        Stream stream,        DataFrame frame,        Callback callback){
          try {
            int dataFrames=this.dataFrames.incrementAndGet();
            if (dataFrames == 1 || dataFrames == 2) {
              exchanger.exchange(callback);
            }
 else             if (dataFrames == 3 || dataFrames == 4 || dataFrames == 5) {
              callback.succeeded();
              if (frame.isEndStream())               dataLatch.countDown();
            }
 else {
              Assert.fail();
            }
          }
 catch (          InterruptedException x) {
            callback.failed(x);
          }
        }
      }
;
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter(){
    @Override public void onSettings(    Session session,    SettingsFrame frame){
      settingsLatch.countDown();
    }
  }
);
  Assert.assertTrue(settingsLatch.await(5,TimeUnit.SECONDS));
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(0,metaData,null,false);
  FuturePromise<Stream> streamPromise=new FuturePromise<>();
  session.newStream(requestFrame,streamPromise,null);
  Stream stream=streamPromise.get(5,TimeUnit.SECONDS);
  final int length=5 * windowSize;
  DataFrame dataFrame=new DataFrame(stream.getId(),ByteBuffer.allocate(length),true);
  stream.data(dataFrame,Callback.Adapter.INSTANCE);
  Callback callback=exchanger.exchange(null,5,TimeUnit.SECONDS);
  checkThatWeAreFlowControlStalled(exchanger);
  callback.succeeded();
  callback=exchanger.exchange(null,5,TimeUnit.SECONDS);
  checkThatWeAreFlowControlStalled(exchanger);
  callback.succeeded();
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
}

{
  return new Iterator<ByteBuffer>(){
    private final ByteBuffer buffer=ByteBuffer.allocateDirect(bufferSize);
    private SeekableByteChannel channel;
    private long position;
    @Override public boolean hasNext(){
      return position < getLength();
    }
    @Override public ByteBuffer next(){
      try {
        if (channel == null) {
          channel=Files.newByteChannel(filePath,StandardOpenOption.READ);
          LOG.debug("Opened file {}",filePath);
        }
        buffer.clear();
        int read=channel.read(buffer);
        if (read < 0)         throw new NoSuchElementException();
        if (LOG.isDebugEnabled())         LOG.debug("Read {} bytes from {}",read,filePath);
        position+=read;
        if (!hasNext())         close();
        buffer.flip();
        return buffer;
      }
 catch (      NoSuchElementException x) {
        close();
        throw x;
      }
catch (      Exception x) {
        close();
        throw (NoSuchElementException)new NoSuchElementException().initCause(x);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    private void close(){
      try {
        if (channel != null)         channel.close();
      }
 catch (      Exception x) {
        LOG.ignore(x);
      }
    }
  }
;
}

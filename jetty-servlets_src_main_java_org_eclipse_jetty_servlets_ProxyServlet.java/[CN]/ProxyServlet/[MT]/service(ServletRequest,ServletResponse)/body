{
  final HttpServletRequest request=(HttpServletRequest)req;
  final HttpServletResponse response=(HttpServletResponse)res;
  if ("CONNECT".equalsIgnoreCase(request.getMethod())) {
    handleConnect(request,response);
  }
 else {
    final InputStream in=request.getInputStream();
    final OutputStream out=response.getOutputStream();
    final Continuation continuation=ContinuationSupport.getContinuation(request,response);
    if (!continuation.isInitial())     response.sendError(HttpServletResponse.SC_GATEWAY_TIMEOUT);
 else {
      String uri=request.getRequestURI();
      if (request.getQueryString() != null)       uri+="?" + request.getQueryString();
      HttpURI url=proxyHttpURI(request.getScheme(),request.getServerName(),request.getServerPort(),uri);
      if (url == null) {
        response.sendError(HttpServletResponse.SC_FORBIDDEN);
        return;
      }
      HttpExchange exchange=new HttpExchange(){
        protected void onRequestCommitted() throws IOException {
        }
        protected void onRequestComplete() throws IOException {
        }
        protected void onResponseComplete() throws IOException {
          continuation.complete();
        }
        protected void onResponseContent(        Buffer content) throws IOException {
          content.writeTo(out);
        }
        protected void onResponseHeaderComplete() throws IOException {
        }
        protected void onResponseStatus(        Buffer version,        int status,        Buffer reason) throws IOException {
          if (reason != null && reason.length() > 0)           response.setStatus(status,reason.toString());
 else           response.setStatus(status);
        }
        protected void onResponseHeader(        Buffer name,        Buffer value) throws IOException {
          String s=name.toString().toLowerCase();
          if (!_DontProxyHeaders.contains(s))           response.addHeader(name.toString(),value.toString());
        }
        protected void onConnectionFailed(        Throwable ex){
          onException(ex);
        }
        protected void onException(        Throwable ex){
          if (ex instanceof EofException) {
            Log.ignore(ex);
            return;
          }
          Log.warn(ex.toString());
          Log.debug(ex);
          if (!response.isCommitted())           response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
          continuation.complete();
        }
        protected void onExpire(){
          if (!response.isCommitted())           response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
          continuation.complete();
        }
      }
;
      exchange.setScheme(HttpSchemes.HTTPS.equals(request.getScheme()) ? HttpSchemes.HTTPS_BUFFER : HttpSchemes.HTTP_BUFFER);
      exchange.setMethod(request.getMethod());
      exchange.setURL(url.toString());
      exchange.setVersion(request.getProtocol());
      if (Log.isDebugEnabled())       Log.debug("PROXY TO " + url);
      String connectionHdr=request.getHeader("Connection");
      if (connectionHdr != null) {
        connectionHdr=connectionHdr.toLowerCase();
        if (connectionHdr.indexOf("keep-alive") < 0 && connectionHdr.indexOf("close") < 0)         connectionHdr=null;
      }
      boolean xForwardedFor=false;
      boolean hasContent=false;
      long contentLength=-1;
      Enumeration<?> enm=request.getHeaderNames();
      while (enm.hasMoreElements()) {
        String hdr=(String)enm.nextElement();
        String lhdr=hdr.toLowerCase();
        if (_DontProxyHeaders.contains(lhdr))         continue;
        if (connectionHdr != null && connectionHdr.indexOf(lhdr) >= 0)         continue;
        if ("content-type".equals(lhdr))         hasContent=true;
        if ("content-length".equals(lhdr)) {
          contentLength=request.getContentLength();
          exchange.setRequestHeader(HttpHeaders.CONTENT_LENGTH,TypeUtil.toString(contentLength));
          if (contentLength > 0)           hasContent=true;
        }
        Enumeration<?> vals=request.getHeaders(hdr);
        while (vals.hasMoreElements()) {
          String val=(String)vals.nextElement();
          if (val != null) {
            exchange.setRequestHeader(lhdr,val);
            xForwardedFor|="X-Forwarded-For".equalsIgnoreCase(hdr);
          }
        }
      }
      exchange.setRequestHeader("Via","1.1 (jetty)");
      if (!xForwardedFor)       exchange.addRequestHeader("X-Forwarded-For",request.getRemoteAddr());
      if (hasContent)       exchange.setRequestContentSource(in);
      continuation.suspend();
      continuation.keepWrappers();
      _client.send(exchange);
    }
  }
}

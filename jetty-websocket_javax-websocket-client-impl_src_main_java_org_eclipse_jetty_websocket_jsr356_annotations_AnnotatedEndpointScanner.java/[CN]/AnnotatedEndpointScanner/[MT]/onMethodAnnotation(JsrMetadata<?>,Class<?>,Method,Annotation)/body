{
  LOG.debug("onMethodAnnotation({}, {}, {}, {})",metadata,pojo,method,annotation);
  if (isAnnotation(annotation,OnOpen.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertNotDuplicate(metadata.onOpen,OnOpen.class,pojo,method);
    OnOpenCallable onopen=new OnOpenCallable(pojo,method);
    visitMethod(onopen,pojo,method,paramsOnOpen,OnOpen.class);
    metadata.onOpen=onopen;
    return;
  }
  if (isAnnotation(annotation,OnClose.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertNotDuplicate(metadata.onClose,OnClose.class,pojo,method);
    OnCloseCallable onclose=new OnCloseCallable(pojo,method);
    visitMethod(onclose,pojo,method,paramsOnClose,OnClose.class);
    metadata.onClose=onclose;
    return;
  }
  if (isAnnotation(annotation,OnError.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertNotDuplicate(metadata.onError,OnError.class,pojo,method);
    OnErrorCallable onerror=new OnErrorCallable(pojo,method);
    visitMethod(onerror,pojo,method,paramsOnError,OnError.class);
    metadata.onError=onerror;
    return;
  }
  if (isAnnotation(annotation,OnMessage.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
  }
}

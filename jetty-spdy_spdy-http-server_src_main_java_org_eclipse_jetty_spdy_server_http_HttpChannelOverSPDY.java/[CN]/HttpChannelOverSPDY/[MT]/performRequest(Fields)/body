{
  short version=stream.getSession().getVersion();
  Fields.Field methodHeader=headers.get(HTTPSPDYHeader.METHOD.name(version));
  Fields.Field uriHeader=headers.get(HTTPSPDYHeader.URI.name(version));
  Fields.Field versionHeader=headers.get(HTTPSPDYHeader.VERSION.name(version));
  if (methodHeader == null || uriHeader == null || versionHeader == null) {
    onBadMessage(400,"Missing required request line elements");
    return false;
  }
  HttpMethod httpMethod=HttpMethod.fromString(methodHeader.getValue());
  HttpVersion httpVersion=HttpVersion.fromString(versionHeader.getValue());
  HttpURI uri=new HttpURI(uriHeader.getValue());
  LOG.debug("HTTP > {} {} {}",httpMethod,uriHeader.getValue(),httpVersion);
  Fields.Field schemeHeader=headers.get(HTTPSPDYHeader.SCHEME.name(version));
  if (schemeHeader != null)   getRequest().setScheme(schemeHeader.getValue());
  HostPortHttpField hostPort=null;
  HttpFields fields=new HttpFields();
  for (  Fields.Field header : headers) {
    String name=header.getName();
    HTTPSPDYHeader specialHeader=HTTPSPDYHeader.from(stream.getSession().getVersion(),name);
    if (specialHeader != null) {
      if (specialHeader != HTTPSPDYHeader.HOST)       continue;
      name="host";
      hostPort=new HostPortHttpField(header.getValue());
    }
switch (name) {
case "connection":
case "keep-alive":
case "proxy-connection":
case "transfer-encoding":
{
        break;
      }
case "host":
{
      break;
    }
default :
{
    String value=header.getValue();
    LOG.debug("HTTP > {}: {}",name,value);
    fields.add(new HttpField(name,value));
    break;
  }
}
}
if (hostPort == null) {
onBadMessage(400,"Missing Host header");
return false;
}
fields.add(hostPort);
MetaData.Request request=new MetaData.Request(httpVersion,httpMethod.asString(),uri,fields,hostPort);
onRequest(request);
return true;
}

{
  _in.setReadListener(_listener);
  assertThat(_history.poll(),equalTo("onReadPossible"));
  assertThat(_history.poll(),nullValue());
  _in.run();
  assertThat(_history.poll(),equalTo("onDataAvailable"));
  assertThat(_history.poll(),nullValue());
  assertThat(_in.isReady(),equalTo(false));
  assertThat(_history.poll(),equalTo("produceContent 0"));
  assertThat(_history.poll(),equalTo("unready"));
  assertThat(_history.poll(),nullValue());
  _in.failed(new TimeoutException());
  assertThat(_history.poll(),equalTo("onReadPossible"));
  assertThat(_history.poll(),nullValue());
  _in.run();
  assertThat(_in.isFinished(),equalTo(true));
  assertThat(_history.poll(),equalTo("onError:java.util.concurrent.TimeoutException"));
  assertThat(_history.poll(),nullValue());
  assertThat(_in.isReady(),equalTo(true));
  try {
    _in.read();
    fail();
  }
 catch (  IOException e) {
    assertThat(e.getCause(),Matchers.instanceOf(TimeoutException.class));
    assertThat(_in.isFinished(),equalTo(true));
  }
  assertThat(_history.poll(),nullValue());
}

{
  _in.setReadListener(_listener);
  Assert.assertThat(_history.poll(),Matchers.equalTo("produceContent 0"));
  Assert.assertThat(_history.poll(),Matchers.equalTo("unready"));
  Assert.assertThat(_history.poll(),Matchers.nullValue());
  _in.run();
  Assert.assertThat(_history.poll(),Matchers.equalTo("onDataAvailable"));
  Assert.assertThat(_history.poll(),Matchers.nullValue());
  Assert.assertThat(_in.isReady(),Matchers.equalTo(false));
  Assert.assertThat(_history.poll(),Matchers.equalTo("produceContent 0"));
  Assert.assertThat(_history.poll(),Matchers.equalTo("unready"));
  Assert.assertThat(_history.poll(),Matchers.nullValue());
  _in.failed(new TimeoutException());
  Assert.assertThat(_history.poll(),Matchers.equalTo("onReadPossible"));
  Assert.assertThat(_history.poll(),Matchers.nullValue());
  _in.run();
  Assert.assertThat(_in.isFinished(),Matchers.equalTo(true));
  Assert.assertThat(_history.poll(),Matchers.equalTo("onError:java.util.concurrent.TimeoutException"));
  Assert.assertThat(_history.poll(),Matchers.nullValue());
  Assert.assertThat(_in.isReady(),Matchers.equalTo(true));
  try {
    _in.read();
    Assert.fail();
  }
 catch (  IOException e) {
    Assert.assertThat(e.getCause(),Matchers.instanceOf(TimeoutException.class));
    Assert.assertThat(_in.isFinished(),Matchers.equalTo(true));
  }
  Assert.assertThat(_history.poll(),Matchers.nullValue());
}

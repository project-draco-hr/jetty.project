{
  _in.setReadListener(_listener);
  assertThat(_history.poll(),equalTo("onReadPossible"));
  assertThat(_history.poll(),nullValue());
  _in.run();
  assertThat(_history.poll(),equalTo("produceContent 0"));
  assertThat(_history.poll(),equalTo("unready"));
  assertThat(_history.poll(),nullValue());
  _in.content(new TContent("AB"));
  _content.add("_EOF_");
  assertThat(_history.poll(),equalTo("onReadPossible"));
  assertThat(_history.poll(),nullValue());
  _in.run();
  assertThat(_history.poll(),equalTo("onDataAvailable"));
  assertThat(_history.poll(),nullValue());
  assertThat(_in.isReady(),equalTo(true));
  assertThat(_in.read(),equalTo((int)'A'));
  assertThat(_in.isReady(),equalTo(true));
  assertThat(_in.read(),equalTo((int)'B'));
  assertThat(_history.poll(),equalTo("Content succeeded AB"));
  assertThat(_history.poll(),nullValue());
  assertThat(_in.isReady(),equalTo(true));
  assertThat(_history.poll(),equalTo("produceContent 1"));
  assertThat(_history.poll(),equalTo("onReadPossible"));
  assertThat(_history.poll(),nullValue());
  _in.run();
  assertThat(_history.poll(),nullValue());
  assertThat(_in.isReady(),equalTo(true));
  assertThat(_in.read(),equalTo(-1));
  assertThat(_in.isFinished(),equalTo(true));
  assertThat(_history.poll(),nullValue());
}

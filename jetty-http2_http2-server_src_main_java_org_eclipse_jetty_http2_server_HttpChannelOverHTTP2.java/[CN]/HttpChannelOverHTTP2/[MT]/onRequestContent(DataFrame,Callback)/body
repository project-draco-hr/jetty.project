{
  Stream stream=getStream();
  if (stream.isReset()) {
    consumeInput();
    callback.succeeded();
    return null;
  }
  final ByteBufferPool byteBufferPool=getByteBufferPool();
  ByteBuffer original=frame.getData();
  int length=original.remaining();
  final ByteBuffer copy=byteBufferPool.acquire(length,original.isDirect());
  BufferUtil.clearToFill(copy);
  copy.put(original);
  BufferUtil.flipToFlush(copy,0);
  boolean handle=onContent(new HttpInput.Content(copy){
    @Override public boolean isNonBlocking(){
      return callback.isNonBlocking();
    }
    @Override public void succeeded(){
      byteBufferPool.release(copy);
      callback.succeeded();
    }
    @Override public void failed(    Throwable x){
      byteBufferPool.release(copy);
      callback.failed(x);
    }
  }
);
  boolean endStream=frame.isEndStream();
  if (endStream)   handle|=onRequestComplete();
  if (LOG.isDebugEnabled()) {
    LOG.debug("HTTP2 Request #{}/{}: {} bytes of {} content, handle: {}",stream.getId(),Integer.toHexString(stream.getSession().hashCode()),length,endStream ? "last" : "some",handle);
  }
  boolean delayed=_delayedUntilContent;
  _delayedUntilContent=false;
  if (delayed)   _handled=true;
  return handle || delayed ? this : null;
}

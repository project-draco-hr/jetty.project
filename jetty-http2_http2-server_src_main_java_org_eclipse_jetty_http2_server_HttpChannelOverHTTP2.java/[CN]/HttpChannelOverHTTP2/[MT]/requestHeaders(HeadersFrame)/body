{
  MetaData metaData=frame.getMetaData();
  if (!metaData.isRequest()) {
    badMessage(400,null);
    return;
  }
  MetaData.Request requestMetaData=(MetaData.Request)metaData;
  String method=requestMetaData.getMethod();
  HttpURI uri=new HttpURI(requestMetaData.getPath());
  HttpVersion version=HttpVersion.HTTP_2_0;
  startRequest(method,uri,version);
  HttpScheme scheme=requestMetaData.getScheme();
  if (scheme != null) {
    getRequest().setScheme(scheme.asString());
  }
  parsedHostHeader(requestMetaData.getHost(),requestMetaData.getPort());
  boolean hasAcceptEncodingGzip=false;
  HttpFields fields=requestMetaData.getFields();
  for (int i=0; i < fields.size(); ++i) {
    HttpField field=fields.getField(i);
    if (HttpHeader.ACCEPT_ENCODING.is(field.getName()))     hasAcceptEncodingGzip=field.getValue().contains("gzip");
    parsedHeader(field);
  }
  if (!hasAcceptEncodingGzip)   parsedHeader(new HttpField(HttpHeader.ACCEPT_ENCODING,"gzip"));
  headerComplete();
  if (frame.isEndStream()) {
    messageComplete();
  }
  if (LOG.isDebugEnabled()) {
    StringBuilder headers=new StringBuilder();
    for (    HttpField field : fields) {
      headers.append(field).append(System.lineSeparator());
    }
    LOG.debug("HTTP2 Request #{}:{}{} {} {}{}{}",stream.getId(),System.lineSeparator(),method,uri,version,System.lineSeparator(),headers);
  }
  execute(this);
}

{
  WebSocketClient client=new WebSocketClient();
  client.setBlockingConnect(true);
  client.setConnectTimeout(10000);
  client.setMaxIdleTime(500);
  client.start();
  ServerSocket server=new ServerSocket();
  server.bind(null);
  int port=server.getLocalPort();
  boolean bad=false;
  final AtomicBoolean open=new AtomicBoolean();
  final Exchanger<Integer> close=new Exchanger<Integer>();
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<WebSocket.Connection> connection=new AtomicReference<WebSocket.Connection>();
  final BlockingQueue<String> queue=new BlockingArrayQueue<String>();
  try {
    client.open(new URI("ws://127.0.0.1:" + port),new WebSocket.OnTextMessage(){
      public void onOpen(      Connection c){
        open.set(true);
        connection.set(c);
        latch.countDown();
      }
      public void onError(      String message,      Throwable ex){
        latch.countDown();
      }
      public void onClose(      int closeCode,      String message){
        try {
          close.exchange(closeCode);
        }
 catch (        InterruptedException ex) {
        }
        latch.countDown();
      }
      public void onMessage(      String data){
        queue.add(data);
      }
    }
);
  }
 catch (  IOException e) {
    bad=true;
  }
  Assert.assertFalse(bad);
  String key="not sent";
  Socket socket=server.accept();
  BufferedReader in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
  for (String line=in.readLine(); line != null; line=in.readLine()) {
    if (line.length() == 0)     break;
    if (line.startsWith("Sec-WebSocket-Key:"))     key=line.substring(18).trim();
  }
  socket.getOutputStream().write(("HTTP/1.1 101 Upgrade\r\n" + "Sec-WebSocket-Accept: " + WebSocketConnectionD10.hashKey(key) + "\r\n"+ "\r\n").getBytes());
  Assert.assertTrue(latch.await(10,TimeUnit.SECONDS));
  Assert.assertTrue(open.get());
  byte[] recv=new byte[1024];
  int len=-1;
  for (int i=0; i < 10; i++) {
    Thread.sleep(250);
    connection.get().sendMessage("Hello");
    len=socket.getInputStream().read(recv,0,recv.length);
    Assert.assertTrue(len > 0);
  }
  byte[] send=new byte[]{(byte)0x81,(byte)0x02,(byte)'H',(byte)'i'};
  for (int i=0; i < 10; i++) {
    Thread.sleep(250);
    socket.getOutputStream().write(send,0,send.length);
    socket.getOutputStream().flush();
    Assert.assertEquals("Hi",queue.poll(1,TimeUnit.SECONDS));
  }
  socket.getOutputStream().write(new byte[]{(byte)0x88,(byte)0x02,(byte)4,(byte)87},0,4);
  socket.getOutputStream().flush();
  Assert.assertEquals(new Integer(1111),close.exchange(null,1,TimeUnit.SECONDS));
}

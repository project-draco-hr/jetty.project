{
  ((StdErrLog)Log.getLog()).setSource(false);
  String jetty_root="../../..";
  QueuedThreadPool threadPool=new QueuedThreadPool();
  threadPool.setMaxThreads(100);
  Server server=new Server(threadPool);
  server.manage(threadPool);
  MBeanContainer mbContainer=new MBeanContainer(ManagementFactory.getPlatformMBeanServer());
  server.addBean(mbContainer);
  server.addBean(Log.getLog());
  HttpConfiguration config=new HttpConfiguration();
  config.setSecurePort(8443);
  config.addCustomizer(new ForwardedRequestCustomizer());
  config.addCustomizer(new SecureRequestCustomizer());
  config.setSendDateHeader(true);
  config.setSendServerVersion(true);
  HttpConnectionFactory http=new HttpConnectionFactory(config);
  ServerConnector httpConnector=new ServerConnector(server,http);
  httpConnector.setPort(8080);
  httpConnector.setIdleTimeout(30000);
  server.addConnector(httpConnector);
  SslContextFactory sslContextFactory=new SslContextFactory();
  sslContextFactory.setKeyStorePath(jetty_root + "/jetty-server/src/main/config/etc/keystore");
  sslContextFactory.setKeyStorePassword("OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4");
  sslContextFactory.setKeyManagerPassword("OBF:1u2u1wml1z7s1z7a1wnl1u2g");
  sslContextFactory.setTrustStorePath(jetty_root + "/jetty-server/src/main/config/etc/keystore");
  sslContextFactory.setTrustStorePassword("OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4");
  sslContextFactory.setExcludeCipherSuites("SSL_RSA_WITH_DES_CBC_SHA","SSL_DHE_RSA_WITH_DES_CBC_SHA","SSL_DHE_DSS_WITH_DES_CBC_SHA","SSL_RSA_EXPORT_WITH_RC4_40_MD5","SSL_RSA_EXPORT_WITH_DES40_CBC_SHA","SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA","SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA");
  SPDYServerConnectionFactory.checkNPNAvailable();
  PushStrategy push=new ReferrerPushStrategy();
  HTTPSPDYServerConnectionFactory spdy2=new HTTPSPDYServerConnectionFactory(2,config,push);
  spdy2.setInputBufferSize(8192);
  spdy2.setInitialWindowSize(32768);
  HTTPSPDYServerConnectionFactory spdy3=new HTTPSPDYServerConnectionFactory(3,config,push);
  spdy2.setInputBufferSize(8192);
  NPNServerConnectionFactory npn=new NPNServerConnectionFactory(spdy3.getProtocol(),spdy2.getProtocol(),http.getProtocol());
  npn.setDefaultProtocol(http.getProtocol());
  npn.setInputBufferSize(1024);
  SslConnectionFactory ssl=new SslConnectionFactory(sslContextFactory,npn.getProtocol());
  ServerConnector spdyConnector=new ServerConnector(server,ssl,npn,spdy3,spdy2,http);
  spdyConnector.setPort(8443);
  spdyConnector.setIdleTimeout(15000);
  server.addConnector(spdyConnector);
  HandlerCollection handlers=new HandlerCollection();
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  RequestLogHandler requestLogHandler=new RequestLogHandler();
  handlers.setHandlers(new Handler[]{contexts,new DefaultHandler(),requestLogHandler});
  RestartHandler restart=new RestartHandler();
  restart.setHandler(handlers);
  server.setHandler(restart);
  HashLoginService login=new HashLoginService();
  login.setName("Test Realm");
  login.setConfig(jetty_root + "/tests/test-webapps/test-jetty-webapp/src/main/config/demo/realm.properties");
  server.addBean(login);
  File log=File.createTempFile("jetty-yyyy_mm_dd","log");
  NCSARequestLog requestLog=new NCSARequestLog(log.toString());
  requestLog.setExtended(false);
  requestLogHandler.setRequestLog(requestLog);
  server.setStopAtShutdown(true);
  WebAppContext webapp=new WebAppContext();
  webapp.setParentLoaderPriority(true);
  webapp.setResourceBase("./src/main/webapp");
  webapp.setAttribute("testAttribute","testValue");
  File sessiondir=File.createTempFile("sessions",null);
  if (sessiondir.exists())   sessiondir.delete();
  sessiondir.mkdir();
  sessiondir.deleteOnExit();
  ((HashSessionManager)webapp.getSessionHandler().getSessionManager()).setStoreDirectory(sessiondir);
  ((HashSessionManager)webapp.getSessionHandler().getSessionManager()).setSavePeriod(10);
  contexts.addHandler(webapp);
  ContextHandler srcroot=new ContextHandler();
  srcroot.setResourceBase(".");
  srcroot.setHandler(new ResourceHandler());
  srcroot.setContextPath("/src");
  contexts.addHandler(srcroot);
  server.start();
  server.join();
}

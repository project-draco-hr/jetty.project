{
  InetSocketAddress proxyAddress=startProxy(startServer(new ServerSessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      Headers responseHeaders=new Headers();
      responseHeaders.put(HTTPSPDYHeader.VERSION.name(version()),"HTTP/1.1");
      responseHeaders.put(HTTPSPDYHeader.STATUS.name(version()),"200 OK");
      stream.reply(new ReplyInfo(responseHeaders,true));
      stream.getSession().goAway();
      return null;
    }
  }
));
  proxyConnector.setDefaultAsyncConnectionFactory(proxyConnector.getAsyncConnectionFactory("spdy/" + version()));
  final CountDownLatch goAwayLatch=new CountDownLatch(1);
  Session client=factory.newSPDYClient(version()).connect(proxyAddress,new SessionFrameListener.Adapter(){
    @Override public void onGoAway(    Session session,    GoAwayInfo goAwayInfo){
      goAwayLatch.countDown();
    }
  }
).get(5,TimeUnit.SECONDS);
  final CountDownLatch replyLatch=new CountDownLatch(1);
  Headers headers=new Headers();
  headers.put(HTTPSPDYHeader.SCHEME.name(version()),"http");
  headers.put(HTTPSPDYHeader.METHOD.name(version()),"GET");
  headers.put(HTTPSPDYHeader.URI.name(version()),"/");
  headers.put(HTTPSPDYHeader.VERSION.name(version()),"HTTP/1.1");
  headers.put(HTTPSPDYHeader.HOST.name(version()),"localhost:" + proxyAddress.getPort());
  client.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      replyLatch.countDown();
    }
  }
);
  Assert.assertTrue(replyLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(goAwayLatch.await(5,TimeUnit.SECONDS));
}

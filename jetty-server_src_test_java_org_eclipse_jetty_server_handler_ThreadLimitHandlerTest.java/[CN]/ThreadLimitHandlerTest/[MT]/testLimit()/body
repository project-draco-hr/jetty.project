{
  ThreadLimitHandler handler=new ThreadLimitHandler("Forwarded");
  handler.setThreadLimit(4);
  AtomicInteger count=new AtomicInteger(0);
  AtomicInteger total=new AtomicInteger(0);
  CountDownLatch latch=new CountDownLatch(1);
  handler.setHandler(new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      response.setStatus(HttpStatus.OK_200);
      if ("/other".equals(target))       return;
      try {
        count.incrementAndGet();
        total.incrementAndGet();
        latch.await();
      }
 catch (      InterruptedException e) {
        throw new ServletException(e);
      }
 finally {
        count.decrementAndGet();
      }
    }
  }
);
  _server.setHandler(handler);
  _server.start();
  Socket[] client=new Socket[10];
  for (int i=0; i < client.length; i++) {
    client[i]=new Socket("127.0.0.1",_connector.getLocalPort());
    client[i].getOutputStream().write(("GET /" + i + " HTTP/1.0\r\nForwarded: for=1.2.3.4\r\n\r\n").getBytes());
    client[i].getOutputStream().flush();
  }
  long wait=System.nanoTime() + TimeUnit.SECONDS.toNanos(10);
  while (count.get() < 4 && System.nanoTime() < wait)   Thread.sleep(1);
  assertThat(count.get(),is(4));
  assertThat(_local.getResponse("GET /other HTTP/1.0\r\nForwarded: for=6.6.6.6\r\n\r\n"),Matchers.containsString(" 200 OK"));
  latch.countDown();
  while (total.get() < 10 && System.nanoTime() < wait)   Thread.sleep(1);
  assertThat(count.get(),is(0));
  assertThat(total.get(),is(10));
}

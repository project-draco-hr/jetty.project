{
  String contextPath="";
  String servletMapping="/server";
  AbstractTestServer server1=createServer(0);
  server1.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
  server1.start();
  int port1=server1.getPort();
  System.err.println("Port1=" + port1);
  try {
    AbstractTestServer server2=createServer(0);
    server2.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
    server2.start();
    int port2=server2.getPort();
    System.err.println("port2=" + port2);
    try {
      HttpClient client=new HttpClient();
      QueuedThreadPool executor=new QueuedThreadPool();
      client.setExecutor(executor);
      client.start();
      try {
        String[] urls=new String[2];
        urls[0]="http://localhost:" + port1 + contextPath+ servletMapping;
        urls[1]="http://localhost:" + port2 + contextPath+ servletMapping;
        Future<ContentResponse> future=client.GET(urls[0] + "?action=init");
        ContentResponse response1=future.get();
        assertEquals(HttpServletResponse.SC_OK,response1.getStatus());
        String sessionCookie=response1.getHeaders().getStringField("Set-Cookie");
        assertTrue(sessionCookie != null);
        sessionCookie=sessionCookie.replaceFirst("(\\W)(P|p)ath=","$1\\$Path=");
        Request request2=client.newRequest(urls[1] + "?action=increment");
        request2.header("Cookie",sessionCookie);
        future=request2.send();
        ContentResponse response2=future.get();
        assertEquals(HttpServletResponse.SC_OK,response2.getStatus());
        Request request1=client.newRequest(urls[0] + "?action=invalidate");
        request1.header("Cookie",sessionCookie);
        future=request1.send();
        assertEquals(HttpServletResponse.SC_OK,response1.getStatus());
        pause();
        request2=client.newRequest(urls[1] + "?action=test");
        request2.header("Cookie",sessionCookie);
        future=request2.send();
        response2=future.get();
        assertEquals(HttpServletResponse.SC_OK,response2.getStatus());
      }
  finally {
        client.stop();
      }
    }
  finally {
      server2.stop();
    }
  }
  finally {
    server1.stop();
  }
}

{
  final Request request=exchange.getRequest();
  HttpURI uri=new HttpURI(request.getScheme(),request.getHost(),request.getPort(),request.getPath(),null,request.getQuery(),null);
  MetaData.Request metaData=new MetaData.Request(request.getMethod(),uri,HttpVersion.HTTP_2,request.getHeaders());
  HeadersFrame headersFrame=new HeadersFrame(metaData,null,!content.hasContent());
  HttpChannelOverHTTP2 channel=getHttpChannel();
  Promise<Stream> promise=new Promise<Stream>(){
    @Override public void succeeded(    Stream stream){
      getHttpChannel().setStream(stream);
      stream.setIdleTimeout(request.getIdleTimeout());
      if (content.hasContent() && !expects100Continue(request)) {
        boolean advanced=content.advance();
        boolean lastContent=content.isLast();
        if (advanced || lastContent) {
          DataFrame dataFrame=new DataFrame(stream.getId(),content.getByteBuffer(),lastContent);
          stream.data(dataFrame,callback);
          return;
        }
      }
      callback.succeeded();
    }
    @Override public void failed(    Throwable failure){
      callback.failed(failure);
    }
  }
;
  channel.getSession().newStream(headersFrame,promise,channel.getStreamListener());
}

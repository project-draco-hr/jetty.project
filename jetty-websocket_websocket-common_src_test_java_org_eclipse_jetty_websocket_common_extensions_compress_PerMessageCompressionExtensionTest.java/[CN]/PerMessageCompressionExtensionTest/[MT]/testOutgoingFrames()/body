{
  PerMessageCompressionExtension ext=new PerMessageCompressionExtension();
  ext.setBufferPool(new MappedByteBufferPool());
  ext.setPolicy(WebSocketPolicy.newServerPolicy());
  ExtensionConfig config=RequestedExtensionConfig.parse("permessage-compress");
  ext.setConfig(config);
  OutgoingFramesCapture capture=new OutgoingFramesCapture();
  FrameHandler outgoingHandler=ext.createOutgoingFrameHandler(capture);
  List<String> quote=new ArrayList<>();
  quote.add("No amount of experimentation can ever prove me right;");
  quote.add("a single experiment can prove me wrong.");
  quote.add("-- Albert Einstein");
  for (  String section : quote) {
    WebSocketFrame frame=WebSocketFrame.text(section);
    outgoingHandler.handleFrame(frame);
  }
  int len=quote.size();
  capture.assertFrameCount(len);
  capture.assertHasFrame(OpCode.TEXT,len);
  String prefix;
  LinkedList<WebSocketFrame> frames=capture.getFrames();
  for (int i=0; i < len; i++) {
    prefix="Frame[" + i + "]";
    WebSocketFrame actual=frames.get(i);
    Assert.assertThat(prefix + ".opcode",actual.getOpCode(),is(OpCode.TEXT));
    Assert.assertThat(prefix + ".fin",actual.isFin(),is(true));
    Assert.assertThat(prefix + ".rsv1",actual.isRsv1(),is(true));
    Assert.assertThat(prefix + ".rsv2",actual.isRsv2(),is(false));
    Assert.assertThat(prefix + ".rsv3",actual.isRsv3(),is(false));
    ByteBuffer expected=BufferUtil.toBuffer(quote.get(i),StringUtil.__UTF8_CHARSET);
    ByteBuffer compressed=actual.getPayload().slice();
  }
}

{
  server=new Server();
  ServerFCGIConnectionFactory fcgiConnectionFactory=new ServerFCGIConnectionFactory(new HttpConfiguration());
  serverBufferPool=new LeakTrackingByteBufferPool(new MappedByteBufferPool.Tagged());
  connector=new ServerConnector(server,null,null,serverBufferPool,1,Math.max(1,Runtime.getRuntime().availableProcessors() / 2),fcgiConnectionFactory);
  server.addConnector(connector);
  server.setHandler(handler);
  server.start();
  QueuedThreadPool executor=new QueuedThreadPool();
  executor.setName(executor.getName() + "-client");
  client=new HttpClient(new HttpClientTransportOverFCGI(1,false,""){
    @Override public HttpDestination newHttpDestination(    Origin origin){
      return new HttpDestinationOverFCGI(client,origin){
        @Override protected DuplexConnectionPool newConnectionPool(        HttpClient client){
          return new LeakTrackingConnectionPool(this,client.getMaxConnectionsPerDestination(),this){
            @Override protected void leaked(            LeakDetector.LeakInfo leakInfo){
              connectionLeaks.incrementAndGet();
            }
          }
;
        }
      }
;
    }
  }
,null);
  client.setExecutor(executor);
  clientBufferPool=new LeakTrackingByteBufferPool(new MappedByteBufferPool.Tagged());
  client.setByteBufferPool(clientBufferPool);
  client.start();
}

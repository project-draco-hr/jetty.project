{
  final CountDownLatch failedCalledLatch=new CountDownLatch(1);
  final CountDownLatch onIncompleteFlushedCalledLatch=new CountDownLatch(1);
  final CountDownLatch writeCalledLatch=new CountDownLatch(1);
  final CountDownLatch completeWrite=new CountDownLatch(1);
  final WriteFlusher writeFlusher=new WriteFlusher(new EndPointConcurrentAccessToIncompleteWriteAndOnFailMock(writeCalledLatch,failedCalledLatch)){
    @Override protected void onIncompleteFlush(){
      onIncompleteFlushedCalledLatch.countDown();
      try {
        failedCalledLatch.await(5,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      completeWrite();
      completeWrite.countDown();
    }
  }
;
  ExposingStateCallback callback=new ExposingStateCallback();
  executor.submit(new Writer(writeFlusher,callback));
  assertThat("Write has been called.",writeCalledLatch.await(5,TimeUnit.SECONDS),is(true));
  assertThat("onIncompleteFlushed has been called.",onIncompleteFlushedCalledLatch.await(5,TimeUnit.SECONDS),is(true));
  executor.submit(new FailedCaller(writeFlusher,failedCalledLatch));
  assertThat("Failed has been called.",failedCalledLatch.await(5,TimeUnit.SECONDS),is(true));
  assertThat("completeWrite done",completeWrite.await(5,TimeUnit.SECONDS),is(true));
  assertThat("callback failed has been called",callback.isFailed(),is(true));
  assertThat("callback complete has not been called",callback.isCompleted(),is(false));
}

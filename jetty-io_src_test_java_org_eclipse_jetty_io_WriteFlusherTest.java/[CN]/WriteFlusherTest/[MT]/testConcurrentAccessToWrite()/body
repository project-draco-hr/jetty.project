{
  final CountDownLatch flushCalledLatch=new CountDownLatch(1);
  final WriteFlusher writeFlusher=new WriteFlusher(_endPointMock){
    @Override protected void onIncompleteFlushed(){
    }
  }
;
  when(_endPointMock.flush(any(ByteBuffer[].class))).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      flushCalledLatch.countDown();
      Thread.sleep(5000);
      return Boolean.TRUE;
    }
  }
);
  executor.submit(new Writer(writeFlusher,new FutureCallback<String>()));
  assertThat("Flush has been called once",flushCalledLatch.await(5,TimeUnit.SECONDS),is(true));
  try {
    executor.submit(new Writer(writeFlusher,new FutureCallback())).get();
  }
 catch (  ExecutionException e) {
    throw e.getCause();
  }
}

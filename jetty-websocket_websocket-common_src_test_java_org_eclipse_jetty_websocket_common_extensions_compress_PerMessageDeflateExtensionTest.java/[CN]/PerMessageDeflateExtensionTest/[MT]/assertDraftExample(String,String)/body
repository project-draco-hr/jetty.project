{
  WebSocketPolicy policy=WebSocketPolicy.newServerPolicy();
  PerMessageDeflateExtension ext=new PerMessageDeflateExtension();
  ext.setBufferPool(new MappedByteBufferPool());
  ext.setPolicy(policy);
  ExtensionConfig config=ExtensionConfig.parse("permessage-deflate");
  ext.setConfig(config);
  IncomingFramesCapture capture=new IncomingFramesCapture();
  ext.setNextIncomingFrames(capture);
  String hex=hexStr.replaceAll("\\s*0x","");
  byte net[]=TypeUtil.fromHexString(hex);
  TextFrame frame=new TextFrame();
  frame.setRsv1(true);
  frame.setPayload(ByteBuffer.wrap(net));
  ext.incomingFrame(frame);
  capture.assertFrameCount(1);
  capture.assertHasFrame(OpCode.TEXT,1);
  WebSocketFrame actual=capture.getFrames().pop();
  String prefix="frame";
  Assert.assertThat(prefix + ".opcode",actual.getOpCode(),is(OpCode.TEXT));
  Assert.assertThat(prefix + ".fin",actual.isFin(),is(true));
  Assert.assertThat(prefix + ".rsv1",actual.isRsv1(),is(false));
  Assert.assertThat(prefix + ".rsv2",actual.isRsv2(),is(false));
  Assert.assertThat(prefix + ".rsv3",actual.isRsv3(),is(false));
  ByteBuffer expected=BufferUtil.toBuffer(expectedStr,StringUtil.__UTF8_CHARSET);
  Assert.assertThat(prefix + ".payloadLength",actual.getPayloadLength(),is(expected.remaining()));
  ByteBufferAssert.assertEquals(prefix + ".payload",expected,actual.getPayload().slice());
}

{
  if (LOG.isDebugEnabled()) {
    LOG.debug("{}.onFrame({})",websocket.getClass().getSimpleName(),frame);
  }
  if ((frame instanceof Frame) && (events.onFrame != null)) {
    events.onFrame.call(websocket,session,frame);
  }
  try {
switch (frame.getOpCode()) {
case OpCode.CLOSE:
{
        CloseInfo close=new CloseInfo(frame);
        if (events.onClose != null) {
          events.onClose.call(websocket,session,close.getStatusCode(),close.getReason());
        }
        throw new CloseException(close.getStatusCode(),close.getReason());
      }
case OpCode.PING:
{
      WebSocketFrame pong=new WebSocketFrame(OpCode.PONG);
      if (frame.getPayloadLength() > 0) {
        ByteBuffer pongBuf=ByteBuffer.allocate(frame.getPayloadLength());
        BufferUtil.clearToFill(pongBuf);
        BufferUtil.put(frame.getPayload(),pongBuf);
        BufferUtil.flipToFlush(pongBuf,0);
        pong.setPayload(pongBuf);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Pong with {}",BufferUtil.toDetailString(pongBuf));
        }
      }
      session.output("pong",new FutureCallback<String>(),pong);
      break;
    }
case OpCode.BINARY:
{
    if (events.onBinary == null) {
      return;
    }
    if (events.onBinary.isStreaming()) {
      boolean needsNotification=false;
      if (activeStream == null) {
        ByteBuffer buf=ByteBuffer.allocate(policy.getBufferSize());
        this.activeStream=new MessageInputStream(buf);
        needsNotification=true;
      }
      activeStream.appendBuffer(frame.getPayload());
      if (needsNotification) {
        events.onBinary.call(websocket,session,activeStream);
      }
      if (frame.isFin()) {
        activeStream.bufferComplete();
        activeStream=null;
      }
    }
 else {
      if (activeMessage == null) {
        activeMessage=bufferPool.acquire(policy.getBufferSize(),false);
        BufferUtil.clearToFill(activeMessage);
      }
      appendBuffer(activeMessage,frame.getPayload());
      if (frame.isFin()) {
        try {
          BufferUtil.flipToFlush(activeMessage,0);
          byte buf[]=BufferUtil.toArray(activeMessage);
          events.onBinary.call(websocket,session,buf,0,buf.length);
        }
  finally {
          bufferPool.release(activeMessage);
          activeMessage=null;
        }
      }
    }
    return;
  }
case OpCode.TEXT:
{
  if (events.onText == null) {
    return;
  }
  if (events.onText.isStreaming()) {
    boolean needsNotification=false;
    if (activeStream == null) {
      ByteBuffer buf=ByteBuffer.allocate(policy.getBufferSize());
      this.activeStream=new MessageReader(buf);
      needsNotification=true;
    }
    activeStream.appendBuffer(frame.getPayload());
    if (needsNotification) {
      events.onText.call(websocket,session,activeStream);
    }
    if (frame.isFin()) {
      activeStream.bufferComplete();
      activeStream=null;
    }
  }
 else {
    if (activeMessage == null) {
      activeMessage=bufferPool.acquire(policy.getBufferSize(),false);
      BufferUtil.clearToFill(activeMessage);
    }
    appendBuffer(activeMessage,frame.getPayload());
    if (frame.isFin()) {
      try {
        BufferUtil.flipToFlush(activeMessage,0);
        byte data[]=BufferUtil.toArray(activeMessage);
        Utf8StringBuilder utf=new Utf8StringBuilder();
        utf.append(data,0,data.length);
        events.onText.call(websocket,session,utf.toString());
      }
  finally {
        bufferPool.release(activeMessage);
        activeMessage=null;
      }
    }
  }
  return;
}
}
}
 catch (NotUtf8Exception e) {
terminateConnection(StatusCode.BAD_PAYLOAD,e.getMessage());
}
catch (CloseException e) {
terminateConnection(e.getStatusCode(),e.getMessage());
}
catch (Throwable t) {
unhandled(t);
}
}

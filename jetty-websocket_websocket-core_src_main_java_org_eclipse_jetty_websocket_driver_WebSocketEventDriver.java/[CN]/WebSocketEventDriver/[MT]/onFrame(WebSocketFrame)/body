{
  if (LOG.isDebugEnabled()) {
    LOG.debug("{}.onFrame({})",websocket.getClass().getSimpleName(),frame);
  }
  if ((frame instanceof Frame) && (events.onFrame != null)) {
    events.onFrame.call(websocket,connection,frame);
  }
  try {
switch (frame.getOpCode()) {
case CLOSE:
{
        if (events.onClose == null) {
          return;
        }
        CloseInfo close=new CloseInfo(frame);
        events.onClose.call(websocket,connection,close.getStatusCode(),close.getReason());
        return;
      }
case BINARY:
{
      if (events.onBinary == null) {
        return;
      }
      if (events.onBinary.isStreaming()) {
        boolean needsNotification=false;
        if (activeStream == null) {
          ByteBuffer buf=ByteBuffer.allocate(policy.getBufferSize());
          this.activeStream=new MessageInputStream(buf);
          needsNotification=true;
        }
        activeStream.appendBuffer(frame.getPayloadData());
        if (needsNotification) {
          events.onBinary.call(websocket,connection,activeStream);
        }
        if (frame.isFin()) {
          activeStream.bufferComplete();
          activeStream=null;
        }
      }
 else {
        if (activeMessage == null) {
          activeMessage=bufferPool.acquire(policy.getBufferSize(),false);
          BufferUtil.clearToFill(activeMessage);
        }
        appendBuffer(activeMessage,frame.getPayloadData());
        if (frame.isFin()) {
          try {
            BufferUtil.flipToFlush(activeMessage,0);
            byte buf[]=BufferUtil.toArray(activeMessage);
            events.onBinary.call(websocket,connection,buf,0,buf.length);
          }
  finally {
            bufferPool.release(activeMessage);
            activeMessage=null;
          }
        }
      }
      return;
    }
case TEXT:
{
    if (events.onText == null) {
      return;
    }
    if (events.onText.isStreaming()) {
      boolean needsNotification=false;
      if (activeStream == null) {
        ByteBuffer buf=ByteBuffer.allocate(policy.getBufferSize());
        this.activeStream=new MessageReader(buf);
        needsNotification=true;
      }
      activeStream.appendBuffer(frame.getPayloadData());
      if (needsNotification) {
        events.onText.call(websocket,connection,activeStream);
      }
      if (frame.isFin()) {
        activeStream.bufferComplete();
        activeStream=null;
      }
    }
 else {
      if (activeMessage == null) {
        activeMessage=bufferPool.acquire(policy.getBufferSize(),false);
        BufferUtil.clearToFill(activeMessage);
      }
      appendBuffer(activeMessage,frame.getPayloadData());
      if (frame.isFin()) {
        try {
          BufferUtil.flipToFlush(activeMessage,0);
          events.onText.call(websocket,connection,BufferUtil.toUTF8String(activeMessage));
        }
  finally {
          bufferPool.release(activeMessage);
          activeMessage=null;
        }
      }
    }
    return;
  }
}
}
 catch (Throwable t) {
unhandled(t);
}
}

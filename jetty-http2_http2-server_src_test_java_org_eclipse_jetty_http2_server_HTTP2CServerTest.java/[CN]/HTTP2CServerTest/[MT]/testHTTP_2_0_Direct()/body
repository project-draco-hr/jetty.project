{
  final CountDownLatch latch=new CountDownLatch(3);
  byteBufferPool=new MappedByteBufferPool();
  generator=new Generator(byteBufferPool);
  ByteBufferPool.Lease lease=new ByteBufferPool.Lease(byteBufferPool);
  generator.control(lease,new PrefaceFrame());
  generator.control(lease,new SettingsFrame(new HashMap<>(),false));
  MetaData.Request metaData=new MetaData.Request("GET",HttpScheme.HTTP,new HostPortHttpField("localhost:" + _port),"/test",HttpVersion.HTTP_2,new HttpFields());
  generator.control(lease,new HeadersFrame(1,metaData,null,true));
  try (Socket client=new Socket("localhost",_port)){
    OutputStream output=client.getOutputStream();
    for (    ByteBuffer buffer : lease.getByteBuffers()) {
      output.write(BufferUtil.toArray(buffer));
    }
    final AtomicReference<HeadersFrame> headersRef=new AtomicReference<>();
    final AtomicReference<DataFrame> dataRef=new AtomicReference<>();
    Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
      @Override public void onSettings(      SettingsFrame frame){
        latch.countDown();
      }
      @Override public void onHeaders(      HeadersFrame frame){
        headersRef.set(frame);
        latch.countDown();
      }
      @Override public void onData(      DataFrame frame){
        dataRef.set(frame);
        latch.countDown();
      }
    }
,4096,8192);
    parseResponse(client,parser);
    Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
    HeadersFrame response=headersRef.get();
    Assert.assertNotNull(response);
    MetaData.Response responseMetaData=(MetaData.Response)response.getMetaData();
    Assert.assertEquals(200,responseMetaData.getStatus());
    DataFrame responseData=dataRef.get();
    Assert.assertNotNull(responseData);
    String s=BufferUtil.toString(responseData.getData());
    assertThat(s,containsString("Hello from Jetty using HTTP/2.0"));
    assertThat(s,containsString("uri=/test"));
  }
 }

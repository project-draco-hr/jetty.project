{
  if (forkWebXml == null)   forkWebXml=new File(target,"fork-web.xml");
  try {
    printSystemProperties();
    applyJettyXml();
    server.configureHandlers();
    configureWebApplication();
    originalBaseResource=webApp.getBaseResource();
    webApp.setCopyWebDir(false);
    webApp.setCopyWebInf(false);
    webApp.setGenerateQuickStart(true);
    if (!forkWebXml.getParentFile().exists())     forkWebXml.getParentFile().mkdirs();
    if (!forkWebXml.exists())     forkWebXml.createNewFile();
    webApp.setQuickStartWebDescriptor(Resource.newResource(forkWebXml));
    server.addWebApplication(webApp);
    QueuedThreadPool tpool=server.getBean(QueuedThreadPool.class);
    if (tpool != null)     tpool.start();
 else     webApp.setAttribute(AnnotationConfiguration.MULTI_THREADED,Boolean.FALSE.toString());
    webApp.start();
    File props=prepareConfiguration();
    webApp.stop();
    if (tpool != null)     tpool.stop();
    List<String> cmd=new ArrayList<String>();
    cmd.add(getJavaBin());
    if (jvmArgs != null) {
      String[] args=jvmArgs.split(" ");
      for (int i=0; args != null && i < args.length; i++) {
        if (args[i] != null && !"".equals(args[i]))         cmd.add(args[i].trim());
      }
    }
    String classPath=getContainerClassPath();
    if (classPath != null && classPath.length() > 0) {
      cmd.add("-cp");
      cmd.add(classPath);
    }
    cmd.add(Starter.class.getCanonicalName());
    if (stopPort > 0 && stopKey != null) {
      cmd.add("--stop-port");
      cmd.add(Integer.toString(stopPort));
      cmd.add("--stop-key");
      cmd.add(stopKey);
    }
    if (jettyXml != null) {
      cmd.add("--jetty-xml");
      cmd.add(jettyXml);
    }
    if (contextXml != null) {
      cmd.add("--context-xml");
      cmd.add(contextXml);
    }
    cmd.add("--props");
    cmd.add(props.getAbsolutePath());
    String token=createToken();
    cmd.add("--token");
    cmd.add(token);
    ProcessBuilder builder=new ProcessBuilder(cmd);
    builder.directory(project.getBasedir());
    if (PluginLog.getLog().isDebugEnabled())     PluginLog.getLog().debug(Arrays.toString(cmd.toArray()));
    PluginLog.getLog().info("Forked process starting");
    if (waitForChild) {
      forkedProcess=builder.start();
      startPump("STDOUT",forkedProcess.getInputStream());
      startPump("STDERR",forkedProcess.getErrorStream());
      int exitcode=forkedProcess.waitFor();
      PluginLog.getLog().info("Forked execution exit: " + exitcode);
    }
 else {
      builder.redirectErrorStream(true);
      forkedProcess=builder.start();
      try {
        String line="";
        try (InputStream is=forkedProcess.getInputStream();LineNumberReader reader=new LineNumberReader(new InputStreamReader(is))){
          int attempts=maxStartupLines;
          while (attempts > 0 && line != null) {
            --attempts;
            line=reader.readLine();
            if (line != null && line.startsWith(token))             break;
          }
        }
         if (line != null && line.trim().equals(token))         PluginLog.getLog().info("Forked process started.");
 else {
          String err=(line == null ? "" : (line.startsWith(token) ? line.substring(token.length()) : line));
          PluginLog.getLog().info("Forked process startup errors" + (!"".equals(err) ? ", received: " + err : ""));
        }
      }
 catch (      Exception e) {
        throw new MojoExecutionException("Problem determining if forked process is ready: " + e.getMessage());
      }
    }
  }
 catch (  InterruptedException ex) {
    if (forkedProcess != null && waitForChild)     forkedProcess.destroy();
    throw new MojoExecutionException("Failed to start Jetty within time limit");
  }
catch (  Exception ex) {
    if (forkedProcess != null && waitForChild)     forkedProcess.destroy();
    throw new MojoExecutionException("Failed to create Jetty process",ex);
  }
}

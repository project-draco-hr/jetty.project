{
  try {
    File propsFile=new File(target,"fork.props");
    if (propsFile.exists())     propsFile.delete();
    propsFile.createNewFile();
    Properties props=new Properties();
    if (webApp.getDescriptor() != null) {
      props.put("web.xml",webApp.getDescriptor());
    }
    if (webApp.getQuickStartWebDescriptor() != null) {
      props.put("quickstart.web.xml",webApp.getQuickStartWebDescriptor().getFile().getAbsolutePath());
    }
    if (webApp.getContextPath() != null) {
      props.put("context.path",webApp.getContextPath());
    }
    props.put("tmp.dir",webApp.getTempDirectory().getAbsolutePath());
    props.put("tmp.dir.persist",Boolean.toString(webApp.isPersistTempDirectory()));
    if (originalBaseResource != null) {
      StringBuffer rb=new StringBuffer();
      if (originalBaseResource instanceof ResourceCollection) {
        ResourceCollection resources=((ResourceCollection)originalBaseResource);
        for (        Resource r : resources.getResources()) {
          if (rb.length() > 0)           rb.append(",");
          rb.append(r.toString());
        }
      }
 else       rb.append(originalBaseResource.toString());
      props.put("base.dirs",rb.toString());
    }
    props.put("base.first",Boolean.toString(webApp.getBaseAppFirst()));
    if (webApp.getClasses() != null) {
      props.put("classes.dir",webApp.getClasses().getAbsolutePath());
    }
    if (useTestScope && webApp.getTestClasses() != null) {
      props.put("testClasses.dir",webApp.getTestClasses().getAbsolutePath());
    }
    List<File> deps=webApp.getWebInfLib();
    StringBuffer strbuff=new StringBuffer();
    for (int i=0; i < deps.size(); i++) {
      File d=deps.get(i);
      strbuff.append(d.getAbsolutePath());
      if (i < deps.size() - 1)       strbuff.append(",");
    }
    props.put("lib.jars",strbuff.toString());
    List<Artifact> warArtifacts=getWarArtifacts();
    for (int i=0; i < warArtifacts.size(); i++) {
      strbuff.setLength(0);
      Artifact a=warArtifacts.get(i);
      strbuff.append(a.getGroupId() + ",");
      strbuff.append(a.getArtifactId() + ",");
      strbuff.append(a.getFile().getAbsolutePath());
      props.put("maven.war.artifact." + i,strbuff.toString());
    }
    WarPluginInfo warPlugin=new WarPluginInfo(project);
    props.put("maven.war.includes",toCSV(warPlugin.getDependentMavenWarIncludes()));
    props.put("maven.war.excludes",toCSV(warPlugin.getDependentMavenWarExcludes()));
    List<OverlayConfig> configs=warPlugin.getMavenWarOverlayConfigs();
    int i=0;
    for (    OverlayConfig c : configs) {
      props.put("maven.war.overlay." + (i++),c.toString());
    }
    try (OutputStream out=new BufferedOutputStream(new FileOutputStream(propsFile))){
      props.store(out,"properties for forked webapp");
    }
     return propsFile;
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Prepare webapp configuration",e);
  }
}

{
  Server server=new Server();
  WebAppContext wac=new WebAppContext();
  wac.setServer(server);
  InjectionCollection injections=new InjectionCollection();
  wac.setAttribute(InjectionCollection.INJECTION_COLLECTION,injections);
  InitialContext ic=new InitialContext();
  Context comp=(Context)ic.lookup("java:comp");
  Context env=comp.createSubcontext("env");
  org.eclipse.jetty.plus.jndi.EnvEntry resourceA=new org.eclipse.jetty.plus.jndi.EnvEntry(server,"resA",objA,false);
  org.eclipse.jetty.plus.jndi.EnvEntry resourceB=new org.eclipse.jetty.plus.jndi.EnvEntry(server,"resB",objB,false);
  AnnotationIntrospector parser=new AnnotationIntrospector();
  ResourceAnnotationHandler handler=new ResourceAnnotationHandler(wac);
  parser.registerHandler(handler);
  parser.introspect(ResourceA.class);
  parser.introspect(ResourceB.class);
  assertEquals(objB,env.lookup("myf"));
  assertEquals(objA,env.lookup("mye"));
  assertEquals(objA,env.lookup("resA"));
  assertEquals(objA,env.lookup("org.eclipse.jetty.annotations.resources.ResourceA/g"));
  assertEquals(objA,env.lookup("org.eclipse.jetty.annotations.resources.ResourceA/h"));
  assertEquals(objB,env.lookup("org.eclipse.jetty.annotations.resources.ResourceB/f"));
  assertEquals(objB,env.lookup("org.eclipse.jetty.annotations.resources.ResourceA/n"));
  assertNotNull(injections);
  List<Injection> resBInjections=injections.getInjections(ResourceB.class.getCanonicalName());
  assertNotNull(resBInjections);
  assertEquals(1,resBInjections.size());
  Injection fi=resBInjections.get(0);
  assertEquals("f",fi.getTarget().getName());
  List<Injection> resAInjections=injections.getInjections(ResourceA.class.getCanonicalName());
  assertNotNull(resAInjections);
  assertEquals(7,resAInjections.size());
  int fieldCount=0;
  int methodCount=0;
  for (  Injection x : resAInjections) {
    if (x.isField())     fieldCount++;
 else     methodCount++;
  }
  assertEquals(4,fieldCount);
  assertEquals(3,methodCount);
  ResourceB binst=new ResourceB();
  injections.inject(binst);
  Field f=ResourceB.class.getDeclaredField("f");
  f.setAccessible(true);
  assertEquals(objB,f.get(binst));
  f=ResourceA.class.getDeclaredField("g");
  f.setAccessible(true);
  assertEquals(objA,f.get(binst));
  f=ResourceA.class.getDeclaredField("j");
  f.setAccessible(true);
  assertEquals(objA,f.get(binst));
  f=ResourceA.class.getDeclaredField("n");
  f.setAccessible(true);
  assertEquals(objB,f.get(binst));
  comp.destroySubcontext("env");
}

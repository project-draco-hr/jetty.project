{
  final DispatchingIOFuture future=new DispatchingIOFuture();
  final CountDownLatch completed=new CountDownLatch(1);
  final AtomicReference<Throwable> failure=new AtomicReference<>();
  future.setCallback(new Callback<Object>(){
    @Override public void completed(    Object context){
      completed.countDown();
    }
    @Override public void failed(    Object context,    Throwable cause){
      failure.set(cause);
    }
  }
,null);
  long start=System.nanoTime();
  final long delay=500;
  new Thread(){
    @Override public void run(){
      try {
        TimeUnit.MILLISECONDS.sleep(delay);
        future.complete();
      }
 catch (      InterruptedException x) {
        Assert.fail();
      }
    }
  }
.start();
  assertTrue(future.block(delay * 4,TimeUnit.MILLISECONDS));
  long elapsed=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
  Assert.assertThat(elapsed,greaterThan(delay / 2));
  Assert.assertThat(elapsed,lessThan(delay * 2));
  assertTrue(future.isDone());
  assertTrue(future.isComplete());
  assertTrue(completed.await(delay * 4,TimeUnit.MILLISECONDS));
  assertNull(failure.get());
}

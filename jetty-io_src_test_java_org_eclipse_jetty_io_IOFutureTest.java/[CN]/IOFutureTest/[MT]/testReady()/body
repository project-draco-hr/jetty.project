{
  DispatchingIOFuture future=new DispatchingIOFuture();
  assertFalse(future.isDone());
  assertFalse(future.isComplete());
  final AtomicBoolean ready=new AtomicBoolean(false);
  final AtomicReference<Throwable> fail=new AtomicReference<>();
  future.setCallback(new Callback<Object>(){
    @Override public void completed(    Object context){
      ready.set(true);
    }
    @Override public void failed(    Object context,    Throwable cause){
      fail.set(cause);
    }
  }
,null);
  long start=System.currentTimeMillis();
  assertFalse(future.block(100,TimeUnit.MILLISECONDS));
  assertThat(System.currentTimeMillis() - start,greaterThan(10L));
  assertFalse(ready.get());
  assertNull(fail.get());
  start=System.currentTimeMillis();
  final DispatchingIOFuture f0=future;
  new Thread(){
    @Override public void run(){
      try {
        TimeUnit.MILLISECONDS.sleep(100);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      f0.complete();
    }
  }
.start();
  assertTrue(future.block(1000,TimeUnit.MILLISECONDS));
  Assert.assertThat(System.currentTimeMillis() - start,greaterThan(10L));
  Assert.assertThat(System.currentTimeMillis() - start,lessThan(1000L));
  assertTrue(future.isDone());
  assertTrue(future.isComplete());
  assertTrue(ready.get());
  assertNull(fail.get());
  ready.set(false);
  future=new DispatchingIOFuture();
  assertFalse(future.isDone());
  assertFalse(future.isComplete());
  start=System.currentTimeMillis();
  final DispatchingIOFuture f1=future;
  new Thread(){
    @Override public void run(){
      try {
        TimeUnit.MILLISECONDS.sleep(100);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      f1.complete();
    }
  }
.start();
  future.block();
  Assert.assertThat(System.currentTimeMillis() - start,greaterThan(10L));
  assertTrue(future.isDone());
  assertTrue(future.isComplete());
  assertFalse(ready.get());
  assertNull(fail.get());
}

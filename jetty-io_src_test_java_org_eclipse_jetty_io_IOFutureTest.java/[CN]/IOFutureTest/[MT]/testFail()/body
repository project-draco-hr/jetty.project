{
  DispatchedIOFuture future=new DispatchedIOFuture();
  final Exception ex=new Exception("failed");
  assertFalse(future.isComplete());
  assertFalse(future.isReady());
  final AtomicBoolean ready=new AtomicBoolean(false);
  final AtomicReference<Throwable> fail=new AtomicReference<>();
  future.setCallback(new Callback(){
    @Override public void onReady(){
      ready.set(true);
    }
    @Override public void onFail(    Throwable cause){
      fail.set(cause);
    }
  }
);
  long start=System.currentTimeMillis();
  assertFalse(future.block(10,TimeUnit.MILLISECONDS));
  assertThat(System.currentTimeMillis() - start,greaterThan(9L));
  assertFalse(ready.get());
  assertEquals((Throwable)null,fail.get());
  start=System.currentTimeMillis();
  final DispatchedIOFuture f0=future;
  new Thread(){
    @Override public void run(){
      try {
        TimeUnit.MILLISECONDS.sleep(50);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      f0.fail(ex);
    }
  }
.start();
  try {
    future.block(1000,TimeUnit.MILLISECONDS);
    Assert.fail();
  }
 catch (  ExecutionException e) {
    Assert.assertEquals(ex,e.getCause());
  }
  Assert.assertThat(System.currentTimeMillis() - start,greaterThan(49L));
  Assert.assertThat(System.currentTimeMillis() - start,lessThan(1000L));
  assertTrue(future.isComplete());
  try {
    future.isReady();
    Assert.fail();
  }
 catch (  ExecutionException e) {
    Assert.assertEquals(ex,e.getCause());
  }
  assertFalse(ready.get());
  assertEquals(ex,fail.get());
  future=new DispatchedIOFuture();
  ready.set(false);
  fail.set(null);
  assertFalse(future.isComplete());
  assertFalse(future.isReady());
  start=System.currentTimeMillis();
  final DispatchedIOFuture f1=future;
  new Thread(){
    @Override public void run(){
      try {
        TimeUnit.MILLISECONDS.sleep(50);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      f1.fail(ex);
    }
  }
.start();
  try {
    future.block();
    Assert.fail();
  }
 catch (  ExecutionException e) {
    Assert.assertEquals(ex,e.getCause());
  }
  Assert.assertThat(System.currentTimeMillis() - start,greaterThan(49L));
  assertTrue(future.isComplete());
  try {
    future.isReady();
    Assert.fail();
  }
 catch (  ExecutionException e) {
    Assert.assertEquals(ex,e.getCause());
  }
  assertFalse(ready.get());
  assertEquals((Throwable)null,fail.get());
}

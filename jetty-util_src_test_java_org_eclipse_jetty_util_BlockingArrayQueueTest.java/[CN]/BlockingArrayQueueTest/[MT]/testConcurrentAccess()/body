{
  final int THREADS=50;
  final int LOOPS=1000;
  final BlockingArrayQueue<Integer> queue=new BlockingArrayQueue<>(1 + THREADS * LOOPS);
  final ConcurrentLinkedQueue<Integer> produced=new ConcurrentLinkedQueue<>();
  final ConcurrentLinkedQueue<Integer> consumed=new ConcurrentLinkedQueue<>();
  final AtomicBoolean running=new AtomicBoolean(true);
  final CyclicBarrier barrier0=new CyclicBarrier(THREADS + 1);
  for (int i=0; i < THREADS; i++) {
    new Thread(){
      @Override public void run(){
        final Random random=new Random();
        setPriority(getPriority() - 1);
        try {
          while (running.get()) {
            int r=1 + random.nextInt(10);
            if (r % 2 == 0) {
              Integer msg=queue.poll();
              if (msg == null) {
                Thread.sleep(1 + random.nextInt(10));
                continue;
              }
              consumed.add(msg);
            }
 else {
              Integer msg=queue.poll(r,TimeUnit.MILLISECONDS);
              if (msg != null)               consumed.add(msg);
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          try {
            barrier0.await();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
.start();
  }
  final CyclicBarrier barrier1=new CyclicBarrier(THREADS + 1);
  for (int i=0; i < THREADS; i++) {
    final int id=i;
    new Thread(){
      @Override public void run(){
        final Random random=new Random();
        try {
          for (int j=0; j < LOOPS; j++) {
            Integer msg=random.nextInt();
            produced.add(msg);
            if (!queue.offer(msg))             throw new Exception(id + " FULL! " + queue.size());
            Thread.sleep(1 + random.nextInt(10));
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          try {
            barrier1.await();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
.start();
  }
  barrier1.await();
  int size=queue.size();
  int last=size - 1;
  while (size > 0 && size != last) {
    last=size;
    Thread.sleep(500);
    size=queue.size();
  }
  running.set(false);
  barrier0.await();
  HashSet<Integer> prodSet=new HashSet<>(produced);
  HashSet<Integer> consSet=new HashSet<>(consumed);
  Assert.assertEquals(prodSet,consSet);
}

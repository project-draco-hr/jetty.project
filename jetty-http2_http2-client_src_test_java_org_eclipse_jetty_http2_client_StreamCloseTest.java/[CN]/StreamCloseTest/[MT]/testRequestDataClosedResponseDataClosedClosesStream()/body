{
  final CountDownLatch serverDataLatch=new CountDownLatch(1);
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      MetaData.Response metaData=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
      HeadersFrame response=new HeadersFrame(stream.getId(),metaData,null,false);
      stream.headers(response,Callback.NOOP);
      return new Stream.Listener.Adapter(){
        @Override public void onData(        final Stream stream,        DataFrame frame,        final Callback callback){
          Assert.assertTrue(((HTTP2Stream)stream).isRemotelyClosed());
          ByteBuffer data=frame.getData();
          ByteBuffer copy=ByteBuffer.allocate(data.remaining());
          copy.put(data).flip();
          stream.data(new DataFrame(stream.getId(),copy,frame.isEndStream()),new Callback(){
            @Override public void succeeded(){
              Assert.assertTrue(stream.isClosed());
              Assert.assertEquals(0,stream.getSession().getStreams().size());
              callback.succeeded();
              serverDataLatch.countDown();
            }
          }
);
        }
      }
;
    }
  }
);
  final CountDownLatch completeLatch=new CountDownLatch(1);
  Session session=newClient(new Session.Listener.Adapter());
  HeadersFrame frame=new HeadersFrame(newRequest("GET",new HttpFields()),null,false);
  FuturePromise<Stream> promise=new FuturePromise<>();
  session.newStream(frame,promise,new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      completeLatch.countDown();
    }
  }
);
  final Stream stream=promise.get(5,TimeUnit.SECONDS);
  Assert.assertFalse(stream.isClosed());
  Assert.assertFalse(((HTTP2Stream)stream).isLocallyClosed());
  final CountDownLatch clientDataLatch=new CountDownLatch(1);
  stream.data(new DataFrame(stream.getId(),ByteBuffer.wrap(new byte[512]),true),new Callback(){
    @Override public void succeeded(){
      clientDataLatch.countDown();
    }
  }
);
  Assert.assertTrue(clientDataLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(serverDataLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(completeLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(stream.isClosed());
  Assert.assertEquals(0,stream.getSession().getStreams().size());
}

{
  final CountDownLatch serverLatch=new CountDownLatch(1);
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      PushPromiseFrame pushFrame=new PushPromiseFrame(stream.getId(),0,newRequest("GET",new HttpFields()));
      stream.push(pushFrame,new Promise.Adapter<Stream>(){
        @Override public void succeeded(        final Stream pushedStream){
          Assert.assertTrue(((HTTP2Stream)pushedStream).isRemotelyClosed());
          pushedStream.data(new DataFrame(pushedStream.getId(),ByteBuffer.allocate(16),true),new Callback.Adapter(){
            @Override public void succeeded(){
              Assert.assertTrue(pushedStream.isClosed());
              serverLatch.countDown();
            }
          }
);
        }
      }
,new Stream.Listener.Adapter());
      HeadersFrame response=new HeadersFrame(stream.getId(),new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields()),null,true);
      stream.headers(response,Callback.Adapter.INSTANCE);
      return null;
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter());
  HeadersFrame frame=new HeadersFrame(0,newRequest("GET",new HttpFields()),null,true);
  final CountDownLatch clientLatch=new CountDownLatch(1);
  session.newStream(frame,new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public Stream.Listener onPush(    Stream pushedStream,    PushPromiseFrame frame){
      Assert.assertTrue(((HTTP2Stream)pushedStream).isLocallyClosed());
      return new Adapter(){
        @Override public void onData(        Stream pushedStream,        DataFrame frame,        Callback callback){
          Assert.assertTrue(pushedStream.isClosed());
          clientLatch.countDown();
        }
      }
;
    }
  }
);
  Assert.assertTrue(serverLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(clientLatch.await(5,TimeUnit.SECONDS));
}

{
  Collection<PermissionEntry> permissions=new HashSet<PermissionEntry>();
  parsing:   while (true) {
switch (st.nextToken()) {
case StreamTokenizer.TT_WORD:
      if (Util.equalsIgnoreCase("permission",st.sval)) {
        PermissionEntry pe=new PermissionEntry();
        if (st.nextToken() == StreamTokenizer.TT_WORD) {
          pe.klass=st.sval;
          if (st.nextToken() == '"') {
            pe.name=st.sval;
            st.nextToken();
          }
          if (st.ttype == ',') {
            st.nextToken();
          }
          if (st.ttype == '"') {
            pe.actions=st.sval;
            if (st.nextToken() == ',') {
              st.nextToken();
            }
          }
          if (st.ttype == StreamTokenizer.TT_WORD && Util.equalsIgnoreCase("signedby",st.sval)) {
            if (st.nextToken() == '"') {
              pe.signers=st.sval;
            }
 else {
              handleUnexpectedToken(st);
            }
          }
 else {
            st.pushBack();
          }
          permissions.add(pe);
          continue parsing;
        }
      }
    handleUnexpectedToken(st,"Expected syntax is : permission permission_class_name [\"target_name\"] [, \"action_list\"] [, signedby \"name1,...,nameN\"]");
  break;
case ';':
break;
case '}':
break parsing;
default :
handleUnexpectedToken(st);
break;
}
}
return permissions;
}

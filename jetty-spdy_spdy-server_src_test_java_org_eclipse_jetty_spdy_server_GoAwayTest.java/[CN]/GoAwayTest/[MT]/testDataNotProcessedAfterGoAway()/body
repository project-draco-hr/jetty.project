{
  final CountDownLatch closeLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  ServerSessionFrameListener serverSessionFrameListener=new ServerSessionFrameListener.Adapter(){
    private AtomicInteger syns=new AtomicInteger();
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      stream.reply(new ReplyInfo(true),new Callback.Adapter());
      int synCount=syns.incrementAndGet();
      if (synCount == 1) {
        return null;
      }
 else {
        stream.getSession().goAway(new GoAwayInfo(),new FutureCallback());
        closeLatch.countDown();
        return new StreamFrameListener.Adapter(){
          @Override public void onData(          Stream stream,          DataInfo dataInfo){
            dataLatch.countDown();
          }
        }
;
      }
    }
  }
;
  final AtomicReference<GoAwayResultInfo> goAwayRef=new AtomicReference<>();
  final CountDownLatch goAwayLatch=new CountDownLatch(1);
  SessionFrameListener clientSessionFrameListener=new SessionFrameListener.Adapter(){
    @Override public void onGoAway(    Session session,    GoAwayResultInfo goAwayInfo){
      goAwayRef.set(goAwayInfo);
      goAwayLatch.countDown();
    }
  }
;
  Session session=startClient(startServer(serverSessionFrameListener),clientSessionFrameListener);
  final CountDownLatch reply1Latch=new CountDownLatch(1);
  session.syn(new SynInfo(5,TimeUnit.SECONDS,new Fields(),true,(byte)0),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      reply1Latch.countDown();
    }
  }
);
  Assert.assertTrue(reply1Latch.await(5,TimeUnit.SECONDS));
  Stream stream2=session.syn(new SynInfo(5,TimeUnit.SECONDS,new Fields(),false,(byte)0),null);
  Assert.assertTrue(closeLatch.await(5,TimeUnit.SECONDS));
  try {
    stream2.data(new StringDataInfo("foo",true));
    Assert.assertFalse(dataLatch.await(1,TimeUnit.SECONDS));
  }
 catch (  ExecutionException x) {
  }
  Assert.assertTrue(goAwayLatch.await(5,TimeUnit.SECONDS));
  GoAwayResultInfo goAway=goAwayRef.get();
  Assert.assertNotNull(goAway);
  Assert.assertEquals(stream2.getId(),goAway.getLastStreamId());
}

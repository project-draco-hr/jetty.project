{
  ServletHandler handler=new ServletHandler();
  handler.addFilterWithMapping(fh1,"/*",EnumSet.allOf(DispatcherType.class));
  handler.updateMappings();
  FilterMapping[] mappings=handler.getFilterMappings();
  assertNotNull(mappings);
  assertTrue(fh1 == mappings[0].getFilterHolder());
  fh4.setServletHandler(handler);
  handler.addFilter(fh4);
  fh4.getRegistration().addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class),false,"/*");
  handler.updateMappings();
  mappings=handler.getFilterMappings();
  assertNotNull(mappings);
  assertEquals(2,mappings.length);
  assertTrue(fh4 == mappings[0].getFilterHolder());
  assertTrue(fh1 == mappings[1].getFilterHolder());
  fh3.setServletHandler(handler);
  handler.addFilter(fh3);
  fh3.getRegistration().addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class),true,"/*");
  handler.updateMappings();
  mappings=handler.getFilterMappings();
  assertNotNull(mappings);
  assertEquals(3,mappings.length);
  assertTrue(fh4 == mappings[0].getFilterHolder());
  assertTrue(fh1 == mappings[1].getFilterHolder());
  assertTrue(fh3 == mappings[2].getFilterHolder());
  fh5.setServletHandler(handler);
  handler.addFilter(fh5);
  fh5.getRegistration().addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class),false,"/*");
  handler.updateMappings();
  mappings=handler.getFilterMappings();
  assertNotNull(mappings);
  assertEquals(4,mappings.length);
  assertTrue(fh4 == mappings[0].getFilterHolder());
  assertTrue(fh5 == mappings[1].getFilterHolder());
  assertTrue(fh1 == mappings[2].getFilterHolder());
  assertTrue(fh3 == mappings[3].getFilterHolder());
  FilterHolder f=new FilterHolder(Source.EMBEDDED);
  f.setName("non-programmatic");
  handler.addFilterWithMapping(f,"/*",EnumSet.allOf(DispatcherType.class));
  handler.updateMappings();
  mappings=handler.getFilterMappings();
  assertNotNull(mappings);
  assertEquals(5,mappings.length);
  assertTrue(fh4 == mappings[0].getFilterHolder());
  assertTrue(fh5 == mappings[1].getFilterHolder());
  assertTrue(fh1 == mappings[2].getFilterHolder());
  assertTrue(f == mappings[3].getFilterHolder());
  assertTrue(fh3 == mappings[4].getFilterHolder());
  FilterHolder pf=new FilterHolder(Source.JAVAX_API);
  pf.setServletHandler(handler);
  pf.setName("programmaticA");
  handler.addFilter(pf);
  pf.getRegistration().addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class),true,"/*");
  handler.updateMappings();
  mappings=handler.getFilterMappings();
  assertNotNull(mappings);
  assertEquals(6,mappings.length);
  assertTrue(fh4 == mappings[0].getFilterHolder());
  assertTrue(fh5 == mappings[1].getFilterHolder());
  assertTrue(fh1 == mappings[2].getFilterHolder());
  assertTrue(f == mappings[3].getFilterHolder());
  assertTrue(fh3 == mappings[4].getFilterHolder());
  assertTrue(pf == mappings[5].getFilterHolder());
  FilterHolder pf2=new FilterHolder(Source.JAVAX_API);
  pf2.setServletHandler(handler);
  pf2.setName("programmaticB");
  handler.addFilter(pf2);
  pf2.getRegistration().addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class),false,"/*");
  handler.updateMappings();
  mappings=handler.getFilterMappings();
  assertNotNull(mappings);
  assertEquals(7,mappings.length);
  assertTrue(fh4 == mappings[0].getFilterHolder());
  assertTrue(fh5 == mappings[1].getFilterHolder());
  assertTrue(pf2 == mappings[2].getFilterHolder());
  assertTrue(fh1 == mappings[3].getFilterHolder());
  assertTrue(f == mappings[4].getFilterHolder());
  assertTrue(fh3 == mappings[5].getFilterHolder());
  assertTrue(pf == mappings[6].getFilterHolder());
}

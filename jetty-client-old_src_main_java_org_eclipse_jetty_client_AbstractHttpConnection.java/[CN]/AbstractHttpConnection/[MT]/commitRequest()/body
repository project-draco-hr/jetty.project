{
synchronized (this) {
    _status=0;
    if (_exchange.getStatus() != HttpExchange.STATUS_WAITING_FOR_COMMIT)     throw new IllegalStateException();
    _exchange.setStatus(HttpExchange.STATUS_SENDING_REQUEST);
    _generator.setVersion(_exchange.getVersion());
    String method=_exchange.getMethod();
    String uri=_exchange.getRequestURI();
    if (_destination.isProxied()) {
      if (!HttpMethod.CONNECT.equals(method) && uri.startsWith("/")) {
        boolean secure=_destination.isSecure();
        String host=_destination.getAddress().getHost();
        int port=_destination.getAddress().getPort();
        StringBuilder absoluteURI=new StringBuilder();
        absoluteURI.append(secure ? HttpScheme.HTTPS : HttpScheme.HTTP);
        absoluteURI.append("://");
        absoluteURI.append(host);
        if (!(secure && port == 443 || !secure && port == 80))         absoluteURI.append(":").append(port);
        absoluteURI.append(uri);
        uri=absoluteURI.toString();
      }
      Authentication auth=_destination.getProxyAuthentication();
      if (auth != null)       auth.setCredentials(_exchange);
    }
    _generator.setRequest(method,uri);
    _parser.setHeadResponse(HttpMethod.HEAD.equalsIgnoreCase(method));
    HttpFields requestHeaders=_exchange.getRequestFields();
    if (_exchange.getVersion() >= HttpVersion.HTTP_1_1_ORDINAL) {
      if (!requestHeaders.containsKey(HttpHeader.HOST_BUFFER))       requestHeaders.add(HttpHeader.HOST_BUFFER,_destination.getHostHeader());
    }
    ByteBuffer requestContent=_exchange.getRequestContent();
    if (requestContent != null) {
      requestHeaders.putLongField(HttpHeader.CONTENT_LENGTH,requestContent.length());
      _generator.completeHeader(requestHeaders,false);
      _generator.addContent(new View(requestContent),true);
      _exchange.setStatus(HttpExchange.STATUS_WAITING_FOR_RESPONSE);
    }
 else {
      InputStream requestContentStream=_exchange.getRequestContentSource();
      if (requestContentStream != null) {
        _generator.completeHeader(requestHeaders,false);
      }
 else {
        requestHeaders.remove(HttpHeader.CONTENT_LENGTH);
        _generator.completeHeader(requestHeaders,true);
        _exchange.setStatus(HttpExchange.STATUS_WAITING_FOR_RESPONSE);
      }
    }
  }
}

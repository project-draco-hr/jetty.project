{
  try {
    org.objectweb.asm.Type[] args=org.objectweb.asm.Type.getArgumentTypes(desc);
    if (args.length != 0) {
      Log.warn("Skipping PostConstruct annotation on " + className + "."+ methodName+ ": has parameters");
      return;
    }
    if (org.objectweb.asm.Type.getReturnType(desc) != org.objectweb.asm.Type.VOID_TYPE) {
      Log.warn("Skipping PostConstruct annotation on " + className + "."+ methodName+ ": is not void");
      return;
    }
    if (exceptions != null && exceptions.length != 0) {
      Log.warn("Skipping PostConstruct annotation on " + className + "."+ methodName+ ": throws checked exceptions");
      return;
    }
    if ((access & org.objectweb.asm.Opcodes.ACC_STATIC) > 0) {
      Log.warn("Skipping PostConstruct annotation on " + className + "."+ methodName+ ": is static");
      return;
    }
    PostConstructCallback callback=new PostConstructCallback();
    callback.setTarget(className,methodName);
    _callbacks.add(callback);
  }
 catch (  Exception e) {
    Log.warn(e);
  }
}

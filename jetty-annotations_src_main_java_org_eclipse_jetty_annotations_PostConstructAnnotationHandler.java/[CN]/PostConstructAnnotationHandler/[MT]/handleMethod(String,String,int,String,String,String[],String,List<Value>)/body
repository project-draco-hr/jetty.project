{
  LifeCycleCallbackCollection callbacks=(LifeCycleCallbackCollection)_wac.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION);
  Class clazz=null;
  try {
    clazz=Loader.loadClass(null,className);
    Method m=clazz.getDeclaredMethod(methodName,Util.convertTypes(params));
    if (!Util.isServletType(m.getDeclaringClass())) {
      Log.debug("Ignoring " + m.getName() + " as non-servlet type");
      return;
    }
    if (m.getParameterTypes().length != 0)     throw new IllegalStateException(m + " has parameters");
    if (m.getReturnType() != Void.TYPE)     throw new IllegalStateException(m + " is not void");
    if (m.getExceptionTypes().length != 0)     throw new IllegalStateException(m + " throws checked exceptions");
    if (Modifier.isStatic(m.getModifiers()))     throw new IllegalStateException(m + " is static");
    PostConstructCallback callback=new PostConstructCallback();
    callback.setTargetClass(m.getDeclaringClass());
    callback.setTarget(m);
    callbacks.add(callback);
  }
 catch (  Exception e) {
    Log.warn(e);
  }
}

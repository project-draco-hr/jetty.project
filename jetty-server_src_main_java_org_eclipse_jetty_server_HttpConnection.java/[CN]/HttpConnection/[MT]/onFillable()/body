{
  LOG.debug("{} onFillable {}",this,_channel.getState());
  setCurrentConnection(this);
  try {
    while (true) {
      boolean call_channel=_parser.parseNext(_requestBuffer == null ? BufferUtil.EMPTY_BUFFER : _requestBuffer);
      if (!call_channel && BufferUtil.isEmpty(_requestBuffer)) {
        if (_requestBuffer == null)         _requestBuffer=_bufferPool.acquire(getInputBufferSize(),false);
        int filled=getEndPoint().fill(_requestBuffer);
        if (filled == 0)         filled=getEndPoint().fill(_requestBuffer);
        LOG.debug("{} filled {}",this,filled);
        if (filled == 0) {
          releaseRequestBuffer();
          fillInterested();
          return;
        }
 else         if (filled < 0) {
          _parser.shutdownInput();
          if (getEndPoint().isOutputShutdown())           getEndPoint().close();
 else           getEndPoint().shutdownOutput();
          releaseRequestBuffer();
          return;
        }
        call_channel=_parser.parseNext(_requestBuffer);
      }
      if (call_channel) {
        while (_parser.inContentState()) {
          if (!_parser.parseNext(_requestBuffer == null ? BufferUtil.EMPTY_BUFFER : _requestBuffer))           break;
        }
        getExecutor().execute(_channel);
        return;
      }
    }
  }
 catch (  EofException e) {
    LOG.debug(e);
  }
catch (  IOException e) {
    if (_parser.isIdle())     LOG.debug(e);
 else     LOG.warn(this.toString(),e);
    close();
  }
catch (  Exception e) {
    LOG.warn(this.toString(),e);
    close();
  }
 finally {
    setCurrentConnection(null);
  }
}

{
  _lock.lock();
  try {
    if (_generator.isCommitted() || BufferUtil.hasContent(_responseBuffer))     throw new IllegalStateException("!send after append");
    if (_generator.isComplete())     throw new EofException();
    do {
      if (LOG.isDebugEnabled())       LOG.debug("{}: send({},{},{})@{}",this,BufferUtil.toSummaryString(_responseHeader),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),_generator.getState());
      HttpGenerator.Result result=_generator.generate(info,_responseHeader,null,_responseBuffer,content,Action.COMPLETE);
      if (LOG.isDebugEnabled())       LOG.debug("{}: {} ({},{},{})@{}",this,result,BufferUtil.toSummaryString(_responseHeader),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),_generator.getState());
switch (result) {
case NEED_HEADER:
        _responseHeader=_connector.getResponseBuffers().getHeader();
      break;
case NEED_BUFFER:
    _responseBuffer=_connector.getResponseBuffers().getBuffer();
  break;
case NEED_CHUNK:
throw new IllegalStateException("!chunk when content length known");
case FLUSH:
write(_responseHeader,_chunk,_responseBuffer).block();
break;
case FLUSH_CONTENT:
_writeFuture=write(_responseHeader,_chunk,content);
return;
case SHUTDOWN_OUT:
getEndPoint().shutdownOutput();
break;
case OK:
break;
}
}
 while (BufferUtil.hasContent(content));
}
 catch (InterruptedException e) {
LOG.debug(e);
}
catch (ExecutionException e) {
LOG.debug(e);
DispatchingIOFuture.rethrow(e);
}
 finally {
_lock.unlock();
}
}

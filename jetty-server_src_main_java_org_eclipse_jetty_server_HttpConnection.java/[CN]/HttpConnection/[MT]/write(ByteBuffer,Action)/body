{
  if (!_generator.isComplete())   throw new EofException();
  try {
    while (BufferUtil.hasContent(content)) {
      HttpGenerator.Result result=_generator.generate(_responseHeader,_chunk,_responseBuffer,content,action);
switch (result) {
case NEED_HEADER:
        _responseHeader=_connector.getResponseBuffers().getHeader();
      break;
case NEED_BUFFER:
    _responseBuffer=_connector.getResponseBuffers().getBuffer();
  _responseBuffer=BufferUtil.allocate(8192);
break;
case NEED_CHUNK:
_responseHeader=null;
_chunk=_connector.getResponseBuffers().getBuffer(HttpGenerator.CHUNK_SIZE);
break;
case FLUSH:
{
Future<Integer> future=getEndPoint().flush(_responseHeader,_chunk,_responseBuffer);
future.get(getMaxIdleTime(),TimeUnit.MILLISECONDS);
break;
}
case FLUSH_CONTENT:
{
Future<Integer> future=getEndPoint().flush(_responseHeader,_chunk,content);
future.get(getMaxIdleTime(),TimeUnit.MILLISECONDS);
break;
}
case OK:
break;
case SHUTDOWN_OUT:
getEndPoint().shutdownOutput();
break;
}
switch (action) {
case COMPLETE:
action=Action.PREPARE;
break;
case FLUSH:
action=Action.FLUSH;
break;
case PREPARE:
action=Action.PREPARE;
break;
}
}
}
 catch (final TimeoutException e) {
throw new InterruptedIOException(e.toString()){
{
this.initCause(e);
}
}
;
}
catch (final InterruptedException e) {
throw new InterruptedIOException(e.toString()){
{
this.initCause(e);
}
}
;
}
catch (final ExecutionException e) {
throw new IOException(e.toString()){
{
this.initCause(e);
}
}
;
}
}

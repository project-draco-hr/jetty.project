{
  _lock.lock();
  try {
    if (_generator.isCommitted() || BufferUtil.hasContent(_responseBuffer))     throw new IllegalStateException("!empty");
    if (_generator.isComplete())     throw new EofException();
    loop:     while (true) {
      if (LOG.isDebugEnabled())       LOG.debug("{}: send({},{},{})@{}",this,BufferUtil.toSummaryString(_responseHeader),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),_generator.getState());
      HttpGenerator.Result result=_generator.generate(_info,_responseHeader,null,_responseBuffer,content,Action.COMPLETE);
      if (LOG.isDebugEnabled())       LOG.debug("{}: {} ({},{},{})@{}",this,result,BufferUtil.toSummaryString(_responseHeader),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),_generator.getState());
switch (result) {
case NEED_COMMIT:
        if (_info == null)         _info=_channel.getEventHandler().commit();
      _responseHeader=_bufferPool.acquire(_connector.getResponseHeaderSize(),false);
    break;
case NEED_BUFFER:
  _responseBuffer=_bufferPool.acquire(_connector.getResponseBufferSize(),false);
break;
case NEED_CHUNK:
throw new IllegalStateException("!chunk when content length known");
case FLUSH:
write(_responseHeader,_chunk,_responseBuffer).get();
break;
case FLUSH_CONTENT:
write(_responseHeader,_chunk,content);
break loop;
case SHUTDOWN_OUT:
getEndPoint().shutdownOutput();
break loop;
case OK:
break loop;
}
}
}
 catch (InterruptedException e) {
LOG.debug(e);
}
catch (ExecutionException e) {
LOG.debug(e);
FutureCallback.rethrow(e);
}
 finally {
_lock.unlock();
}
}

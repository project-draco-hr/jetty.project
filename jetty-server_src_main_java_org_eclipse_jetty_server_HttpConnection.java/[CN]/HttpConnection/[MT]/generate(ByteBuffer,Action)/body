{
  if (!_generator.isComplete())   throw new EofException();
  while (BufferUtil.hasContent(content)) {
    if (LOG.isDebugEnabled())     LOG.debug("{}: generate({},{},{},{},{})@{}",this,BufferUtil.toSummaryString(_responseHeader),BufferUtil.toSummaryString(_chunk),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),action,_generator.getState());
    HttpGenerator.Result result=_generator.generate(_responseHeader,_chunk,_responseBuffer,content,action);
    if (LOG.isDebugEnabled())     LOG.debug("{}: {} ({},{},{},{},{})@{}",this,result,BufferUtil.toSummaryString(_responseHeader),BufferUtil.toSummaryString(_chunk),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),action,_generator.getState());
switch (result) {
case NEED_HEADER:
      _responseHeader=_connector.getResponseBuffers().getHeader();
    break;
case NEED_BUFFER:
  _responseBuffer=_connector.getResponseBuffers().getBuffer();
_responseBuffer=BufferUtil.allocate(8192);
break;
case NEED_CHUNK:
_responseHeader=null;
_chunk=_connector.getResponseBuffers().getBuffer(HttpGenerator.CHUNK_SIZE);
break;
case FLUSH:
getAsyncEndPoint().gather(_responseHeader,_chunk,_responseBuffer);
break;
case FLUSH_CONTENT:
getAsyncEndPoint().gather(_responseHeader,_chunk,content);
break;
case SHUTDOWN_OUT:
getAsyncEndPoint().shutdownOutput();
break;
case OK:
break;
}
switch (action) {
case COMPLETE:
action=Action.PREPARE;
break;
case FLUSH:
action=Action.FLUSH;
break;
case PREPARE:
action=Action.PREPARE;
break;
}
}
}

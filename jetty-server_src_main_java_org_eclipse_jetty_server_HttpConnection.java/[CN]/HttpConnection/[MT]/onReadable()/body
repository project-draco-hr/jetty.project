{
  LOG.debug("{} onReadable {}",this,_channel.isIdle());
  try {
    setCurrentConnection(this);
    while (true) {
      if (BufferUtil.isEmpty(_requestBuffer)) {
        if (_requestBuffer == null)         _requestBuffer=_bufferPool.acquire(_connector.getRequestHeaderSize(),false);
        int filled=getEndPoint().fill(_requestBuffer);
        LOG.debug("{} filled {}",this,filled);
        if (filled == 0) {
          scheduleOnReadable();
          releaseRequestBuffer();
          return;
        }
 else         if (filled < 0) {
          _parser.inputShutdown();
          getEndPoint().shutdownOutput();
          releaseRequestBuffer();
          return;
        }
      }
      if (_parser.parseNext(_requestBuffer)) {
        if (!_parser.isPersistent())         _generator.setPersistent(false);
        _channel.process();
        if (_channel.isSuspended()) {
          if (_httpInput.available() == 0)           releaseRequestBuffer();
          return;
        }
        if (getEndPoint().getAsyncConnection() != this) {
          getEndPoint().getAsyncConnection().onOpen();
          return;
        }
      }
    }
  }
 catch (  Exception e) {
    if (_parser.isClosed())     LOG.debug(e);
 else     LOG.warn(this.toString(),e);
    getEndPoint().close();
  }
 finally {
    setCurrentConnection(null);
  }
}

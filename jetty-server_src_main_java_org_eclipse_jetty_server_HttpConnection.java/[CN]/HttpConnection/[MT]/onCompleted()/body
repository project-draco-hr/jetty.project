{
  if (_channel.getResponse().getStatus() == HttpStatus.SWITCHING_PROTOCOLS_101) {
    Connection connection=(Connection)_channel.getRequest().getAttribute(UPGRADE_CONNECTION_ATTRIBUTE);
    if (connection != null) {
      if (LOG.isDebugEnabled())       LOG.debug("Upgrade from {} to {}",this,connection);
      _channel.getState().upgrade();
      getEndPoint().upgrade(connection);
      _channel.recycle();
      _parser.reset();
      _generator.reset();
      if (_contentBufferReferences.get() == 0)       releaseRequestBuffer();
 else {
        LOG.warn("{} lingering content references?!?!",this);
        _requestBuffer=null;
        _contentBufferReferences.set(0);
      }
      return;
    }
  }
  if (_channel.isExpecting100Continue()) {
    _parser.close();
  }
 else   if (_parser.inContentState() && _generator.isPersistent()) {
    if (_channel.getRequest().getHttpInput().isAsync()) {
      if (LOG.isDebugEnabled())       LOG.debug("unconsumed async input {}",this);
      _channel.abort(new IOException("unconsumed input"));
    }
 else {
      if (LOG.isDebugEnabled())       LOG.debug("unconsumed input {}",this);
      if (!_channel.getRequest().getHttpInput().consumeAll())       _channel.abort(new IOException("unconsumed input"));
    }
  }
  _channel.recycle();
  if (_generator.isPersistent() && !_parser.isClosed())   _parser.reset();
 else   _parser.close();
  if (_chunk != null)   _bufferPool.release(_chunk);
  _chunk=null;
  _generator.reset();
  if (getCurrentConnection() != this) {
    if (_parser.isStart()) {
      if (BufferUtil.isEmpty(_requestBuffer)) {
        fillInterested();
      }
 else       if (getConnector().isRunning()) {
        try {
          getExecutor().execute(this);
        }
 catch (        RejectedExecutionException e) {
          if (getConnector().isRunning())           LOG.warn(e);
 else           LOG.ignore(e);
          getEndPoint().close();
        }
      }
 else {
        getEndPoint().close();
      }
    }
 else     if (getEndPoint().isOpen())     fillInterested();
  }
}

{
synchronized (this) {
    long prepared_before=0;
    long prepared_after;
    try {
      if (_generator.isComplete()) {
        if (Action.COMPLETE == action)         return 0;
        throw new EofException();
      }
      prepared_before=_generator.getContentPrepared();
      loop:       while (true) {
        HttpGenerator.Result result=_generator.generate(_info,_responseHeader,_chunk,_responseBuffer,content,action);
        if (LOG.isDebugEnabled())         LOG.debug("{} generate: {} ({},{},{})@{}",this,result,BufferUtil.toSummaryString(_responseHeader),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),_generator.getState());
switch (result) {
case NEED_INFO:
          if (_info == null)           _info=_channel.getEventHandler().commit();
        LOG.debug("{} Gcommit {}",this,_info);
      if (_responseHeader == null)       _responseHeader=_bufferPool.acquire(_httpConfig.getResponseHeaderSize(),false);
    continue;
case NEED_HEADER:
  _responseHeader=_bufferPool.acquire(_httpConfig.getResponseHeaderSize(),false);
continue;
case NEED_BUFFER:
_responseBuffer=_bufferPool.acquire(_httpConfig.getResponseBufferSize(),false);
continue;
case NEED_CHUNK:
_responseHeader=null;
_chunk=_bufferPool.acquire(HttpGenerator.CHUNK_SIZE,false);
continue;
case FLUSH:
if (_info.isHead()) {
if (_chunk != null) BufferUtil.clear(_chunk);
if (_responseBuffer != null) BufferUtil.clear(_responseBuffer);
}
write(_responseHeader,_chunk,_responseBuffer).get();
continue;
case FLUSH_CONTENT:
if (_info.isHead()) {
if (_chunk != null) BufferUtil.clear(_chunk);
if (_responseBuffer != null) BufferUtil.clear(content);
}
write(_responseHeader,_chunk,content).get();
break;
case SHUTDOWN_OUT:
terminate();
break loop;
case OK:
if (!BufferUtil.hasContent(content)) break loop;
}
}
}
 catch (InterruptedException e) {
LOG.debug(e);
}
catch (ExecutionException e) {
LOG.debug(e);
if (e.getCause() instanceof IOException) throw (IOException)e.getCause();
throw new RuntimeException(e);
}
 finally {
prepared_after=_generator.getContentPrepared();
}
return (int)(prepared_after - prepared_before);
}
}

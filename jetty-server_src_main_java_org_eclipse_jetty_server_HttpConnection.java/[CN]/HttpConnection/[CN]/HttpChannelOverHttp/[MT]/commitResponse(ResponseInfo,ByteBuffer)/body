{
synchronized (this) {
    _info=info;
    LOG.debug("{} commit {}",this,_info);
    try {
      if (_generator.isCommitted())       throw new IllegalStateException("committed");
      if (BufferUtil.hasContent(_responseBuffer)) {
        if (LOG.isDebugEnabled())         LOG.debug("discarding uncommitted response {}",BufferUtil.toDetailString(_responseBuffer));
        BufferUtil.clear(_responseBuffer);
      }
      if (_generator.isComplete())       throw new EofException();
      loop:       while (true) {
        HttpGenerator.Result result=_generator.generate(_info,_responseHeader,null,_responseBuffer,content,Action.COMPLETE);
        if (LOG.isDebugEnabled())         LOG.debug("{} commit: {} ({},{},{})@{}",this,result,BufferUtil.toDetailString(_responseHeader),BufferUtil.toSummaryString(_responseBuffer),BufferUtil.toSummaryString(content),_generator.getState());
switch (result) {
case NEED_INFO:
          _info=_channel.getEventHandler().commit();
        if (_responseHeader == null)         _responseHeader=_bufferPool.acquire(_httpConfig.getResponseHeaderSize(),false);
      break;
case NEED_HEADER:
    _responseHeader=_bufferPool.acquire(_httpConfig.getResponseHeaderSize(),false);
  break;
case NEED_BUFFER:
_responseBuffer=_bufferPool.acquire(_httpConfig.getResponseBufferSize(),false);
break;
case NEED_CHUNK:
throw new IllegalStateException("!chunk when content length known");
case FLUSH:
if (_info.isHead()) {
if (_chunk != null) BufferUtil.clear(_chunk);
if (_responseBuffer != null) BufferUtil.clear(_responseBuffer);
}
write(_responseHeader,_chunk,_responseBuffer).get();
break;
case FLUSH_CONTENT:
if (_info.isHead()) {
if (_chunk != null) BufferUtil.clear(_chunk);
if (_responseBuffer != null) BufferUtil.clear(content);
}
write(_responseHeader,_chunk,content);
break loop;
case SHUTDOWN_OUT:
terminate();
break loop;
case OK:
if (_info != null && _info.isInformational()) _info=null;
break loop;
}
}
}
 catch (InterruptedException e) {
LOG.debug(e);
}
catch (ExecutionException e) {
LOG.debug(e);
FutureCallback.rethrow(e);
}
}
}

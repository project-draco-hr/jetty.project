{
synchronized (this) {
    ByteBuffer header=null;
    try {
      if (_generator.isEnd()) {
        if (last && BufferUtil.isEmpty(content))         return;
        throw new EofException();
      }
      loop:       while (true) {
        HttpGenerator.Result result=_generator.generateResponse(_info,header,content,last);
        if (LOG.isDebugEnabled())         LOG.debug("{} generate: {} ({},{},{})@{}",this,result,BufferUtil.toSummaryString(header),BufferUtil.toSummaryString(content),last,_generator.getState());
switch (result) {
case NEED_INFO:
          if (_info == null)           _info=_channel.getEventHandler().commit();
        continue;
case NEED_HEADER:
      if (header != null)       _bufferPool.release(header);
    header=_bufferPool.acquire(_httpConfig.getResponseHeaderSize(),false);
  continue;
case NEED_CHUNK:
if (header != null) _bufferPool.release(header);
header=_bufferPool.acquire(HttpGenerator.CHUNK_SIZE,false);
continue;
case FLUSH:
if (_info.isHead()) {
write(header,null).get();
BufferUtil.clear(content);
}
 else write(header,content).get();
continue;
case SHUTDOWN_OUT:
getEndPoint().shutdownOutput();
continue;
case DONE:
break loop;
}
}
}
 catch (InterruptedException e) {
LOG.debug(e);
}
catch (ExecutionException e) {
LOG.debug(e);
if (e.getCause() instanceof IOException) throw (IOException)e.getCause();
throw new RuntimeException(e);
}
 finally {
if (header != null) _bufferPool.release(header);
}
}
}

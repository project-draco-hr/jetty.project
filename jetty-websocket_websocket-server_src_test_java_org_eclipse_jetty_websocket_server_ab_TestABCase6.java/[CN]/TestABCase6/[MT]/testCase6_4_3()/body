{
  enableStacks(Parser.class,false);
  ByteBuffer payload=ByteBuffer.allocate(64);
  BufferUtil.clearToFill(payload);
  payload.put(TypeUtil.fromHexString("cebae1bdb9cf83cebcceb5"));
  payload.put(TypeUtil.fromHexString("f4908080"));
  payload.put(TypeUtil.fromHexString("656469746564"));
  BufferUtil.flipToFlush(payload,0);
  List<WebSocketFrame> send=new ArrayList<>();
  send.add(new WebSocketFrame(OpCode.TEXT).setPayload(payload));
  send.add(new CloseInfo(StatusCode.NORMAL).asFrame());
  List<WebSocketFrame> expect=new ArrayList<>();
  expect.add(new CloseInfo(StatusCode.BAD_PAYLOAD).asFrame());
  Fuzzer fuzzer=new Fuzzer(this);
  try {
    fuzzer.connect();
    ByteBuffer net=fuzzer.asNetworkBuffer(send);
    int splits[]={17,21,net.limit()};
    ByteBuffer part1=net.slice();
    part1.limit(splits[0]);
    ByteBuffer part2=net.slice();
    part2.position(splits[0]);
    part2.limit(splits[1]);
    ByteBuffer part3=net.slice();
    part3.position(splits[1]);
    part3.limit(splits[2]);
    fuzzer.send(part1);
    TimeUnit.SECONDS.sleep(1);
    fuzzer.send(part2);
    fuzzer.expect(expect);
    TimeUnit.SECONDS.sleep(1);
    fuzzer.sendExpectingIOException(part3);
  }
  finally {
    enableStacks(Parser.class,true);
    fuzzer.close();
  }
}

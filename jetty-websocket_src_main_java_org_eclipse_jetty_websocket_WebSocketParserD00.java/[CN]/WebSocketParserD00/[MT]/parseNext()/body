{
  if (_buffer == null)   _buffer=_buffers.getBuffer();
  int total_filled=0;
  boolean progress=true;
  while (true) {
    int length=_buffer.length();
    if (length == 0 || _state == STATE_DATA && length < _length) {
      _buffer.compact();
      if (_buffer.space() == 0)       throw new IllegalStateException("FULL");
      try {
        int filled=_endp.isOpen() ? _endp.fill(_buffer) : -1;
        if (filled <= 0)         return total_filled;
        total_filled+=filled;
        length=_buffer.length();
      }
 catch (      IOException e) {
        Log.debug(e);
        return total_filled > 0 ? total_filled : -1;
      }
    }
    byte b;
    charloop:     while (length-- > 0) {
switch (_state) {
case STATE_START:
        b=_buffer.get();
      _opcode=b;
    if (_opcode < 0) {
      _length=0;
      _state=STATE_LENGTH;
    }
 else {
      _state=STATE_SENTINEL_DATA;
      _buffer.mark(0);
    }
  continue;
case STATE_SENTINEL_DATA:
b=_buffer.get();
if ((b & 0xff) == 0xff) {
_state=STATE_START;
int l=_buffer.getIndex() - _buffer.markIndex() - 1;
_handler.onFrame((byte)0,_opcode,_buffer.sliceFromMark(l));
_buffer.setMarkIndex(-1);
if (_buffer.length() == 0) {
  _buffers.returnBuffer(_buffer);
  _buffer=null;
}
return total_filled;
}
continue;
case STATE_LENGTH:
b=_buffer.get();
_length=_length << 7 | (0x7f & b);
if (b >= 0) {
_state=STATE_DATA;
_buffer.mark(0);
}
continue;
case STATE_DATA:
if (_buffer.markIndex() < 0) if (_buffer.length() < _length) break charloop;
Buffer data=_buffer.sliceFromMark(_length);
_buffer.skip(_length);
_state=STATE_START;
_handler.onFrame((byte)0,_opcode,data);
if (_buffer.length() == 0) {
_buffers.returnBuffer(_buffer);
_buffer=null;
}
return total_filled;
}
}
}
}

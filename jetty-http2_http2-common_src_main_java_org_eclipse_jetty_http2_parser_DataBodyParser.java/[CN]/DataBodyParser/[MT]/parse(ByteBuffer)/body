{
  boolean loop=false;
  while (buffer.hasRemaining() || loop) {
switch (state) {
case PREPARE:
{
        if (getStreamId() == 0)         return connectionFailure(buffer,ErrorCode.PROTOCOL_ERROR.code,"invalid_data_frame");
        length=getBodyLength();
        state=isPadding() ? State.PADDING_LENGTH : State.DATA;
        break;
      }
case PADDING_LENGTH:
{
      padding=1;
      paddingLength=buffer.get() & 0xFF;
      --length;
      length-=paddingLength;
      state=State.DATA;
      loop=length == 0;
      if (length < 0)       return connectionFailure(buffer,ErrorCode.FRAME_SIZE_ERROR.code,"invalid_data_frame_padding");
      break;
    }
case DATA:
{
    int size=Math.min(buffer.remaining(),length);
    int position=buffer.position();
    int limit=buffer.limit();
    buffer.limit(position + size);
    ByteBuffer slice=buffer.slice();
    buffer.limit(limit);
    buffer.position(position + size);
    length-=size;
    if (length == 0) {
      state=State.PADDING;
      loop=paddingLength == 0;
      onData(slice,false,padding + paddingLength);
    }
 else {
      onData(slice,true,0);
    }
    break;
  }
case PADDING:
{
  int size=Math.min(buffer.remaining(),paddingLength);
  buffer.position(buffer.position() + size);
  paddingLength-=size;
  if (paddingLength == 0) {
    reset();
    return true;
  }
  break;
}
default :
{
throw new IllegalStateException();
}
}
}
return false;
}

{
  final AtomicReference<Throwable> throwable=new AtomicReference<Throwable>();
  HttpExchange httpExchange=new HttpExchange(){
    /** 
 * @see org.eclipse.jetty.client.HttpExchange#onException(java.lang.Throwable)
 */
    @Override protected void onException(    Throwable x){
      throwable.set(x);
    }
    /** 
 * @see org.eclipse.jetty.client.HttpExchange#onConnectionFailed(java.lang.Throwable)
 */
    @Override protected void onConnectionFailed(    Throwable x){
      throwable.set(x);
    }
  }
;
  httpExchange.setURL(_scheme + "://localhost:" + _port+ "/");
  httpExchange.setMethod("SLEEP");
  _httpClient.send(httpExchange);
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(500);
        _httpClient.stop();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
  int status=httpExchange.waitForDone();
  System.err.println(throwable.get());
  assertTrue(throwable.get().toString().indexOf("close") >= 0);
  assertEquals(HttpExchange.STATUS_EXCEPTED,status);
}

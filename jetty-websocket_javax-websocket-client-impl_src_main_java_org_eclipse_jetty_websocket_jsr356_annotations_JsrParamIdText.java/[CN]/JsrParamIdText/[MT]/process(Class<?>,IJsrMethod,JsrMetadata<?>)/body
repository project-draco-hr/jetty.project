{
  if (type.isAssignableFrom(String.class)) {
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(StringDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Boolean.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(BooleanDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Byte.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(ByteDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Character.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(CharacterDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Double.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(DoubleDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Float.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(FloatDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Integer.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(IntegerDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Long.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(LongDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Short.class)) {
    assertPartialMessageSupportDisabled(type,method);
    method.setMessageType(MessageType.TEXT);
    method.setMessageDecoder(ShortDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Boolean.TYPE)) {
    Class<? extends Decoder> decoder=method.getMessageDecoder();
    if (decoder == null) {
      method.enablePartialMessageSupport();
    }
 else {
      if (decoder.isAssignableFrom(StringDecoder.class)) {
        method.enablePartialMessageSupport();
      }
 else {
        StringBuilder err=new StringBuilder();
        err.append("Unable to support boolean <");
        err.append(type.getName()).append("> as partial message indicator ");
        err.append("in conjunction with a non-String text message parameter.");
        throw new InvalidSignatureException(err.toString());
      }
    }
    return true;
  }
  return false;
}

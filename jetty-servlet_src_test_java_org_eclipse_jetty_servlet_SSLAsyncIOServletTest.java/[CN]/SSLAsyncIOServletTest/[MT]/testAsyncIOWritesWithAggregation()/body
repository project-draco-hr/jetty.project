{
  Random random=new Random();
  String chars="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  final byte[] content=new byte[50000];
  for (int i=0; i < content.length; ++i)   content[i]=(byte)chars.charAt(random.nextInt(chars.length()));
  prepare(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      final AsyncContext asyncContext=request.startAsync();
      asyncContext.setTimeout(0);
      final int bufferSize=4096;
      response.setBufferSize(bufferSize);
      response.getOutputStream().setWriteListener(new WriteListener(){
        private int writes;
        private int written;
        @Override public void onWritePossible() throws IOException {
          ServletOutputStream output=asyncContext.getResponse().getOutputStream();
          do {
            int toWrite=content.length - written;
            if (toWrite == 0) {
              asyncContext.complete();
              return;
            }
            toWrite=Math.min(toWrite,bufferSize);
            if (writes == 1)             toWrite-=16;
            output.write(content,written,toWrite);
            ++writes;
            written+=toWrite;
          }
 while (output.isReady());
        }
        @Override public void onError(        Throwable t){
          asyncContext.complete();
        }
      }
);
    }
  }
);
  try (Socket client=newClient()){
    String request="" + "GET " + contextPath + servletPath+ " HTTP/1.1\r\n"+ "Host: localhost\r\n"+ "\r\n";
    OutputStream output=client.getOutputStream();
    output.write(request.getBytes("UTF-8"));
    output.flush();
    BufferedReader input=new BufferedReader(new InputStreamReader(client.getInputStream(),"UTF-8"));
    SimpleHttpParser parser=new SimpleHttpParser();
    SimpleHttpResponse response=parser.readResponse(input);
    Assert.assertEquals("200",response.getCode());
    Assert.assertArrayEquals(content,response.getBody().getBytes("UTF-8"));
  }
 }

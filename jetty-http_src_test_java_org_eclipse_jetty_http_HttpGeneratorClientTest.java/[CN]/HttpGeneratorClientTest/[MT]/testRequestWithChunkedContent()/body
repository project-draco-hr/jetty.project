{
  String body="";
  ByteBuffer header=BufferUtil.allocate(4096);
  ByteBuffer buffer=BufferUtil.allocate(16);
  ByteBuffer content0=BufferUtil.toBuffer("Hello World! ");
  ByteBuffer content1=BufferUtil.toBuffer("The quick brown fox jumped over the lazy dog. ");
  HttpFields fields=new HttpFields();
  HttpGenerator gen=new HttpGenerator(fields);
  gen.setVersion(HttpVersion.HTTP_1_1);
  gen.setRequest("POST","/index.html");
  fields.add("Host","something");
  fields.add("User-Agent","test");
  HttpGenerator.Result result=gen.generate(null,null,null,content0,null);
  assertEquals(HttpGenerator.Result.NEED_BUFFER,result);
  assertEquals(HttpGenerator.State.START,gen.getState());
  result=gen.generate(null,null,buffer,content0,null);
  assertEquals(HttpGenerator.Result.OK,result);
  assertEquals(HttpGenerator.State.START,gen.getState());
  assertEquals("Hello World! ",BufferUtil.toString(buffer));
  assertEquals(0,content0.remaining());
  result=gen.generate(null,null,buffer,content1,null);
  assertEquals(HttpGenerator.Result.NEED_HEADER,result);
  assertEquals(HttpGenerator.State.COMMITTING,gen.getState());
  assertEquals("Hello World! The",BufferUtil.toString(buffer));
  assertEquals(43,content1.remaining());
  result=gen.generate(header,null,buffer,content1,null);
  assertEquals(HttpGenerator.Result.FLUSH,result);
  assertEquals(HttpGenerator.State.COMMITTED,gen.getState());
  assertEquals("Hello World! The",BufferUtil.toString(buffer));
  assertEquals(43,content1.remaining());
  assertTrue(gen.isChunking());
  String head=BufferUtil.toString(header);
  BufferUtil.clear(header);
  body+=BufferUtil.toString(buffer);
  BufferUtil.clear(buffer);
  result=gen.generate(null,null,buffer,content1,null);
  assertEquals(HttpGenerator.Result.NEED_CHUNK,result);
  assertEquals(HttpGenerator.State.COMMITTED,gen.getState());
  ByteBuffer chunk=BufferUtil.allocate(HttpGenerator.CHUNK_SIZE);
  result=gen.generate(null,chunk,buffer,content1,null);
  assertEquals(HttpGenerator.Result.FLUSH,result);
  assertEquals(HttpGenerator.State.COMMITTED,gen.getState());
  assertEquals("\r\n10\r\n",BufferUtil.toString(chunk));
  assertEquals(" quick brown fox",BufferUtil.toString(buffer));
  assertEquals(27,content1.remaining());
  body+=BufferUtil.toString(chunk) + BufferUtil.toString(buffer);
  BufferUtil.clear(chunk);
  BufferUtil.clear(buffer);
  result=gen.generate(null,chunk,buffer,content1,null);
  assertEquals(HttpGenerator.Result.FLUSH,result);
  assertEquals(HttpGenerator.State.COMMITTED,gen.getState());
  assertEquals("\r\n10\r\n",BufferUtil.toString(chunk));
  assertEquals(" jumped over the",BufferUtil.toString(buffer));
  assertEquals(11,content1.remaining());
  body+=BufferUtil.toString(chunk) + BufferUtil.toString(buffer);
  BufferUtil.clear(chunk);
  BufferUtil.clear(buffer);
  result=gen.generate(null,chunk,buffer,content1,null);
  assertEquals(HttpGenerator.Result.OK,result);
  assertEquals(HttpGenerator.State.COMMITTED,gen.getState());
  assertEquals("",BufferUtil.toString(chunk));
  assertEquals(" lazy dog. ",BufferUtil.toString(buffer));
  assertEquals(0,content1.remaining());
  result=gen.generate(null,chunk,buffer,null,Action.COMPLETE);
  assertEquals(HttpGenerator.Result.FLUSH,result);
  assertEquals(HttpGenerator.State.COMPLETING,gen.getState());
  assertEquals("\r\nB\r\n",BufferUtil.toString(chunk));
  assertEquals(" lazy dog. ",BufferUtil.toString(buffer));
  body+=BufferUtil.toString(chunk) + BufferUtil.toString(buffer);
  BufferUtil.clear(chunk);
  BufferUtil.clear(buffer);
  result=gen.generate(null,chunk,buffer,null,null);
  assertEquals(HttpGenerator.Result.FLUSH,result);
  assertEquals(HttpGenerator.State.END,gen.getState());
  assertEquals("\r\n0\r\n\r\n",BufferUtil.toString(chunk));
  assertEquals(0,buffer.remaining());
  BufferUtil.toString(chunk);
  BufferUtil.clear(chunk);
  result=gen.generate(null,chunk,buffer,null,null);
  assertEquals(HttpGenerator.Result.OK,result);
  assertEquals(HttpGenerator.State.END,gen.getState());
  assertEquals(59,gen.getContentWritten());
  assertThat(head,containsString("POST /index.html HTTP/1.1"));
  assertThat(head,containsString("Host: something"));
  assertThat(head,not(containsString("Content-Length")));
  assertThat(head,containsString("Transfer-Encoding: chunked"));
  assertTrue(head.endsWith("\r\n\r\n10\r\n"));
  assertThat(body,containsString("dog"));
}

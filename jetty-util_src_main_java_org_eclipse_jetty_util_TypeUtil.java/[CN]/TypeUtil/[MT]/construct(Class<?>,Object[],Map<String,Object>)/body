{
  Objects.requireNonNull(klass,"Class cannot be null");
  Objects.requireNonNull(namedArgMap,"Named Argument Map cannot be null");
  for (  Constructor<?> constructor : klass.getConstructors()) {
    if (arguments == null) {
      if (constructor.getParameterTypes().length != 0)       continue;
    }
 else     if (constructor.getParameterTypes().length != arguments.length)     continue;
    try {
      Annotation[][] parameterAnnotations=constructor.getParameterAnnotations();
      if (arguments == null || arguments.length == 0) {
        if (LOG.isDebugEnabled())         LOG.debug("Constructor has no arguments");
        return constructor.newInstance(arguments);
      }
 else       if (parameterAnnotations == null || parameterAnnotations.length == 0) {
        if (LOG.isDebugEnabled())         LOG.debug("Constructor has no parameter annotations");
        return constructor.newInstance(arguments);
      }
 else {
        Object[] swizzled=new Object[arguments.length];
        int count=0;
        for (        Annotation[] annotations : parameterAnnotations) {
          for (          Annotation annotation : annotations) {
            if (annotation instanceof Name) {
              Name param=(Name)annotation;
              if (namedArgMap.containsKey(param.value())) {
                if (LOG.isDebugEnabled())                 LOG.debug("placing named {} in position {}",param.value(),count);
                swizzled[count]=namedArgMap.get(param.value());
              }
 else {
                if (LOG.isDebugEnabled())                 LOG.debug("placing {} in position {}",arguments[count],count);
                swizzled[count]=arguments[count];
              }
              ++count;
            }
 else {
              if (LOG.isDebugEnabled())               LOG.debug("passing on annotation {}",annotation);
            }
          }
        }
        return constructor.newInstance(swizzled);
      }
    }
 catch (    InstantiationException|IllegalAccessException|IllegalArgumentException e) {
      LOG.ignore(e);
    }
  }
  throw new NoSuchMethodException("<init>");
}

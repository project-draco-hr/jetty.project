{
  Method[] methods=oClass.getMethods();
  for (int c=0; methods != null && c < methods.length; c++) {
    if (!methods[c].getName().equals(method))     continue;
    if (methods[c].getParameterTypes().length != arg.length)     continue;
    if (Modifier.isStatic(methods[c].getModifiers()) != (obj == null))     continue;
    if ((obj == null) && methods[c].getDeclaringClass() != oClass)     continue;
    try {
      return methods[c].invoke(obj,arg);
    }
 catch (    IllegalAccessException e) {
      LOG.ignore(e);
    }
catch (    IllegalArgumentException e) {
      LOG.ignore(e);
    }
  }
  throw new NoSuchMethodException(method);
}

{
  List<PathWatchEvent> notifiableEvents=new ArrayList<PathWatchEvent>();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Starting java.nio file watching with {}",watchService);
  }
  while (watchService != null && thread == Thread.currentThread()) {
    WatchKey key=null;
    try {
      if (pendingEvents.isEmpty()) {
        if (NOISY_LOG.isDebugEnabled())         NOISY_LOG.debug("Waiting for take()");
        key=watchService.take();
      }
 else {
        if (NOISY_LOG.isDebugEnabled())         NOISY_LOG.debug("Waiting for poll({}, {})",updateQuietTimeDuration,updateQuietTimeUnit);
        key=watchService.poll(updateQuietTimeDuration,updateQuietTimeUnit);
        if (key == null) {
          long now=System.currentTimeMillis();
          for (          Path path : new HashSet<Path>(pendingEvents.keySet())) {
            PathPendingEvents pending=pendingEvents.get(path);
            if (pending.isQuiet(now,updateQuietTimeDuration,updateQuietTimeUnit)) {
              for (              PathWatchEvent p : pending.getEvents()) {
                notifiableEvents.add(p);
              }
              pendingEvents.remove(path);
            }
          }
        }
      }
    }
 catch (    ClosedWatchServiceException e) {
      return;
    }
catch (    InterruptedException e) {
      if (isRunning()) {
        LOG.warn(e);
      }
 else {
        LOG.ignore(e);
      }
      return;
    }
    if (key != null) {
      Config config=keys.get(key);
      if (config == null) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("WatchKey not recognized: {}",key);
        }
        continue;
      }
      for (      WatchEvent<?> event : key.pollEvents()) {
        @SuppressWarnings("unchecked") WatchEvent.Kind<Path> kind=(Kind<Path>)event.kind();
        WatchEvent<Path> ev=cast(event);
        Path name=ev.context();
        Path child=config.dir.resolve(name);
        if (kind == ENTRY_CREATE) {
          if (Files.isDirectory(child,LinkOption.NOFOLLOW_LINKS)) {
            try {
              prepareConfig(config.asSubConfig(child));
            }
 catch (            IOException e) {
              LOG.warn(e);
            }
          }
 else           if (config.matches(child)) {
            addToPendingList(child,new PathWatchEvent(child,ev));
          }
        }
 else         if (config.matches(child)) {
          addToPendingList(child,new PathWatchEvent(child,ev));
        }
      }
    }
    notifyOnPathWatchEvents(notifiableEvents);
    notifiableEvents.clear();
    if (key != null && !key.reset()) {
      keys.remove(key);
      if (keys.isEmpty()) {
        return;
      }
    }
  }
}

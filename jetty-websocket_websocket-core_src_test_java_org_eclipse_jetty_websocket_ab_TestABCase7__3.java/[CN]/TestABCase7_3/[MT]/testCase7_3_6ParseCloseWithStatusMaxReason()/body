{
  StringBuilder message=new StringBuilder();
  for (int i=0; i < 124; ++i) {
    message.append("*");
  }
  byte[] messageBytes=message.toString().getBytes();
  ByteBuffer expected=ByteBuffer.allocate(132);
  expected.put(new byte[]{(byte)0x88});
  byte b=0x00;
  b|=(messageBytes.length + 2) & 0x7F;
  expected.put(b);
  expected.putShort((short)1000);
  expected.put(messageBytes);
  expected.flip();
  Parser parser=new Parser(policy);
  FrameParseCapture capture=new FrameParseCapture();
  parser.addListener(capture);
  parser.parse(expected);
  Assert.assertEquals("error on invalid close payload",1,capture.getErrorCount(WebSocketException.class));
  WebSocketException known=capture.getErrors().get(0);
  Assert.assertTrue("invalid payload should be in message",known.getMessage().contains("invalid payload length"));
}

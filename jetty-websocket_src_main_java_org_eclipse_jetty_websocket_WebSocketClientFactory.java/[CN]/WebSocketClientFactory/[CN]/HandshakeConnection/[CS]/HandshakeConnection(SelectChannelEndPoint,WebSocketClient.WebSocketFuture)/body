{
  super(endpoint,System.currentTimeMillis());
  _endp=endpoint;
  _future=future;
  byte[] bytes=new byte[16];
  __random.nextBytes(bytes);
  _key=new String(B64Code.encode(bytes));
  Buffers buffers=new SimpleBuffers(_buffers.getBuffer(),null);
  _parser=new HttpParser(buffers,_endp,new HttpParser.EventHandler(){
    @Override public void startResponse(    Buffer version,    int status,    Buffer reason) throws IOException {
      if (status != 101) {
        _error="Bad response status " + status + " "+ reason;
        _endp.close();
      }
    }
    @Override public void parsedHeader(    Buffer name,    Buffer value) throws IOException {
      if (__ACCEPT.equals(name))       _accept=value.toString();
    }
    @Override public void startRequest(    Buffer method,    Buffer url,    Buffer version) throws IOException {
      if (_error == null)       _error="Bad response: " + method + " "+ url+ " "+ version;
      _endp.close();
    }
    @Override public void content(    Buffer ref) throws IOException {
      if (_error == null)       _error="Bad response. " + ref.length() + "B of content?";
      _endp.close();
    }
  }
);
  String path=_future.getURI().getPath();
  if (path == null || path.length() == 0)   path="/";
  String origin=future.getOrigin();
  String request="GET " + path + " HTTP/1.1\r\n"+ "Host: "+ future.getURI().getHost()+ ":"+ _future.getURI().getPort()+ "\r\n"+ "Upgrade: websocket\r\n"+ "Connection: Upgrade\r\n"+ "Sec-WebSocket-Key: "+ _key+ "\r\n"+ (origin == null ? "" : "Origin: " + origin + "\r\n")+ "Sec-WebSocket-Version: "+ WebSocketConnectionD13.VERSION+ "\r\n";
  if (future.getProtocol() != null)   request+="Sec-WebSocket-Protocol: " + future.getProtocol() + "\r\n";
  if (future.getCookies() != null && future.getCookies().size() > 0) {
    for (    String cookie : future.getCookies().keySet())     request+="Cookie: " + QuotedStringTokenizer.quoteIfNeeded(cookie,HttpFields.__COOKIE_DELIM) + "="+ QuotedStringTokenizer.quoteIfNeeded(future.getCookies().get(cookie),HttpFields.__COOKIE_DELIM)+ "\r\n";
  }
  request+="\r\n";
  try {
    Buffer handshake=new ByteArrayBuffer(request,false);
    int len=handshake.length();
    if (len != _endp.flush(handshake))     throw new IOException("incomplete");
  }
 catch (  IOException e) {
    future.handshakeFailed(e);
  }
}

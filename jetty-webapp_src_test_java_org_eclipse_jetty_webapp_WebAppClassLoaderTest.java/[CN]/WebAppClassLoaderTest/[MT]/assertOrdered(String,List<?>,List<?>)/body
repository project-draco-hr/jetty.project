{
  boolean mismatch=expectedList.size() != actualList.size();
  List<Integer> badEntries=new ArrayList<>();
  int min=Math.min(expectedList.size(),actualList.size());
  int max=Math.max(expectedList.size(),actualList.size());
  for (int i=0; i < min; i++) {
    if (!expectedList.get(i).equals(actualList.get(i))) {
      badEntries.add(i);
    }
  }
  for (int i=min; i < max; i++) {
    badEntries.add(i);
  }
  if (mismatch || badEntries.size() > 0) {
    StringWriter message=new StringWriter();
    PrintWriter err=new PrintWriter(message);
    err.printf("%s: Assert Contains (Ordered)",msg);
    if (mismatch) {
      err.print(" [size mismatch]");
    }
    if (badEntries.size() >= 0) {
      err.printf(" [%d entries not matched]",badEntries.size());
    }
    err.println();
    err.printf("Actual Entries (size: %d)%n",actualList.size());
    for (int i=0; i < actualList.size(); i++) {
      Object actualObj=actualList.get(i);
      char indicator=badEntries.contains(i) ? '>' : ' ';
      err.printf("%s[%d] %s%n",indicator,i,actualObj == null ? "<null>" : actualObj.toString());
    }
    err.printf("Expected Entries (size: %d)%n",expectedList.size());
    for (int i=0; i < expectedList.size(); i++) {
      Object expectedObj=expectedList.get(i).toString();
      char indicator=badEntries.contains(i) ? '>' : ' ';
      err.printf("%s[%d] %s%n",indicator,i,expectedObj == null ? "<null>" : expectedObj.toString());
    }
    err.flush();
    Assert.fail(message.toString());
  }
}

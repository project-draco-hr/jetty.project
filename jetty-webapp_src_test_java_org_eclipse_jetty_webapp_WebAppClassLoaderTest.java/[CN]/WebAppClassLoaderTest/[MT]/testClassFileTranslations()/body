{
  final List<Object> results=new ArrayList<Object>();
  _loader.addClassFileTransformer(new ClassFileTransformer(){
    public byte[] transform(    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws IllegalClassFormatException {
      results.add(loader);
      byte[] b=new byte[classfileBuffer.length];
      for (int i=0; i < classfileBuffer.length; i++)       b[i]=(byte)(classfileBuffer[i] ^ 0xff);
      return b;
    }
  }
);
  _loader.addClassFileTransformer(new ClassFileTransformer(){
    public byte[] transform(    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws IllegalClassFormatException {
      results.add(className);
      byte[] b=new byte[classfileBuffer.length];
      for (int i=0; i < classfileBuffer.length; i++)       b[i]=(byte)(classfileBuffer[i] ^ 0xff);
      return b;
    }
  }
);
  _context.setParentLoaderPriority(false);
  assertTrue(canLoadClass("org.acme.webapp.ClassInJarA"));
  assertTrue(canLoadClass("org.acme.webapp.ClassInJarB"));
  assertTrue(canLoadClass("org.acme.other.ClassInClassesC"));
  assertTrue(canLoadClass("java.lang.String"));
  assertTrue(cantLoadClass("org.eclipse.jetty.webapp.Configuration"));
  Iterator<Object> iter=results.iterator();
  assertEquals(_loader,iter.next());
  assertEquals("org.acme.webapp.ClassInJarA",iter.next());
  assertEquals(_loader,iter.next());
  assertEquals("org.acme.webapp.ClassInJarB",iter.next());
  assertEquals(_loader,iter.next());
  assertEquals("org.acme.other.ClassInClassesC",iter.next());
  assertFalse(iter.hasNext());
}

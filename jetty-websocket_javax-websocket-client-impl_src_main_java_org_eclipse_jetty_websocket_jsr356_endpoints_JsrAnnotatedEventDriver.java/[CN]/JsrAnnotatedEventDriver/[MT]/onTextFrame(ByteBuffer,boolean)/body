{
  if (LOG.isDebugEnabled()) {
    LOG.debug("onTextFrame({}, {})",BufferUtil.toDetailString(buffer),fin);
    LOG.debug("events.hasText={}",events.hasText());
    LOG.debug("events.hasTextStream={}",events.hasTextStream());
  }
  boolean handled=false;
  if (events.hasText()) {
    handled=true;
    if (events.isTextPartialSupported()) {
      LOG.debug("Partial Text Message: fin={}",fin);
      try {
        String text=BufferUtil.toUTF8String(buffer);
        events.callText(jsrsession.getAsyncRemote(),websocket,text,fin);
      }
 catch (      DecodeException e) {
        onFatalError(e);
      }
      return;
    }
 else {
      if (activeMessage == null) {
        LOG.debug("Whole Text Message");
        activeMessage=new SimpleTextMessage(this);
      }
    }
  }
  if (events.hasTextStream()) {
    handled=true;
    if (activeMessage == null) {
      LOG.debug("Text Message Writer");
      final MessageReader stream=new MessageReader(new MessageInputStream(session.getConnection()));
      activeMessage=stream;
      dispatch(new Runnable(){
        @Override public void run(){
          try {
            events.callTextStream(jsrsession.getAsyncRemote(),websocket,stream);
          }
 catch (          DecodeException|IOException e) {
            onFatalError(e);
          }
        }
      }
);
    }
  }
  LOG.debug("handled = {}",handled);
  if (handled && (activeMessage != null)) {
    appendMessage(buffer,fin);
  }
}

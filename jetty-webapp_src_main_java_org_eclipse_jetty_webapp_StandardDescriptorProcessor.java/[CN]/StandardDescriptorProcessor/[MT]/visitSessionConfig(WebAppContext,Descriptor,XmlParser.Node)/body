{
  XmlParser.Node tNode=node.get("session-timeout");
  if (tNode != null) {
    int timeout=Integer.parseInt(tNode.toString(false,true));
    context.getSessionHandler().getSessionManager().setMaxInactiveInterval(timeout * 60);
  }
  Iterator iter=node.iterator("tracking-mode");
  if (iter.hasNext()) {
    Set<SessionTrackingMode> modes=null;
    Origin o=context.getMetaData().getOrigin("session.tracking-mode");
switch (o) {
case NotSet:
case WebDefaults:
{
        modes=new HashSet<SessionTrackingMode>();
        context.getMetaData().setOrigin("session.tracking-mode",descriptor);
        break;
      }
case WebXml:
case WebFragment:
case WebOverride:
{
      if (descriptor instanceof OverrideDescriptor)       modes=new HashSet<SessionTrackingMode>();
 else       modes=new HashSet<SessionTrackingMode>(context.getSessionHandler().getSessionManager().getEffectiveSessionTrackingModes());
      context.getMetaData().setOrigin("session.tracking-mode",descriptor);
      break;
    }
}
while (iter.hasNext()) {
  XmlParser.Node mNode=(XmlParser.Node)iter.next();
  String trackMode=mNode.toString(false,true);
  modes.add(SessionTrackingMode.valueOf(trackMode));
}
context.getSessionHandler().getSessionManager().setSessionTrackingModes(modes);
}
XmlParser.Node cookieConfig=node.get("cookie-config");
if (cookieConfig != null) {
String name=cookieConfig.getString("name",false,true);
if (name != null) {
  Origin o=context.getMetaData().getOrigin("cookie-config.name");
switch (o) {
case NotSet:
{
      context.getSessionHandler().getSessionManager().getSessionCookieConfig().setName(name);
      context.getMetaData().setOrigin("cookie-config.name",descriptor);
      break;
    }
case WebXml:
case WebDefaults:
case WebOverride:
{
    if (!(descriptor instanceof FragmentDescriptor)) {
      context.getSessionHandler().getSessionManager().getSessionCookieConfig().setName(name);
      context.getMetaData().setOrigin("cookie-config.name",descriptor);
    }
    break;
  }
case WebFragment:
{
  if (!context.getSessionHandler().getSessionManager().getSessionCookieConfig().getName().equals(name))   throw new IllegalStateException("Conflicting cookie-config name " + name + " in "+ descriptor.getResource());
  break;
}
}
}
String domain=cookieConfig.getString("domain",false,true);
if (domain != null) {
Origin o=context.getMetaData().getOrigin("cookie-config.domain");
switch (o) {
case NotSet:
{
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setDomain(domain);
context.getMetaData().setOrigin("cookie-config.domain",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setDomain(domain);
context.getMetaData().setOrigin("cookie-config.domain",descriptor);
}
break;
}
case WebFragment:
{
if (!context.getSessionHandler().getSessionManager().getSessionCookieConfig().getDomain().equals(domain)) throw new IllegalStateException("Conflicting cookie-config domain " + domain + " in "+ descriptor.getResource());
break;
}
}
}
String path=cookieConfig.getString("path",false,true);
if (path != null) {
Origin o=context.getMetaData().getOrigin("cookie-config.path");
switch (o) {
case NotSet:
{
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setPath(path);
context.getMetaData().setOrigin("cookie-config.path",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setPath(path);
context.getMetaData().setOrigin("cookie-config.path",descriptor);
}
break;
}
case WebFragment:
{
if (!context.getSessionHandler().getSessionManager().getSessionCookieConfig().getPath().equals(path)) throw new IllegalStateException("Conflicting cookie-config path " + path + " in "+ descriptor.getResource());
break;
}
}
}
String comment=cookieConfig.getString("comment",false,true);
if (comment != null) {
Origin o=context.getMetaData().getOrigin("cookie-config.comment");
switch (o) {
case NotSet:
{
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setComment(comment);
context.getMetaData().setOrigin("cookie-config.comment",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setComment(comment);
context.getMetaData().setOrigin("cookie-config.comment",descriptor);
}
break;
}
case WebFragment:
{
if (!context.getSessionHandler().getSessionManager().getSessionCookieConfig().getComment().equals(comment)) throw new IllegalStateException("Conflicting cookie-config comment " + comment + " in "+ descriptor.getResource());
break;
}
}
}
tNode=cookieConfig.get("http-only");
if (tNode != null) {
boolean httpOnly=Boolean.parseBoolean(tNode.toString(false,true));
Origin o=context.getMetaData().getOrigin("cookie-config.http-only");
switch (o) {
case NotSet:
{
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setHttpOnly(httpOnly);
context.getMetaData().setOrigin("cookie-config.http-only",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setHttpOnly(httpOnly);
context.getMetaData().setOrigin("cookie-config.http-only",descriptor);
}
break;
}
case WebFragment:
{
if (context.getSessionHandler().getSessionManager().getSessionCookieConfig().isHttpOnly() != httpOnly) throw new IllegalStateException("Conflicting cookie-config http-only " + httpOnly + " in "+ descriptor.getResource());
break;
}
}
}
tNode=cookieConfig.get("secure");
if (tNode != null) {
boolean secure=Boolean.parseBoolean(tNode.toString(false,true));
Origin o=context.getMetaData().getOrigin("cookie-config.secure");
switch (o) {
case NotSet:
{
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setSecure(secure);
context.getMetaData().setOrigin("cookie-config.secure",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setSecure(secure);
context.getMetaData().setOrigin("cookie-config.secure",descriptor);
}
break;
}
case WebFragment:
{
if (context.getSessionHandler().getSessionManager().getSessionCookieConfig().isSecure() != secure) throw new IllegalStateException("Conflicting cookie-config secure " + secure + " in "+ descriptor.getResource());
break;
}
}
}
tNode=cookieConfig.get("max-age");
if (tNode != null) {
int maxAge=Integer.parseInt(tNode.toString(false,true));
Origin o=context.getMetaData().getOrigin("cookie-config.max-age");
switch (o) {
case NotSet:
{
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setMaxAge(maxAge);
context.getMetaData().setOrigin("cookie-config.max-age",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
context.getSessionHandler().getSessionManager().getSessionCookieConfig().setMaxAge(maxAge);
context.getMetaData().setOrigin("cookie-config.max-age",descriptor);
}
break;
}
case WebFragment:
{
if (context.getSessionHandler().getSessionManager().getSessionCookieConfig().getMaxAge() != maxAge) throw new IllegalStateException("Conflicting cookie-config max-age " + maxAge + " in "+ descriptor.getResource());
break;
}
}
}
}
}

{
  XmlParser.Node method=node.get("auth-method");
  if (method != null) {
    Origin o=_metaData.getOrigin("auth-method");
switch (o) {
case NotSet:
{
        _securityHandler.setAuthMethod(method.toString(false,true));
        _metaData.setOrigin("auth-method",descriptor);
        break;
      }
case WebXml:
case WebDefaults:
case WebOverride:
{
      if (!(descriptor instanceof FragmentDescriptor)) {
        _securityHandler.setAuthMethod(method.toString(false,true));
        _metaData.setOrigin("auth-method",descriptor);
      }
      break;
    }
case WebFragment:
{
    if (!_securityHandler.getAuthMethod().equals(method.toString(false,true)))     throw new IllegalStateException("Conflicting auth-method value in " + descriptor.getResource());
    break;
  }
}
XmlParser.Node name=node.get("realm-name");
String nameStr=(name == null ? "default" : name.toString(false,true));
o=_metaData.getOrigin("realm-name");
switch (o) {
case NotSet:
{
  _securityHandler.setRealmName(nameStr);
  _metaData.setOrigin("realm-name",descriptor);
  break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
  _securityHandler.setRealmName(nameStr);
  _metaData.setOrigin("realm-name",descriptor);
}
break;
}
case WebFragment:
{
if (!_securityHandler.getRealmName().equals(nameStr)) throw new IllegalStateException("Conflicting realm-name value in " + descriptor.getResource());
break;
}
}
if (Constraint.__FORM_AUTH.equals(_securityHandler.getAuthMethod())) {
XmlParser.Node formConfig=node.get("form-login-config");
if (formConfig != null) {
String loginPageName=null;
XmlParser.Node loginPage=formConfig.get("form-login-page");
if (loginPage != null) loginPageName=loginPage.toString(false,true);
String errorPageName=null;
XmlParser.Node errorPage=formConfig.get("form-error-page");
if (errorPage != null) errorPageName=errorPage.toString(false,true);
o=_metaData.getOrigin("form-login-page");
switch (o) {
case NotSet:
{
_securityHandler.setInitParameter(FormAuthenticator.__FORM_LOGIN_PAGE,loginPageName);
_metaData.setOrigin("form-login-page",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
_securityHandler.setInitParameter(FormAuthenticator.__FORM_LOGIN_PAGE,loginPageName);
_metaData.setOrigin("form-login-page",descriptor);
}
break;
}
case WebFragment:
{
if (!_securityHandler.getInitParameter(FormAuthenticator.__FORM_LOGIN_PAGE).equals(loginPageName)) throw new IllegalStateException("Conflicting form-login-page value in " + descriptor.getResource());
break;
}
}
o=_metaData.getOrigin("form-error-page");
switch (o) {
case NotSet:
{
_securityHandler.setInitParameter(FormAuthenticator.__FORM_ERROR_PAGE,errorPageName);
_metaData.setOrigin("form-error-page",descriptor);
break;
}
case WebXml:
case WebDefaults:
case WebOverride:
{
if (!(descriptor instanceof FragmentDescriptor)) {
_securityHandler.setInitParameter(FormAuthenticator.__FORM_ERROR_PAGE,errorPageName);
_metaData.setOrigin("form-error-page",descriptor);
}
break;
}
case WebFragment:
{
if (!_securityHandler.getInitParameter(FormAuthenticator.__FORM_ERROR_PAGE).equals(errorPageName)) throw new IllegalStateException("Conflicting form-error-page value in " + descriptor.getResource());
break;
}
}
}
 else {
throw new IllegalStateException("!form-login-config");
}
}
}
}

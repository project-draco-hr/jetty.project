{
  _requests++;
  boolean persistent;
switch (_version) {
case HTTP_0_9:
    persistent=false;
  break;
case HTTP_1_0:
persistent=_request.getHttpFields().contains(HttpHeader.CONNECTION,HttpHeaderValue.KEEP_ALIVE.asString());
if (persistent) _response.getHttpFields().add(HttpHeader.CONNECTION,HttpHeaderValue.KEEP_ALIVE);
if (getServer().getSendDateHeader()) _response.getHttpFields().putDateField(HttpHeader.DATE.toString(),_request.getTimeStamp());
break;
case HTTP_1_1:
persistent=!_request.getHttpFields().contains(HttpHeader.CONNECTION,HttpHeaderValue.CLOSE.asString());
if (!persistent) _response.getHttpFields().add(HttpHeader.CONNECTION,HttpHeaderValue.CLOSE);
if (getServer().getSendDateHeader()) _response.getHttpFields().putDateField(HttpHeader.DATE.toString(),_request.getTimeStamp());
if (!_host) {
_response.sendError(Response.SC_BAD_REQUEST,"No Host Header",null);
return true;
}
if (_expect) {
_response.sendError(Response.SC_EXPECTATION_FAILED,null,null);
return true;
}
break;
default :
throw new IllegalStateException();
}
_request.setPersistent(persistent);
if (_expect100Continue) return true;
return false;
}

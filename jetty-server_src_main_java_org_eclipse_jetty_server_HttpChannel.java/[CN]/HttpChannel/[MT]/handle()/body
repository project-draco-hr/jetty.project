{
  if (LOG.isDebugEnabled())   LOG.debug("{} handle {} ",this,_request.getHttpURI());
  HttpChannelState.Action action=_state.handling();
  loop:   while (!getServer().isStopped()) {
    boolean error=false;
    try {
      if (LOG.isDebugEnabled())       LOG.debug("{} action {}",this,action);
switch (action) {
case TERMINATED:
case WAIT:
        break loop;
case DISPATCH:
{
        if (!_request.hasMetaData())         throw new IllegalStateException("state=" + _state);
        _request.setHandled(false);
        _response.getHttpOutput().reopen();
        _request.setDispatcherType(DispatcherType.REQUEST);
        List<HttpConfiguration.Customizer> customizers=_configuration.getCustomizers();
        if (!customizers.isEmpty()) {
          for (          HttpConfiguration.Customizer customizer : customizers)           customizer.customize(getConnector(),_configuration,_request);
        }
        getServer().handle(this);
        break;
      }
case ASYNC_DISPATCH:
{
      _request.setHandled(false);
      _response.getHttpOutput().reopen();
      _request.setDispatcherType(DispatcherType.ASYNC);
      getServer().handleAsync(this);
      break;
    }
case ERROR_DISPATCH:
{
    _request.setHandled(false);
    _response.getHttpOutput().reopen();
    _request.setDispatcherType(DispatcherType.ERROR);
    Throwable ex=_state.getAsyncContextEvent().getThrowable();
    String reason;
    if (ex == null || ex instanceof TimeoutException) {
      reason="Async Timeout";
    }
 else {
      reason="Async Exception";
      _request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,ex);
    }
    _request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,500);
    _request.setAttribute(RequestDispatcher.ERROR_MESSAGE,reason);
    _request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,_request.getRequestURI());
    _response.setStatusWithReason(500,reason);
    ErrorHandler eh=ErrorHandler.getErrorHandler(getServer(),_state.getContextHandler());
    if (eh instanceof ErrorHandler.ErrorPageMapper) {
      String error_page=((ErrorHandler.ErrorPageMapper)eh).getErrorPage((HttpServletRequest)_state.getAsyncContextEvent().getSuppliedRequest());
      if (error_page != null)       _state.getAsyncContextEvent().setDispatchPath(error_page);
    }
    getServer().handleAsync(this);
    break;
  }
case READ_CALLBACK:
{
  ContextHandler handler=_state.getContextHandler();
  if (handler != null)   handler.handle(_request.getHttpInput());
 else   _request.getHttpInput().run();
  break;
}
case WRITE_CALLBACK:
{
ContextHandler handler=_state.getContextHandler();
if (handler != null) handler.handle(_response.getHttpOutput());
 else _response.getHttpOutput().run();
break;
}
case ASYNC_ERROR:
{
_state.onError();
break;
}
case COMPLETE:
{
try {
if (!_response.isCommitted() && !_request.isHandled()) _response.sendError(404);
 else _response.closeOutput();
}
  finally {
_state.onComplete();
}
_request.setHandled(true);
onCompleted();
break loop;
}
default :
{
throw new IllegalStateException("state=" + _state);
}
}
}
 catch (EofException|QuietServletException|BadMessageException e) {
error=true;
LOG.debug(e);
_state.error(e);
_request.setHandled(true);
handleException(e);
}
catch (Exception e) {
error=true;
if (_connector.isStarted()) LOG.warn(String.valueOf(_request.getHttpURI()),e);
 else LOG.debug(String.valueOf(_request.getHttpURI()),e);
_state.error(e);
_request.setHandled(true);
handleException(e);
}
catch (Throwable e) {
if ("ContinuationThrowable".equals(e.getClass().getSimpleName())) LOG.ignore(e);
 else {
error=true;
if (_connector.isStarted()) LOG.warn(String.valueOf(_request.getHttpURI()),e);
 else LOG.debug(String.valueOf(_request.getHttpURI()),e);
LOG.warn(String.valueOf(_request.getHttpURI()),e);
_state.error(e);
_request.setHandled(true);
handleException(e);
}
}
if (error && _state.isAsyncStarted()) _state.errorComplete();
action=_state.unhandle();
}
if (LOG.isDebugEnabled()) LOG.debug("{} handle exit, result {}",this,action);
boolean suspended=action == Action.WAIT;
return !suspended;
}

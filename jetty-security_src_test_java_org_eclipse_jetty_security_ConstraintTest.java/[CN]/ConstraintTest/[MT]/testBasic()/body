{
  List<ConstraintMapping> list=new ArrayList<>(_security.getConstraintMappings());
  Constraint constraint6=new Constraint();
  constraint6.setAuthenticate(true);
  constraint6.setName("omit POST and GET");
  constraint6.setRoles(new String[]{"user"});
  ConstraintMapping mapping6=new ConstraintMapping();
  mapping6.setPathSpec("/omit/*");
  mapping6.setConstraint(constraint6);
  mapping6.setMethodOmissions(new String[]{"GET","HEAD"});
  list.add(mapping6);
  Constraint constraint7=new Constraint();
  constraint7.setAuthenticate(true);
  constraint7.setName("non-omitted GET");
  constraint7.setRoles(new String[]{"administrator"});
  ConstraintMapping mapping7=new ConstraintMapping();
  mapping7.setPathSpec("/omit/*");
  mapping7.setConstraint(constraint7);
  mapping7.setMethod("GET");
  list.add(mapping7);
  Constraint constraint8=new Constraint();
  constraint8.setAuthenticate(true);
  constraint8.setName("non specific");
  constraint8.setRoles(new String[]{"foo"});
  ConstraintMapping mapping8=new ConstraintMapping();
  mapping8.setPathSpec("/omit/*");
  mapping8.setConstraint(constraint8);
  list.add(mapping8);
  Set<String> knownRoles=new HashSet<>();
  knownRoles.add("user");
  knownRoles.add("administrator");
  knownRoles.add("foo");
  _security.setConstraintMappings(list,knownRoles);
  _security.setAuthenticator(new BasicAuthenticator());
  _server.start();
  String response;
  response=_connector.getResponses("GET /ctx/noauth/info HTTP/1.0\r\n\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 200 OK"));
  response=_connector.getResponses("GET /ctx/forbid/info HTTP/1.0\r\n\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 403 Forbidden"));
  response=_connector.getResponses("GET /ctx/auth/info HTTP/1.0\r\n\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 401 Unauthorized"));
  Assert.assertThat(response,Matchers.containsString("WWW-Authenticate: basic realm=\"TestRealm\""));
  response=_connector.getResponses("GET /ctx/auth/info HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("user:wrong") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 401 Unauthorized"));
  Assert.assertThat(response,Matchers.containsString("WWW-Authenticate: basic realm=\"TestRealm\""));
  response=_connector.getResponses("GET /ctx/auth/info HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("user:password") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 200 OK"));
  response=_connector.getResponses("GET /ctx/admin/info HTTP/1.0\r\n\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 401 Unauthorized"));
  Assert.assertThat(response,Matchers.containsString("WWW-Authenticate: basic realm=\"TestRealm\""));
  response=_connector.getResponses("GET /ctx/admin/info HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("admin:wrong") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 401 Unauthorized"));
  Assert.assertThat(response,Matchers.containsString("WWW-Authenticate: basic realm=\"TestRealm\""));
  response=_connector.getResponses("GET /ctx/admin/info HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("user:password") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 403 "));
  Assert.assertThat(response,Matchers.containsString("!role"));
  response=_connector.getResponses("GET /ctx/admin/info HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("admin:password") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 200 OK"));
  response=_connector.getResponses("GET /ctx/admin/relax/info HTTP/1.0\r\n\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 200 OK"));
  response=_connector.getResponses("GET /ctx/omit/x HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("admin:password") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 200 OK"));
  response=_connector.getResponses("POST /ctx/omit/x HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("user2:password") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 200 OK"));
  response=_connector.getResponses("POST /ctx/omit/x HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("user3:password") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 200 OK"));
  response=_connector.getResponses("HEAD /ctx/omit/x HTTP/1.0\r\n" + "Authorization: Basic " + B64Code.encode("user2:password") + "\r\n"+ "\r\n");
  Assert.assertThat(response,Matchers.startsWith("HTTP/1.1 403 "));
}

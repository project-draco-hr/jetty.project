{
  PipedOutputStream src=new PipedOutputStream();
  PipedInputStream stream=new PipedInputStream(src){
    @Override public synchronized int read(    byte[] b,    int off,    int len) throws IOException {
      if (available() == 0)       return 0;
      return super.read(b,off,len);
    }
  }
;
  HttpTester.Input in=HttpTester.from(stream);
  src.write(("HTTP/1.1 200 OK\r\n" + "Header: value\r\n" + "Transfer-Encoding: chunked\r\n"+ "\r\n"+ "A\r\n"+ "0123456789\r\n"+ "6\r\n"+ "ABC").getBytes(StandardCharsets.ISO_8859_1));
  HttpTester.Response response=HttpTester.parseResponse(in);
  assertThat(response,nullValue());
  src.write(("DEF\r\n" + "0\r\n" + "\r\n"+ "HTTP/1.1 400 OK\r\n"+ "Next: response\r\n"+ "Content-Length: 16\r\n"+ "\r\n"+ "0123456789").getBytes(StandardCharsets.ISO_8859_1));
  response=HttpTester.parseResponse(in);
  assertThat(response.getVersion(),is(HttpVersion.HTTP_1_1));
  assertThat(response.getStatus(),is(200));
  assertThat(response.getReason(),is("OK"));
  assertThat(response.get("Header"),is("value"));
  assertThat(response.getContent(),is("0123456789ABCDEF"));
  response=HttpTester.parseResponse(in);
  assertThat(response,nullValue());
  src.write(("ABCDEF").getBytes(StandardCharsets.ISO_8859_1));
  response=HttpTester.parseResponse(in);
  assertThat(response.getVersion(),is(HttpVersion.HTTP_1_1));
  assertThat(response.getStatus(),is(400));
  assertThat(response.getReason(),is("OK"));
  assertThat(response.get("Next"),is("response"));
  assertThat(response.getContent(),is("0123456789ABCDEF"));
}

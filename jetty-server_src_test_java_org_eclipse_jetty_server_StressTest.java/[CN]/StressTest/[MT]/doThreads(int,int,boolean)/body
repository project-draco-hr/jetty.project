{
  final Throwable[] throwables=new Throwable[threadCount];
  final Thread[] threads=new Thread[threadCount];
  try {
    for (int i=0; i < threadCount; i++) {
      final int id=i;
      final String name="T" + i;
      Thread.sleep(_random.nextInt(100));
      threads[i]=new Thread(){
        @Override public void run(){
          try {
            doLoops(id,name,loops,persistent);
          }
 catch (          Throwable th) {
            th.printStackTrace();
            throwables[id]=th;
          }
        }
      }
;
    }
    _loops=new AtomicInteger[threadCount];
    for (int i=0; i < threadCount; i++) {
      _loops[i]=new AtomicInteger(0);
      threads[i].start();
    }
    String last=null;
    int same=0;
    while (true) {
      Thread.sleep(1000L);
      int finished=0;
      int errors=0;
      int min=loops;
      int max=0;
      int total=0;
      for (int i=0; i < threadCount; i++) {
        int l=_loops[i].get();
        if (l < 0) {
          errors++;
          total-=l;
        }
 else {
          if (l < min)           min=l;
          if (l > max)           max=l;
          total+=l;
          if (l == loops)           finished++;
        }
      }
      String status="min/ave/max/target=" + min + "/"+ (total / threadCount)+ "/"+ max+ "/"+ loops+ " errors/finished/loops="+ errors+ "/"+ finished+ "/"+ threadCount+ " idle/threads="+ (_threads.getIdleThreads())+ "/"+ _threads.getThreads();
      if (status.equals(last)) {
        if (same++ > 5) {
          System.err.println("STALLED!!!");
          System.err.println(_server.getThreadPool().toString());
          ((ServerConnector)(_server.getConnectors()[0])).dump();
          Thread.sleep(5000);
          System.exit(1);
        }
      }
 else       same=0;
      last=status;
      LOG.info(_server.getThreadPool().toString() + " " + status);
      if ((finished + errors) == threadCount)       break;
    }
    for (    Thread thread : threads)     thread.join();
    for (    Throwable throwable : throwables)     if (throwable != null)     throw throwable;
    for (    ConcurrentLinkedQueue _latency : _latencies)     assertEquals(_handled.get(),_latency.size());
  }
  finally {
    final int quantums=48;
    final int[][] count=new int[_latencies.length][quantums];
    final int length[]=new int[_latencies.length];
    final int other[]=new int[_latencies.length];
    long total=0;
    for (int i=0; i < _latencies.length; i++) {
      Queue<Long> latencies=_latencies[i];
      length[i]=latencies.size();
      loop:       for (      long latency : latencies) {
        if (i == 4)         total+=latency;
        for (int q=0; q < quantums; q++) {
          if (latency >= (q * 100) && latency < ((q + 1) * 100)) {
            count[i][q]++;
            continue loop;
          }
        }
        other[i]++;
      }
    }
    System.out.println("           stage:\tbind\twrite\trecv\tdispatch\twrote\ttotal");
    for (int q=0; q < quantums; q++) {
      System.out.printf("%02d00<=l<%02d00",q,(q + 1));
      for (int i=0; i < _latencies.length; i++)       System.out.print("\t" + count[i][q]);
      System.out.println();
    }
    System.out.print("other       ");
    for (int i=0; i < _latencies.length; i++)     System.out.print("\t" + other[i]);
    System.out.println();
    System.out.print("HANDLED     ");
    for (int i=0; i < _latencies.length; i++)     System.out.print("\t" + _handled.get());
    System.out.println();
    System.out.print("TOTAL       ");
    for (int i=0; i < _latencies.length; i++)     System.out.print("\t" + length[i]);
    System.out.println();
    long ave=total / _latencies[4].size();
    System.out.println("ave=" + ave);
  }
}

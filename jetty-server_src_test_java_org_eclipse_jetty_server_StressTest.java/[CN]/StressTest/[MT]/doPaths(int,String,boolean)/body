{
  if (persistent) {
    long start=System.currentTimeMillis();
    Socket socket=new Socket(_addr,_port);
    socket.setSoTimeout(30000);
    socket.setSoLinger(false,0);
    long connected=System.currentTimeMillis();
    for (int i=0; i < __tests.length; i++) {
      String uri=__tests[i][0];
      String close=((i + 1) < __tests.length) ? "" : "Connection: close\r\n";
      String request="GET " + uri + " HTTP/1.1\r\nHost: localhost\r\nstart: "+ start+ "\r\n"+ close+ "\r\n";
      socket.getOutputStream().write(request.getBytes());
      socket.getOutputStream().flush();
      Thread.yield();
    }
    long written=System.currentTimeMillis();
    String response=IO.toString(socket.getInputStream());
    socket.close();
    long end=System.currentTimeMillis();
    int bodies=count(response,"HTTP/1.1 200 OK");
    if (__tests.length != bodies)     System.err.println(response);
    assertEquals(__tests.length,bodies);
    long bind=connected - start;
    long flush=(written - connected) / __tests.length;
    long read=(end - written) / __tests.length;
    int offset=0;
    for (int i=0; i < __tests.length; i++) {
      offset=response.indexOf(__tests[i][1],offset);
      assertTrue(offset >= 0);
      offset+=__tests[i][1].length();
      if (bind < 0 || flush < 0 || read < 0) {
        System.err.println(bind + "," + flush+ ","+ read);
      }
      _latencies[0].add((i == 0) ? new Long(bind) : 0);
      _latencies[1].add((i == 0) ? new Long(bind + flush) : flush);
      _latencies[5].add((i == 0) ? new Long(bind + flush + read) : (flush + read));
    }
  }
 else {
    for (int i=0; i < __tests.length; i++) {
      String uri=__tests[i][0];
      long start=System.currentTimeMillis();
      String close="Connection: close\r\n";
      String request="GET " + uri + " HTTP/1.1\r\nHost: localhost\r\nstart: "+ start+ "\r\n"+ close+ "\r\n";
      Socket socket=new Socket(_addr,_port);
      socket.setSoTimeout(10000);
      socket.setSoLinger(false,0);
      _latencies[0].add(new Long(System.currentTimeMillis() - start));
      socket.getOutputStream().write(request.getBytes());
      socket.getOutputStream().flush();
      _latencies[1].add(new Long(System.currentTimeMillis() - start));
      String response=IO.toString(socket.getInputStream());
      socket.close();
      long end=System.currentTimeMillis();
      response=response.substring(response.indexOf("\r\n\r\n") + 4);
      String test=name + "-" + i+ " "+ uri+ " "+ __tests[i][1];
      assertEquals(test,__tests[i][1],response);
      long latency=end - start;
      _latencies[5].add(new Long(latency));
    }
  }
}

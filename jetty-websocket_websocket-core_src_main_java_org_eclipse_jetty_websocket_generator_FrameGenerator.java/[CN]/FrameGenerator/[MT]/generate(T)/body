{
  ByteBuffer framing=ByteBuffer.allocate(16);
  byte b;
  b=0x00;
  if (frame.isFin()) {
    b|=0x80;
  }
  if (frame.isRsv1()) {
    b|=0x40;
    throw new PolicyViolationException("RSV1 not allowed to be set");
  }
  if (frame.isRsv2()) {
    b|=0x20;
    throw new PolicyViolationException("RSV2 not allowed to be set");
  }
  if (frame.isRsv3()) {
    b|=0x10;
    throw new PolicyViolationException("RSV3 not allowed to be set");
  }
  b|=(frame.getOpCode().getCode() & 0x0F);
  framing.put(b);
  b=0x00;
  b|=(frame.isMasked() ? 0x80 : 0x00);
  int payloadLength=frame.getPayloadLength();
  if (payloadLength >= 0x7F) {
    b|=0x7F;
    framing.put(b);
    framing.putInt(payloadLength);
  }
 else   if (payloadLength >= 0x7E) {
    b|=0x7E;
    framing.put(b);
    framing.putShort((short)(payloadLength & 0xFFFF));
  }
 else {
    b|=(payloadLength & 0x7F);
    framing.put(b);
  }
  if (frame.isMasked()) {
    framing.put(frame.getMask());
  }
  framing.flip();
  int buflen=frame.getPayloadLength() + framing.remaining();
  ByteBuffer buffer=ByteBuffer.allocate(buflen);
  ByteBuffer payloadBuffer=payload(frame);
  payloadBuffer.flip();
  buffer.put(framing);
  if (frame.isMasked()) {
    int size=payloadBuffer.remaining();
    byte[] mask=frame.getMask();
    int m=0;
    for (int i=0; i < size; i++) {
      buffer.put((byte)(payloadBuffer.get() ^ mask[m++ % 4]));
    }
  }
 else {
    buffer.put(payloadBuffer);
  }
  return buffer;
}

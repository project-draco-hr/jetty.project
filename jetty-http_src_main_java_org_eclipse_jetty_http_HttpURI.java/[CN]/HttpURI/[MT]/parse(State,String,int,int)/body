{
  boolean encoded=false;
  int mark=offset;
  int path_mark=0;
  for (int i=offset; i < end; i++) {
    char c=uri.charAt(i);
switch (state) {
case START:
{
switch (c) {
case '/':
          mark=i;
        state=State.HOST_OR_PATH;
      break;
case ';':
    mark=i + 1;
  state=State.PARAM;
break;
case '?':
_path="";
mark=i + 1;
state=State.QUERY;
break;
case '#':
mark=i + 1;
state=State.FRAGMENT;
break;
case '*':
_path="*";
state=State.ASTERISK;
break;
default :
mark=i;
state=State.SCHEME_OR_PATH;
}
continue;
}
case SCHEME_OR_PATH:
{
switch (c) {
case ':':
{
_scheme=uri.substring(mark,i);
c=uri.charAt(++i);
mark=i;
if (c == '/') state=State.HOST_OR_PATH;
 else state=State.PATH;
break;
}
case '/':
{
state=State.PATH;
break;
}
case ';':
{
mark=i + 1;
state=State.PARAM;
break;
}
case '?':
{
_path=uri.substring(mark,i);
mark=i + 1;
state=State.QUERY;
break;
}
case '%':
{
encoded=true;
}
case '#':
{
_path=uri.substring(mark,i);
state=State.FRAGMENT;
break;
}
}
continue;
}
case HOST_OR_PATH:
{
switch (c) {
case '/':
_host="";
mark=i + 1;
state=State.HOST;
break;
case '@':
_user=uri.substring(mark,i);
mark=i + 1;
break;
case ';':
case '?':
case '#':
i--;
path_mark=mark;
state=State.PATH;
break;
default :
path_mark=mark;
state=State.PATH;
}
continue;
}
case HOST:
{
switch (c) {
case '/':
{
if (i > mark) _host=uri.substring(mark,i);
path_mark=mark=i;
state=State.PATH;
break;
}
case ':':
{
if (i > mark) _host=uri.substring(mark,i);
mark=i + 1;
state=State.PORT;
break;
}
case '@':
_user=uri.substring(mark,i);
mark=i + 1;
break;
case '[':
{
state=State.IPV6;
break;
}
}
continue;
}
case IPV6:
{
switch (c) {
case '/':
{
throw new IllegalArgumentException("No closing ']' for ipv6 in " + uri);
}
case ']':
{
c=uri.charAt(++i);
_host=uri.substring(mark,i);
if (c == ':') {
mark=i + 1;
state=State.PORT;
}
 else {
path_mark=mark=i;
state=State.PATH;
}
break;
}
}
continue;
}
case PORT:
{
if (c == '/') {
_port=TypeUtil.parseInt(uri,mark,i - mark,10);
path_mark=mark=i;
state=State.PATH;
}
continue;
}
case PATH:
{
switch (c) {
case ';':
{
mark=i + 1;
state=State.PARAM;
break;
}
case '?':
{
_path=uri.substring(path_mark,i);
mark=i + 1;
state=State.QUERY;
break;
}
case '#':
{
_path=uri.substring(path_mark,i);
mark=i + 1;
state=State.FRAGMENT;
break;
}
case '%':
{
encoded=true;
}
}
continue;
}
case PARAM:
{
switch (c) {
case '?':
{
_path=uri.substring(path_mark,i);
_param=uri.substring(mark,i);
mark=i + 1;
state=State.QUERY;
break;
}
case '#':
{
_path=uri.substring(path_mark,i);
_param=uri.substring(mark,i);
mark=i + 1;
state=State.FRAGMENT;
break;
}
case '/':
{
encoded=true;
state=State.PATH;
break;
}
case ';':
{
mark=i + 1;
break;
}
}
continue;
}
case QUERY:
{
if (c == '#') {
_query=uri.substring(mark,i);
mark=i + 1;
state=State.FRAGMENT;
}
continue;
}
case ASTERISK:
{
throw new IllegalArgumentException("only '*'");
}
case FRAGMENT:
{
_fragment=uri.substring(mark,end);
i=end;
}
}
}
switch (state) {
case START:
break;
case SCHEME_OR_PATH:
_path=uri.substring(mark,end);
break;
case HOST_OR_PATH:
_path=uri.substring(mark,end);
break;
case HOST:
if (end > mark) _host=uri.substring(mark,end);
break;
case IPV6:
throw new IllegalArgumentException("No closing ']' for ipv6 in " + uri);
case PORT:
_port=TypeUtil.parseInt(uri,mark,end - mark,10);
break;
case ASTERISK:
break;
case FRAGMENT:
_fragment=uri.substring(mark,end);
break;
case PARAM:
_path=uri.substring(path_mark,end);
_param=uri.substring(mark,end);
break;
case PATH:
_path=uri.substring(path_mark,end);
break;
case QUERY:
_query=uri.substring(mark,end);
break;
}
if (!encoded) {
if (_param == null) _decodedPath=_path;
 else _decodedPath=_path.substring(0,_path.length() - _param.length() - 1);
}
}

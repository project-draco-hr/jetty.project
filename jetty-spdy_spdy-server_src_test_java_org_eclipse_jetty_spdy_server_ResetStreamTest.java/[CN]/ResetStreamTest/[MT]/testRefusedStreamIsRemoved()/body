{
  final AtomicReference<Session> serverSessionRef=new AtomicReference<>();
  final CountDownLatch synLatch=new CountDownLatch(1);
  final CountDownLatch rstLatch=new CountDownLatch(1);
  Session clientSession=startClient(startServer(new ServerSessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      Session serverSession=stream.getSession();
      serverSessionRef.set(serverSession);
      serverSession.rst(new RstInfo(stream.getId(),StreamStatus.REFUSED_STREAM),new FutureCallback());
      synLatch.countDown();
      return null;
    }
  }
),new SessionFrameListener.Adapter(){
    @Override public void onRst(    Session session,    RstInfo rstInfo){
      rstLatch.countDown();
    }
  }
);
  Stream stream=clientSession.syn(new SynInfo(5,TimeUnit.SECONDS,new Fields(),false,(byte)0),null);
  assertTrue("syncLatch didn't count down",synLatch.await(5,TimeUnit.SECONDS));
  Session serverSession=serverSessionRef.get();
  assertEquals("serverSession expected to contain 0 streams",0,serverSession.getStreams().size());
  assertTrue("rstLatch didn't count down",rstLatch.await(5,TimeUnit.SECONDS));
  TimeUnit.SECONDS.sleep(1);
  assertTrue("stream is expected to be reset",stream.isReset());
  assertEquals("clientSession expected to contain 0 streams",0,clientSession.getStreams().size());
}

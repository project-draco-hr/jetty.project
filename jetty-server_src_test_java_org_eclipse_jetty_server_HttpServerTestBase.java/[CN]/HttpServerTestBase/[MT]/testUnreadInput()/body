{
  configureServer(new NoopHandler());
  final int REQS=2;
  final String content="This is a coooooooooooooooooooooooooooooooooo" + "ooooooooooooooooooooooooooooooooooooooooooooo" + "ooooooooooooooooooooooooooooooooooooooooooooo"+ "ooooooooooooooooooooooooooooooooooooooooooooo"+ "ooooooooooooooooooooooooooooooooooooooooooooo"+ "ooooooooooooooooooooooooooooooooooooooooooooo"+ "ooooooooooooooooooooooooooooooooooooooooooooo"+ "ooooooooooooooooooooooooooooooooooooooooooooo"+ "ooooooooooooooooooooooooooooooooooooooooooooo"+ "oooooooooooonnnnnnnnnnnnnnnntent";
  final int cl=content.getBytes().length;
  Socket client=newSocket(_serverURI.getHost(),_serverURI.getPort());
  final OutputStream out=client.getOutputStream();
  new Thread(){
    @Override public void run(){
      try {
        byte[] bytes=("GET / HTTP/1.1\r\n" + "Host: localhost\r\n" + "Content-Length: " + cl + "\r\n"+ "\r\n"+ content).getBytes(StandardCharsets.ISO_8859_1);
        for (int i=0; i < REQS; i++)         out.write(bytes,0,bytes.length);
        out.write("GET / HTTP/1.1\r\nHost: last\r\nConnection: close\r\n\r\n".getBytes(StandardCharsets.ISO_8859_1));
        out.flush();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
  String resps=readResponse(client);
  int offset=0;
  for (int i=0; i < (REQS + 1); i++) {
    int ok=resps.indexOf("HTTP/1.1 200 OK",offset);
    assertThat("resp" + i,ok,greaterThanOrEqualTo(offset));
    offset=ok + 15;
  }
}

{
  final List<ContinuationListener> cListeners;
  final List<AsyncListener> aListeners;
synchronized (this) {
switch (_state) {
case __ASYNCSTARTED:
case __ASYNCWAIT:
      cListeners=_continuationListeners;
    aListeners=_asyncListeners;
  break;
default :
cListeners=null;
aListeners=null;
return;
}
_expired=true;
}
if (aListeners != null) {
for (AsyncListener listener : aListeners) {
try {
listener.onTimeout(_event);
}
 catch (Exception e) {
Log.warn(e);
}
}
}
if (cListeners != null) {
for (ContinuationListener listener : cListeners) {
try {
listener.onTimeout(this);
}
 catch (Exception e) {
Log.warn(e);
}
}
}
synchronized (this) {
switch (_state) {
case __ASYNCSTARTED:
case __ASYNCWAIT:
if (_continuation) dispatch();
 else complete();
}
}
scheduleDispatch();
}

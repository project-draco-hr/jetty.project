{
  final List<ContinuationListener> cListeners;
  final List<AsyncListener> aListeners;
synchronized (this) {
switch (_state) {
case UNCOMPLETED:
      _state=State.COMPLETED;
    cListeners=_continuationListeners;
  aListeners=_asyncListeners;
break;
default :
cListeners=null;
aListeners=null;
throw new IllegalStateException(this.getStatusString());
}
}
if (aListeners != null) {
for (AsyncListener listener : aListeners) {
try {
if (ex != null) {
_event.getSuppliedRequest().setAttribute(Dispatcher.ERROR_EXCEPTION,ex);
_event.getSuppliedRequest().setAttribute(Dispatcher.ERROR_MESSAGE,ex.getMessage());
listener.onError(_event);
}
 else listener.onComplete(_event);
}
 catch (Exception e) {
LOG.warn(e);
}
}
}
if (cListeners != null) {
for (ContinuationListener listener : cListeners) {
try {
listener.onComplete(this);
}
 catch (Exception e) {
LOG.warn(e);
}
}
}
}

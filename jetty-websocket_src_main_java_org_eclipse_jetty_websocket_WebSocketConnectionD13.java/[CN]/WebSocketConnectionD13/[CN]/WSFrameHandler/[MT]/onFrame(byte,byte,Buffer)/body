{
  boolean lastFrame=isLastFrame(flags);
synchronized (WebSocketConnectionD13.this) {
    if (_closedIn)     return;
  }
  try {
    byte[] array=buffer.array();
    if (STRICT) {
      if (isControlFrame(opcode) && buffer.length() > 125) {
        _connection.close(WebSocketConnectionD13.CLOSE_PROTOCOL,"Control frame too large");
        return;
      }
      if ((flags & 0x7) != 0) {
        _connection.close(WebSocketConnectionD13.CLOSE_PROTOCOL,"RSV bits set 0x" + Integer.toHexString(flags));
        return;
      }
      if (_opcode != -1 && opcode != WebSocketConnectionD13.OP_CONTINUATION) {
        _connection.close(WebSocketConnectionD13.CLOSE_PROTOCOL,"Bad continuation" + Integer.toHexString(opcode));
        return;
      }
      if (_closeCode != 0 && _closeCode != CLOSE_NORMAL && opcode != OP_CLOSE)       return;
    }
    if (_onFrame != null) {
      if (_onFrame.onFrame(flags,opcode,array,buffer.getIndex(),buffer.length()))       return;
    }
    if (_onControl != null && isControlFrame(opcode)) {
      if (_onControl.onControl(opcode,array,buffer.getIndex(),buffer.length()))       return;
    }
switch (opcode) {
case WebSocketConnectionD13.OP_CONTINUATION:
{
        if (_opcode == -1) {
          _connection.close(WebSocketConnectionD13.CLOSE_PROTOCOL,"Bad Continuation");
          return;
        }
        if (_onTextMessage != null && _opcode == WebSocketConnectionD13.OP_TEXT) {
          if (_utf8.append(buffer.array(),buffer.getIndex(),buffer.length(),_connection.getMaxTextMessageSize())) {
            if (lastFrame) {
              _opcode=-1;
              String msg=_utf8.toString();
              _utf8.reset();
              _onTextMessage.onMessage(msg);
            }
          }
 else           textMessageTooLarge();
        }
        if (_opcode >= 0 && _connection.getMaxBinaryMessageSize() >= 0) {
          if (_aggregate != null && checkBinaryMessageSize(_aggregate.length(),buffer.length())) {
            _aggregate.put(buffer);
            if (lastFrame && _onBinaryMessage != null) {
              try {
                _onBinaryMessage.onMessage(_aggregate.array(),_aggregate.getIndex(),_aggregate.length());
              }
  finally {
                _opcode=-1;
                _aggregate.clear();
              }
            }
          }
        }
        break;
      }
case WebSocketConnectionD13.OP_PING:
{
      LOG.debug("PING {}",this);
      if (!_closedOut)       _connection.sendControl(WebSocketConnectionD13.OP_PONG,buffer.array(),buffer.getIndex(),buffer.length());
      break;
    }
case WebSocketConnectionD13.OP_PONG:
{
    LOG.debug("PONG {}",this);
    break;
  }
case WebSocketConnectionD13.OP_CLOSE:
{
  int code=WebSocketConnectionD13.CLOSE_NO_CODE;
  String message=null;
  if (buffer.length() >= 2) {
    code=(0xff & buffer.array()[buffer.getIndex()]) * 0x100 + (0xff & buffer.array()[buffer.getIndex() + 1]);
    if (buffer.length() > 2)     message=new String(buffer.array(),buffer.getIndex() + 2,buffer.length() - 2,StringUtil.__UTF8);
  }
  closeIn(code,message);
  break;
}
case WebSocketConnectionD13.OP_TEXT:
{
if (_onTextMessage != null) {
  if (_connection.getMaxTextMessageSize() <= 0) {
    if (lastFrame)     _onTextMessage.onMessage(buffer.toString(StringUtil.__UTF8));
 else {
      LOG.warn("Frame discarded. Text aggregation disabled for {}",_endp);
      _connection.close(WebSocketConnectionD13.CLOSE_POLICY_VIOLATION,"Text frame aggregation disabled");
    }
  }
 else   if (_utf8.append(buffer.array(),buffer.getIndex(),buffer.length(),_connection.getMaxTextMessageSize())) {
    if (lastFrame) {
      String msg=_utf8.toString();
      _utf8.reset();
      _onTextMessage.onMessage(msg);
    }
 else {
      _opcode=WebSocketConnectionD13.OP_TEXT;
    }
  }
 else   textMessageTooLarge();
}
break;
}
case WebSocketConnectionD13.OP_BINARY:
{
if (_onBinaryMessage != null && checkBinaryMessageSize(0,buffer.length())) {
if (lastFrame) {
  _onBinaryMessage.onMessage(array,buffer.getIndex(),buffer.length());
}
 else if (_connection.getMaxBinaryMessageSize() >= 0) {
  _opcode=opcode;
  if (_aggregate == null)   _aggregate=new ByteArrayBuffer(_connection.getMaxBinaryMessageSize());
  _aggregate.put(buffer);
}
 else {
  LOG.warn("Frame discarded. Binary aggregation disabed for {}",_endp);
  _connection.close(WebSocketConnectionD13.CLOSE_POLICY_VIOLATION,"Binary frame aggregation disabled");
}
}
break;
}
default :
if (STRICT) _connection.close(WebSocketConnectionD13.CLOSE_PROTOCOL,"Bad opcode 0x" + Integer.toHexString(opcode));
return;
}
}
 catch (Utf8Appendable.NotUtf8Exception notUtf8) {
LOG.warn(notUtf8);
LOG.warn("{} for {}",notUtf8,_endp);
LOG.debug(notUtf8);
_connection.close(WebSocketConnectionD13.CLOSE_NOT_UTF8,"Invalid UTF-8");
}
catch (ThreadDeath th) {
throw th;
}
catch (Throwable th) {
LOG.warn(th);
}
}

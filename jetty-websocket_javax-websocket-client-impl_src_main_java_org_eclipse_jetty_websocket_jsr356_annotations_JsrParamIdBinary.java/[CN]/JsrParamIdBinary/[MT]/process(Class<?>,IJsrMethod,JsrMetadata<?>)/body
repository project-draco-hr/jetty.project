{
  if (type.isAssignableFrom(ByteBuffer.class)) {
    method.setMessageType(MessageType.BINARY);
    method.setMessageDecoder(ByteBufferDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(byte[].class)) {
    method.setMessageType(MessageType.BINARY);
    method.setMessageDecoder(ByteArrayDecoder.class);
    return true;
  }
  if (type.isAssignableFrom(Boolean.TYPE)) {
    Class<? extends Decoder> decoder=method.getMessageDecoder();
    if (decoder == null) {
      method.enablePartialMessageSupport();
    }
 else {
      if (decoder.isAssignableFrom(ByteBufferDecoder.class) || decoder.isAssignableFrom(ByteArrayDecoder.class)) {
        method.enablePartialMessageSupport();
      }
 else {
        StringBuilder err=new StringBuilder();
        err.append("Unable to support boolean <");
        err.append(type.getName()).append("> as partial message indicator ");
        err.append("for a binary message parameter that is not a ");
        err.append(ByteBuffer.class.getName()).append(" or byte[]");
        throw new InvalidSignatureException(err.toString());
      }
    }
    return true;
  }
  return false;
}

{
  SSLEngine sslEngine=getSSLEngine();
  List<String> serverProtocols=getProtocols();
  String tlsProtocol=sslEngine.getHandshakeSession().getProtocol();
  String tlsCipher=sslEngine.getHandshakeSession().getCipherSuite();
  String negotiated=null;
  for (  String clientProtocol : clientProtocols) {
    if (serverProtocols.contains(clientProtocol)) {
      ConnectionFactory factory=getConnector().getConnectionFactory(clientProtocol);
      if (factory instanceof CipherDiscriminator && !((CipherDiscriminator)factory).isAcceptable(clientProtocol,tlsProtocol,tlsCipher)) {
        if (LOG.isDebugEnabled())         LOG.debug("{} protocol {} not acceptable to {} for {}/{}",this,clientProtocol,factory,tlsProtocol,tlsCipher);
        continue;
      }
      negotiated=clientProtocol;
      break;
    }
  }
  if (negotiated == null) {
    if (clientProtocols.isEmpty())     negotiated=getDefaultProtocol();
 else     throw new IllegalStateException("No acceptable protocol");
  }
  if (LOG.isDebugEnabled())   LOG.debug("{} protocol selected {}",this,negotiated);
  setProtocol(negotiated);
  ALPN.remove(sslEngine);
  return negotiated;
}

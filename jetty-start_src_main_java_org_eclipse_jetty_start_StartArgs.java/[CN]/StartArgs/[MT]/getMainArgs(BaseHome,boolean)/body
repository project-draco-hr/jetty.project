{
  CommandLineBuilder cmd=new CommandLineBuilder();
  if (addJavaInit) {
    cmd.addRawArg(CommandLineBuilder.findJavaBin());
    for (    String x : jvmArgs) {
      cmd.addRawArg(x);
    }
    cmd.addRawArg("-Djava.io.tmpdir=" + System.getProperty("java.io.tmpdir"));
    cmd.addRawArg("-Djetty.home=" + baseHome.getHome());
    cmd.addRawArg("-Djetty.base=" + baseHome.getBase());
    for (    String propKey : systemPropertyKeys) {
      String value=System.getProperty(propKey);
      cmd.addEqualsArg("-D" + propKey,value);
    }
    cmd.addRawArg("-cp");
    cmd.addRawArg(classpath.toString());
    cmd.addRawArg(getMainClassname());
  }
  ensureSystemPropertySet("STOP.PORT");
  ensureSystemPropertySet("STOP.KEY");
  ensureSystemPropertySet("STOP.WAIT");
  if (dryRun && exec_properties == null) {
    for (    Prop p : properties)     cmd.addRawArg(CommandLineBuilder.quote(p.key) + "=" + CommandLineBuilder.quote(p.value));
  }
 else   if (properties.size() > 0) {
    Path prop_path;
    if (exec_properties == null) {
      prop_path=Files.createTempFile(Paths.get(baseHome.getBase()),"start_",".properties");
      prop_path.toFile().deleteOnExit();
    }
 else     prop_path=new File(exec_properties).toPath();
    try (OutputStream out=Files.newOutputStream(prop_path)){
      properties.store(out,"start.jar properties");
    }
     cmd.addRawArg(prop_path.toAbsolutePath().toString());
  }
  for (  Path xml : xmls) {
    cmd.addRawArg(xml.toAbsolutePath().toString());
  }
  for (  Path propertyFile : propertyFiles) {
    cmd.addRawArg(propertyFile.toAbsolutePath().toString());
  }
  return cmd;
}

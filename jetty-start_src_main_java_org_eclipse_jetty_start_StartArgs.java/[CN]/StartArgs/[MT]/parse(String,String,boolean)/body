{
  if (rawarg == null) {
    return;
  }
  StartLog.debug("parse(\"%s\", \"%s\", %b)",rawarg,source,replaceProps);
  final String arg=rawarg.trim();
  if (arg.length() <= 0) {
    return;
  }
  if (arg.startsWith("#")) {
    return;
  }
  if ("--help".equals(arg) || "-?".equals(arg)) {
    help=true;
    run=false;
    return;
  }
  if ("--debug".equals(arg) || arg.startsWith("--start-log-file")) {
    return;
  }
  if (arg.startsWith("--include-jetty-dir=")) {
    return;
  }
  if ("--stop".equals(arg)) {
    stopCommand=true;
    run=false;
    return;
  }
  if (arg.startsWith("--download=")) {
    addFile(Props.getValue(arg));
    run=false;
    download=true;
    return;
  }
  if (arg.equals("--create-files")) {
    run=false;
    download=true;
    return;
  }
  if ("--list-classpath".equals(arg) || "--version".equals(arg) || "-v".equals(arg)|| "--info".equals(arg)) {
    listClasspath=true;
    run=false;
    return;
  }
  if ("--list-config".equals(arg)) {
    listConfig=true;
    run=false;
    return;
  }
  if ("--dry-run".equals(arg) || "--exec-print".equals(arg)) {
    dryRun=true;
    run=false;
    return;
  }
  if ("--exec".equals(arg)) {
    exec=true;
    return;
  }
  if ("--approve-all-licenses".equals(arg)) {
    approveAllLicenses=true;
    return;
  }
  if (arg.startsWith("--lib=")) {
    String cp=Props.getValue(arg);
    if (cp != null) {
      StringTokenizer t=new StringTokenizer(cp,File.pathSeparator);
      while (t.hasMoreTokens()) {
        rawLibs.add(t.nextToken());
      }
    }
    return;
  }
  if ("--list-modules".equals(arg)) {
    listModules=true;
    run=false;
    return;
  }
  if (arg.startsWith("--add-to-startd=")) {
    addToStartdIni.addAll(Props.getValues(arg));
    run=false;
    download=true;
    return;
  }
  if (arg.startsWith("--add-to-start=")) {
    addToStartIni.addAll(Props.getValues(arg));
    run=false;
    download=true;
    return;
  }
  if (arg.startsWith("--module=")) {
    for (    String moduleName : Props.getValues(arg)) {
      modules.add(moduleName);
      List<String> list=sources.get(moduleName);
      if (list == null) {
        list=new ArrayList<String>();
        sources.put(moduleName,list);
      }
      list.add(source);
    }
    return;
  }
  if (arg.startsWith("--write-module-graph=")) {
    this.moduleGraphFilename=Props.getValue(arg);
    run=false;
    return;
  }
  if (arg.startsWith("-D")) {
    String[] assign=arg.substring(2).split("=",2);
    systemPropertyKeys.add(assign[0]);
switch (assign.length) {
case 2:
      System.setProperty(assign[0],assign[1]);
    setProperty(assign[0],assign[1],source,replaceProps);
  break;
case 1:
System.setProperty(assign[0],"");
setProperty(assign[0],"",source,replaceProps);
break;
default :
break;
}
return;
}
if (arg.startsWith("-")) {
if (!jvmArgs.contains(arg)) {
jvmArgs.add(arg);
}
return;
}
int idx=arg.indexOf('=');
if (idx >= 0) {
String key=arg.substring(0,idx);
String value=arg.substring(idx + 1);
if (replaceProps) {
if (propertySource.containsKey(key)) {
StartLog.warn("Property %s in %s already set in %s",key,source,propertySource.get(key));
}
propertySource.put(key,source);
}
if ("OPTION".equals(key) || "OPTIONS".equals(key)) {
StringBuilder warn=new StringBuilder();
warn.append("The behavior of the argument ");
warn.append(arg).append(" (seen in ").append(source);
warn.append(") has changed, and is now considered a normal property.  ");
warn.append(key).append(" no longer controls what libraries are on your classpath,");
warn.append(" use --module instead. See --help for details.");
StartLog.warn(warn.toString());
}
setProperty(key,value,source,replaceProps);
return;
}
if (FS.isXml(arg)) {
if (!xmlRefs.contains(arg)) {
xmlRefs.add(arg);
}
return;
}
if (FS.isPropertyFile(arg)) {
if (!propertyFileRefs.contains(arg)) {
propertyFileRefs.add(arg);
}
return;
}
throw new UsageException(ERR_BAD_ARG,"Unrecognized argument: \"%s\" in %s",arg,source);
}

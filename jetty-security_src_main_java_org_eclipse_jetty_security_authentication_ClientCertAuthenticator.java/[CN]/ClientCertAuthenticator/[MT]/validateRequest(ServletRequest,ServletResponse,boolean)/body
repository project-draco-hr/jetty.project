{
  if (!mandatory)   return new DeferredAuthentication(this);
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  X509Certificate[] certs=(X509Certificate[])request.getAttribute("javax.servlet.request.X509Certificate");
  try {
    if (certs != null && certs.length > 0) {
      if (_validateCerts) {
        KeyStore trustStore=getKeyStore(null,_trustStorePath,_trustStoreType,_trustStoreProvider,_trustStorePassword == null ? null : _trustStorePassword.toString());
        Collection<? extends CRL> crls=loadCRL(_crlPath);
        CertificateValidator validator=new CertificateValidator(trustStore,crls);
        validator.validate(certs);
      }
      for (      X509Certificate cert : certs) {
        if (cert == null)         continue;
        Principal principal=cert.getSubjectDN();
        if (principal == null)         principal=cert.getIssuerDN();
        final String username=principal == null ? "clientcert" : principal.getName();
        final char[] credential=B64Code.encode(cert.getSignature());
        UserIdentity user=login(username,credential,req);
        if (user != null) {
          return new UserAuthentication(getAuthMethod(),user);
        }
      }
    }
    if (!DeferredAuthentication.isDeferred(response)) {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
      return Authentication.SEND_FAILURE;
    }
    return Authentication.UNAUTHENTICATED;
  }
 catch (  Exception e) {
    throw new ServerAuthException(e.getMessage());
  }
}

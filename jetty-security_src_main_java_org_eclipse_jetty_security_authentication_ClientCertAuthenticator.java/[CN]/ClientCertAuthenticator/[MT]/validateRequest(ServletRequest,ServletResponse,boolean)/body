{
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  java.security.cert.X509Certificate[] certs=(java.security.cert.X509Certificate[])request.getAttribute("javax.servlet.request.X509Certificate");
  try {
    if (certs == null || certs.length == 0 || certs[0] == null) {
      response.sendError(HttpServletResponse.SC_FORBIDDEN,"A client certificate is required for accessing this web application but the server's listener is not configured for mutual authentication (or the client did not provide a certificate).");
      return DefaultAuthentication.SEND_FAILURE_RESULTS;
    }
    Principal principal=certs[0].getSubjectDN();
    if (principal == null)     principal=certs[0].getIssuerDN();
    final String username=principal == null ? "clientcert" : principal.getName();
    final char[] credential=B64Code.encode(certs[0].getSignature());
    UserIdentity user=_loginService.login(username,credential);
    if (user != null)     return new DefaultAuthentication(Authentication.Status.SUCCESS,this,user);
    if (!mandatory) {
      return DefaultAuthentication.SUCCESS_UNAUTH_RESULTS;
    }
    response.sendError(HttpServletResponse.SC_FORBIDDEN,"The provided client certificate does not correspond to a trusted user.");
    return DefaultAuthentication.SEND_FAILURE_RESULTS;
  }
 catch (  IOException e) {
    throw new ServerAuthException(e.getMessage());
  }
}

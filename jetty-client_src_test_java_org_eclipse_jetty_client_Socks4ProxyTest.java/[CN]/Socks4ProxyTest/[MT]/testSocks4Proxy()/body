{
  int proxyPort=server.socket().getLocalPort();
  client.getProxyConfiguration().getProxies().add(new Socks4Proxy("localhost",proxyPort));
  final CountDownLatch latch=new CountDownLatch(1);
  byte ip1=127;
  byte ip2=0;
  byte ip3=0;
  byte ip4=13;
  String serverHost=ip1 + "." + ip2+ "."+ ip3+ "."+ ip4;
  int serverPort=proxyPort + 1;
  client.newRequest(serverHost,serverPort).path("/path").timeout(5,TimeUnit.SECONDS).send(new Response.CompleteListener(){
    @Override public void onComplete(    Result result){
      if (result.isSucceeded())       latch.countDown();
    }
  }
);
  SocketChannel channel=server.accept();
  int socks4MessageLength=9;
  ByteBuffer buffer=ByteBuffer.allocate(socks4MessageLength);
  int read=channel.read(buffer);
  Assert.assertEquals(socks4MessageLength,read);
  Assert.assertEquals(4,buffer.get(0) & 0xFF);
  Assert.assertEquals(1,buffer.get(1) & 0xFF);
  Assert.assertEquals(serverPort,buffer.getShort(2) & 0xFFFF);
  Assert.assertEquals(ip1,buffer.get(4) & 0xFF);
  Assert.assertEquals(ip2,buffer.get(5) & 0xFF);
  Assert.assertEquals(ip3,buffer.get(6) & 0xFF);
  Assert.assertEquals(ip4,buffer.get(7) & 0xFF);
  Assert.assertEquals(0,buffer.get(8) & 0xFF);
  channel.write(ByteBuffer.wrap(new byte[]{0,0x5A,0,0,0,0,0,0}));
  buffer=ByteBuffer.allocate(3);
  read=channel.read(buffer);
  Assert.assertEquals(3,read);
  buffer.flip();
  Assert.assertEquals("GET",StandardCharsets.UTF_8.decode(buffer).toString());
  String response="" + "HTTP/1.1 200 OK\r\n" + "Content-Length: 0\r\n"+ "Connection: close\r\n"+ "\r\n";
  channel.write(ByteBuffer.wrap(response.getBytes("UTF-8")));
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

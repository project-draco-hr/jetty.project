{
  ByteBuffer b0=BufferUtil.toBuffer("GET / HTTP/1.0\015\012" + "Host: localhost\015\012" + "Header1: value1\015\012"+ "Header 2  :   value 2a  \015\012"+ "    value 2b  \015\012"+ "Header3: \015\012"+ "Header4 \015\012"+ "  value4\015\012"+ "Server5 : notServer\015\012"+ "Host Header: notHost\015\012"+ "Connection: close\015\012"+ "Accept-Encoding: gzip, deflated\015\012"+ "Accept: unknown\015\012"+ "\015\012");
  ByteBuffer buffer=BufferUtil.allocateDirect(b0.capacity());
  int pos=BufferUtil.flipToFill(buffer);
  BufferUtil.put(b0,buffer);
  BufferUtil.flipToFlush(buffer,pos);
  HttpParser.RequestHandler<ByteBuffer> handler=new Handler();
  HttpParser parser=new HttpParser(handler);
  parseAll(parser,buffer);
  assertEquals("GET",_methodOrVersion);
  assertEquals("/",_uriOrStatus);
  assertEquals("HTTP/1.0",_versionOrReason);
  assertEquals("Host",_hdr[0]);
  assertEquals("localhost",_val[0]);
  assertEquals("Header1",_hdr[1]);
  assertEquals("value1",_val[1]);
  assertEquals("Header 2",_hdr[2]);
  assertEquals("value 2a value 2b",_val[2]);
  assertEquals("Header3",_hdr[3]);
  assertEquals(null,_val[3]);
  assertEquals("Header4",_hdr[4]);
  assertEquals("value4",_val[4]);
  assertEquals("Server5",_hdr[5]);
  assertEquals("notServer",_val[5]);
  assertEquals("Host Header",_hdr[6]);
  assertEquals("notHost",_val[6]);
  assertEquals("Connection",_hdr[7]);
  assertEquals("close",_val[7]);
  assertEquals("Accept-Encoding",_hdr[8]);
  assertEquals("gzip, deflated",_val[8]);
  assertEquals("Accept",_hdr[9]);
  assertEquals("unknown",_val[9]);
  assertEquals(9,_headers);
}

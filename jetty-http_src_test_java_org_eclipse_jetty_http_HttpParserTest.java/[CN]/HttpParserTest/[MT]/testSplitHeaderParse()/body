{
  ByteBuffer buffer=BufferUtil.toBuffer("XXXXSPLIT / HTTP/1.0\r\n" + "Host: localhost\r\n" + "Header1: value1\r\n"+ "Header2:   value 2a  \r\n"+ "Header3: 3\r\n"+ "Header4:value4\r\n"+ "Server5: notServer\r\n"+ "\r\nZZZZ");
  buffer.position(2);
  buffer.limit(buffer.capacity() - 2);
  buffer=buffer.slice();
  for (int i=0; i < buffer.capacity() - 4; i++) {
    HttpParser.RequestHandler handler=new Handler();
    HttpParser parser=new HttpParser(handler);
    buffer.position(2);
    buffer.limit(2 + i);
    if (!parser.parseNext(buffer)) {
      Assert.assertEquals(0,buffer.remaining());
      buffer.limit(buffer.capacity() - 2);
      parser.parseNext(buffer);
    }
    Assert.assertEquals("SPLIT",_methodOrVersion);
    Assert.assertEquals("/",_uriOrStatus);
    Assert.assertEquals("HTTP/1.0",_versionOrReason);
    Assert.assertEquals("Host",_hdr[0]);
    Assert.assertEquals("localhost",_val[0]);
    Assert.assertEquals("Header1",_hdr[1]);
    Assert.assertEquals("value1",_val[1]);
    Assert.assertEquals("Header2",_hdr[2]);
    Assert.assertEquals("value 2a",_val[2]);
    Assert.assertEquals("Header3",_hdr[3]);
    Assert.assertEquals("3",_val[3]);
    Assert.assertEquals("Header4",_hdr[4]);
    Assert.assertEquals("value4",_val[4]);
    Assert.assertEquals("Server5",_hdr[5]);
    Assert.assertEquals("notServer",_val[5]);
    Assert.assertEquals(5,_headers);
  }
}

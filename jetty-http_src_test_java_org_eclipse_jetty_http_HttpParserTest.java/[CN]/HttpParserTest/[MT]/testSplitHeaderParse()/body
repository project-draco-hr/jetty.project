{
  ByteBuffer buffer=BufferUtil.toBuffer("XXXXSPLIT / HTTP/1.0\015\012" + "Host: localhost\015\012" + "Header1: value1\015\012"+ "Header2:   value 2a  \015\012"+ "Header3: 3\015\012"+ "Header4:value4\015\012"+ "Server5: notServer\015\012"+ "\015\012ZZZZ");
  buffer.position(2);
  buffer.limit(buffer.capacity() - 2);
  buffer=buffer.slice();
  for (int i=0; i < buffer.capacity() - 4; i++) {
    HttpParser.RequestHandler handler=new Handler();
    HttpParser parser=new HttpParser(handler);
    buffer.position(2);
    buffer.limit(2 + i);
    if (!parser.parseNext(buffer)) {
      assertEquals(0,buffer.remaining());
      buffer.limit(buffer.capacity() - 2);
      parser.parseNext(buffer);
    }
    assertEquals("SPLIT",_methodOrVersion);
    assertEquals("/",_uriOrStatus);
    assertEquals("HTTP/1.0",_versionOrReason);
    assertEquals("Host",_hdr[0]);
    assertEquals("localhost",_val[0]);
    assertEquals("Header1",_hdr[1]);
    assertEquals("value1",_val[1]);
    assertEquals("Header2",_hdr[2]);
    assertEquals("value 2a",_val[2]);
    assertEquals("Header3",_hdr[3]);
    assertEquals("3",_val[3]);
    assertEquals("Header4",_hdr[4]);
    assertEquals("value4",_val[4]);
    assertEquals("Server5",_hdr[5]);
    assertEquals("notServer",_val[5]);
    assertEquals(5,_headers);
  }
}

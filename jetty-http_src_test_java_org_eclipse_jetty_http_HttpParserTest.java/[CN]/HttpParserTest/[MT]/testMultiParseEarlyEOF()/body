{
  ByteBuffer buffer0=BufferUtil.toBuffer("GET /mp HTTP/1.0\r\n" + "Connection: Keep-Alive\r\n");
  ByteBuffer buffer1=BufferUtil.toBuffer("Header1: value1\r\n" + "Transfer-Encoding: chunked\r\n" + "\r\n"+ "a;\r\n"+ "0123456789\r\n"+ "1a\r\n"+ "ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n"+ "0\r\n"+ "\r\n"+ "POST /foo HTTP/1.0\r\n"+ "Connection: Keep-Alive\r\n"+ "Header2: value2\r\n"+ "Content-Length: 0\r\n"+ "\r\n"+ "PUT /doodle HTTP/1.0\r\n"+ "Connection: close\r\n"+ "Header3: value3\r\n"+ "Content-Length: 10\r\n"+ "\r\n"+ "0123456789\r\n");
  HttpParser.RequestHandler handler=new Handler();
  HttpParser parser=new HttpParser(handler);
  parser.parseNext(buffer0);
  parser.atEOF();
  parser.parseNext(buffer1);
  Assert.assertEquals("GET",_methodOrVersion);
  Assert.assertEquals("/mp",_uriOrStatus);
  Assert.assertEquals("HTTP/1.0",_versionOrReason);
  Assert.assertEquals(2,_headers);
  Assert.assertEquals("Header1",_hdr[1]);
  Assert.assertEquals("value1",_val[1]);
  Assert.assertEquals("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",_content);
  parser.reset();
  init();
  parser.parseNext(buffer1);
  Assert.assertEquals("POST",_methodOrVersion);
  Assert.assertEquals("/foo",_uriOrStatus);
  Assert.assertEquals("HTTP/1.0",_versionOrReason);
  Assert.assertEquals(2,_headers);
  Assert.assertEquals("Header2",_hdr[1]);
  Assert.assertEquals("value2",_val[1]);
  Assert.assertEquals(null,_content);
  parser.reset();
  init();
  parser.parseNext(buffer1);
  Assert.assertEquals("PUT",_methodOrVersion);
  Assert.assertEquals("/doodle",_uriOrStatus);
  Assert.assertEquals("HTTP/1.0",_versionOrReason);
  Assert.assertEquals(2,_headers);
  Assert.assertEquals("Header3",_hdr[1]);
  Assert.assertEquals("value3",_val[1]);
  Assert.assertEquals("0123456789",_content);
}

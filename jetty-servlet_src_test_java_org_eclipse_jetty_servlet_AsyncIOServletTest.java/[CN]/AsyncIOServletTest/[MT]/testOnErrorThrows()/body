{
  final AtomicInteger errors=new AtomicInteger();
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      assertScope();
      if (request.getDispatcherType() == DispatcherType.ERROR) {
        response.flushBuffer();
        return;
      }
      final AsyncContext asyncContext=request.startAsync(request,response);
      request.getInputStream().setReadListener(new ReadListener(){
        @Override public void onDataAvailable() throws IOException {
          assertScope();
          throw new NullPointerException("explicitly_thrown_by_test_1");
        }
        @Override public void onAllDataRead() throws IOException {
          assertScope();
        }
        @Override public void onError(        final Throwable t){
          assertScope();
          errors.incrementAndGet();
          throw new NullPointerException("explicitly_thrown_by_test_2"){
{
              this.initCause(t);
            }
          }
;
        }
      }
);
    }
  }
);
  String data="0123456789";
  String request="GET " + path + " HTTP/1.1\r\n"+ "Host: localhost:"+ connector.getLocalPort()+ "\r\n"+ "Content-Length: "+ data.length()+ "\r\n"+ "\r\n"+ data;
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    output.write(request.getBytes("UTF-8"));
    output.flush();
    SimpleHttpParser parser=new SimpleHttpParser();
    SimpleHttpResponse response=parser.readResponse(new BufferedReader(new InputStreamReader(client.getInputStream(),"UTF-8")));
    Assert.assertEquals("500",response.getCode());
    Assert.assertEquals(1,errors.get());
  }
 }

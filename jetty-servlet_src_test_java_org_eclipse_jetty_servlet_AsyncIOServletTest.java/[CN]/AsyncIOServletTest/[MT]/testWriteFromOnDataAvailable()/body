{
  Queue<Throwable> errors=new ConcurrentLinkedQueue<>();
  CountDownLatch writeLatch=new CountDownLatch(1);
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      AsyncContext asyncContext=request.startAsync();
      request.getInputStream().setReadListener(new ReadListener(){
        @Override public void onDataAvailable() throws IOException {
          ServletInputStream input=request.getInputStream();
          ServletOutputStream output=response.getOutputStream();
          while (input.isReady()) {
            byte[] buffer=new byte[512];
            int read=input.read(buffer);
            if (read < 0) {
              asyncContext.complete();
              break;
            }
            if (output.isReady())             output.write(buffer,0,read);
 else             Assert.fail();
          }
        }
        @Override public void onAllDataRead() throws IOException {
        }
        @Override public void onError(        Throwable t){
          errors.offer(t);
        }
      }
);
      response.getOutputStream().setWriteListener(new WriteListener(){
        @Override public void onWritePossible() throws IOException {
          writeLatch.countDown();
        }
        @Override public void onError(        Throwable t){
          errors.offer(t);
        }
      }
);
    }
  }
);
  String content="0123456789ABCDEF";
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    String request="POST " + path + " HTTP/1.1\r\n"+ "Host: localhost:"+ connector.getLocalPort()+ "\r\n"+ "Transfer-Encoding: chunked\r\n"+ "\r\n"+ "10\r\n"+ content+ "\r\n";
    output.write(request.getBytes("UTF-8"));
    output.flush();
    assertTrue(writeLatch.await(5,TimeUnit.SECONDS));
    request="" + "0\r\n" + "\r\n";
    output.write(request.getBytes("UTF-8"));
    output.flush();
    HttpTester.Input input=HttpTester.from(client.getInputStream());
    HttpTester.Response response=HttpTester.parseResponse(input);
    assertThat(response.getStatus(),Matchers.equalTo(HttpStatus.OK_200));
    assertThat(response.getContent(),Matchers.equalTo(content));
    assertThat(errors,Matchers.hasSize(0));
  }
 }

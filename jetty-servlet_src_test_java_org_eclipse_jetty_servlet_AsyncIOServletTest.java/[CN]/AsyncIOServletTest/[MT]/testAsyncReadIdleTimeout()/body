{
  final int status=567;
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    final HttpServletResponse response) throws ServletException, IOException {
      assertScope();
      final AsyncContext asyncContext=request.startAsync(request,response);
      asyncContext.setTimeout(0);
      final ServletInputStream inputStream=request.getInputStream();
      inputStream.setReadListener(new ReadListener(){
        @Override public void onDataAvailable() throws IOException {
          assertScope();
          while (inputStream.isReady() && !inputStream.isFinished())           inputStream.read();
        }
        @Override public void onAllDataRead() throws IOException {
          assertScope();
        }
        @Override public void onError(        Throwable t){
          assertScope();
          response.setStatus(status);
          asyncContext.complete();
        }
      }
);
    }
  }
,1000);
  String data1="0123456789";
  String data2="ABCDEF";
  String request="GET " + path + " HTTP/1.1\r\n"+ "Host: localhost:"+ connector.getLocalPort()+ "\r\n"+ "Content-Length: "+ (data1.length() + data2.length())+ "\r\n"+ "\r\n"+ data1;
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    client.setSoTimeout(5000);
    OutputStream output=client.getOutputStream();
    output.write(request.getBytes("UTF-8"));
    output.flush();
    SimpleHttpParser parser=new SimpleHttpParser();
    SimpleHttpResponse response=parser.readResponse(new BufferedReader(new InputStreamReader(client.getInputStream(),"UTF-8")));
    assertEquals(String.valueOf(status),response.getCode());
    assertEquals(-1,client.getInputStream().read());
  }
 }

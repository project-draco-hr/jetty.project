{
  final AtomicBoolean oda=new AtomicBoolean();
  final CountDownLatch latch=new CountDownLatch(1);
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      assertScope();
      final AsyncContext asyncContext=request.startAsync(request,response);
      response.setStatus(200);
      response.getOutputStream().close();
      request.getInputStream().setReadListener(new ReadListener(){
        @Override public void onDataAvailable() throws IOException {
          assertScope();
          oda.set(true);
        }
        @Override public void onAllDataRead() throws IOException {
          assertScope();
          asyncContext.complete();
          latch.countDown();
        }
        @Override public void onError(        Throwable t){
          assertScope();
          t.printStackTrace();
          asyncContext.complete();
        }
      }
);
    }
  }
);
  String request="GET " + path + " HTTP/1.1\r\n"+ "Host: localhost:"+ connector.getLocalPort()+ "\r\n"+ "Connection: close\r\n"+ "\r\n";
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    output.write(request.getBytes("UTF-8"));
    output.flush();
    String response=IO.toString(client.getInputStream());
    assertThat(response,containsString(" 200 OK"));
    latch.await();
  }
   Assert.assertFalse(oda.get());
}

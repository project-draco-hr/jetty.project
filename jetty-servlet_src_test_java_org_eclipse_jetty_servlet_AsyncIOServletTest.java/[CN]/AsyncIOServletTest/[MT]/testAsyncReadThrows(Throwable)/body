{
  final CountDownLatch latch=new CountDownLatch(1);
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    final HttpServletResponse response) throws ServletException, IOException {
      final AsyncContext asyncContext=request.startAsync(request,response);
      request.getInputStream().setReadListener(new ReadListener(){
        @Override public void onDataAvailable() throws IOException {
          if (throwable instanceof RuntimeException)           throw (RuntimeException)throwable;
          if (throwable instanceof Error)           throw (Error)throwable;
          throw new IOException(throwable);
        }
        @Override public void onAllDataRead() throws IOException {
        }
        @Override public void onError(        Throwable t){
          Assert.assertThat("onError type",t,instanceOf(throwable.getClass()));
          Assert.assertThat("onError message",t.getMessage(),is(throwable.getMessage()));
          latch.countDown();
          response.setStatus(500);
          asyncContext.complete();
        }
      }
);
    }
  }
);
  String data="0123456789";
  String request="GET " + path + " HTTP/1.1\r\n"+ "Host: localhost:"+ connector.getLocalPort()+ "\r\n"+ "Content-Length: "+ data.length()+ "\r\n"+ "\r\n"+ data;
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    output.write(request.getBytes("UTF-8"));
    output.flush();
    BufferedReader in=new BufferedReader(new InputStreamReader(client.getInputStream()));
    String line=in.readLine();
    assertThat(line,containsString("500 Server Error"));
    while (line.length() > 0) {
      line=in.readLine();
    }
    line=in.readLine();
    Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  }
 }

{
  final CountDownLatch latch=new CountDownLatch(1);
  String text="Now is the winter of our discontent. How Now Brown Cow. The quick brown fox jumped over the lazy dog.\n";
  for (int i=0; i < 10; i++)   text=text + text;
  final byte[] data=text.getBytes(StandardCharsets.ISO_8859_1);
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    final HttpServletResponse response) throws ServletException, IOException {
      assertScope();
      response.flushBuffer();
      final AsyncContext async=request.startAsync();
      final ServletOutputStream out=response.getOutputStream();
      out.setWriteListener(new WriteListener(){
        @Override public void onWritePossible() throws IOException {
          assertScope();
          while (out.isReady()) {
            try {
              Thread.sleep(100);
              out.write(data);
            }
 catch (            IOException e) {
              throw e;
            }
catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        @Override public void onError(        Throwable t){
          assertScope();
          async.complete();
          latch.countDown();
        }
      }
);
    }
  }
);
  String request="GET " + path + " HTTP/1.1\r\n"+ "Host: localhost:"+ connector.getLocalPort()+ "\r\n"+ "\r\n";
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    output.write(request.getBytes("UTF-8"));
    output.flush();
    BufferedReader in=new BufferedReader(new InputStreamReader(client.getInputStream()));
    String line=in.readLine();
    assertThat(line,containsString("200 OK"));
    while (line.length() > 0)     line=in.readLine();
    line=in.readLine();
    assertThat(line,not(containsString(" ")));
    line=in.readLine();
    assertThat(line,containsString("discontent. How Now Brown Cow. The "));
  }
   if (!latch.await(5,TimeUnit.SECONDS))   Assert.fail();
}

{
  if (_runningOnWindows) {
    return;
  }
  JettyPolicy ap=new JettyPolicy(getSinglePolicy("jetty-bad-certificate.policy"),evaluator);
  ap.refresh();
  Policy.setPolicy(ap);
  System.setSecurityManager(new SecurityManager());
  URL url=MavenTestingUtils.toTargetURL("test-policy/jetty-test-policy.jar");
  URLClassLoader loader;
  if (Thread.currentThread().getContextClassLoader() != null) {
    loader=new URLClassLoader(new URL[]{url},Thread.currentThread().getContextClassLoader());
  }
 else {
    loader=new URLClassLoader(new URL[]{url},ClassLoader.getSystemClassLoader());
  }
  Thread.currentThread().setContextClassLoader(loader);
  ap.refresh();
  try {
    Class<?> clazz=loader.loadClass("org.eclipse.jetty.toolchain.test.policy.Tester");
    Method m=clazz.getMethod("testEcho",new Class[]{String.class});
    String foo=(String)m.invoke(clazz.newInstance(),new Object[]{"foo"});
    assertEquals("foo",foo);
    Method m2=clazz.getMethod("testReadSystemProperty",new Class[]{String.class});
    m2.invoke(clazz.newInstance(),new Object[]{"foobar"});
    fail("Should have thrown an InvocationTargetException");
  }
 catch (  InvocationTargetException e) {
    assertTrue(e.getCause().getMessage().contains("access denied"));
  }
}

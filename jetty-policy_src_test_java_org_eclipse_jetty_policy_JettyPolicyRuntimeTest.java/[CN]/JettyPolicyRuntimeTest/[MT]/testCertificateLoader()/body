{
  Assume.assumeTrue(!OS.IS_WINDOWS);
  JettyPolicy ap=new JettyPolicy(MavenTestingUtils.getTestResourceDir("runtime-test-4").getAbsolutePath(),evaluator);
  ap.refresh();
  URL url=MavenTestingUtils.getTargetURL("test-policy/jetty-test-policy.jar");
  URLClassLoader loader;
  if (Thread.currentThread().getContextClassLoader() != null) {
    loader=new URLClassLoader(new URL[]{url},Thread.currentThread().getContextClassLoader());
  }
 else {
    loader=new URLClassLoader(new URL[]{url},ClassLoader.getSystemClassLoader());
  }
  Thread.currentThread().setContextClassLoader(loader);
  Policy.setPolicy(ap);
  System.setSecurityManager(new SecurityManager());
  ap.refresh();
  ap.dump(System.out);
  Class<?> clazz=loader.loadClass("org.eclipse.jetty.toolchain.test.policy.Tester");
  Method m=clazz.getMethod("testEcho",new Class[]{String.class});
  String foo=(String)m.invoke(clazz.newInstance(),"foo");
  assertEquals("foo",foo);
  Method m2=clazz.getMethod("testReadSystemProperty",new Class[]{String.class});
  m2.invoke(clazz.newInstance(),"foo");
  assertTrue("system property access was granted",true);
}

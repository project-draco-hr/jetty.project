{
  final String pangram1="the quick brown fox jumps over the lazy dog";
  final String pangram2="qualche vago ione tipo zolfo, bromo, sodio";
  final CountDownLatch handlerLatch=new CountDownLatch(1);
  Session session=startClient(version,startHTTPServer(version,new AbstractHandler(){
    @Override public void handle(    String target,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      httpResponse.setHeader("Transfer-Encoding","chunked");
      ServletOutputStream output=httpResponse.getOutputStream();
      output.write(pangram1.getBytes("UTF-8"));
      httpResponse.setHeader("EXTRA","X");
      output.flush();
      output.write(pangram2.getBytes("UTF-8"));
      handlerLatch.countDown();
    }
  }
),null);
  Fields headers=SPDYTestUtils.createHeaders(connector.getPort(),version,"GET","/foo");
  final CountDownLatch replyLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(2);
  session.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
    private final AtomicInteger replyFrames=new AtomicInteger();
    private final AtomicInteger dataFrames=new AtomicInteger();
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      Assert.assertEquals(1,replyFrames.incrementAndGet());
      Assert.assertFalse(replyInfo.isClose());
      Fields replyHeaders=replyInfo.getHeaders();
      Assert.assertTrue(replyHeaders.get(HTTPSPDYHeader.STATUS.name(version)).value().contains("200"));
      Assert.assertTrue(replyHeaders.get("extra").value().contains("X"));
      replyLatch.countDown();
    }
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      int count=dataFrames.incrementAndGet();
      if (count == 1) {
        Assert.assertFalse(dataInfo.isClose());
        Assert.assertEquals(pangram1,dataInfo.asString("UTF-8",true));
      }
 else       if (count == 2) {
        Assert.assertTrue(dataInfo.isClose());
        Assert.assertEquals(pangram2,dataInfo.asString("UTF-8",true));
      }
      dataLatch.countDown();
    }
  }
);
  Assert.assertTrue(handlerLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(replyLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
}

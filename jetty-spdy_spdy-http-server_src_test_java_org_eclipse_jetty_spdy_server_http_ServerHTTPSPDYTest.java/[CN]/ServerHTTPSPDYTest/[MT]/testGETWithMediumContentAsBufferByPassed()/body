{
  final byte[] data=new byte[2048];
  final CountDownLatch handlerLatch=new CountDownLatch(1);
  Session session=startClient(version,startHTTPServer(version,new AbstractHandler(){
    @Override public void handle(    String target,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      request.getResponse().getHttpOutput().sendContent(ByteBuffer.wrap(data));
      handlerLatch.countDown();
    }
  }
,30000),null);
  Fields headers=SPDYTestUtils.createHeaders("localhost",connector.getPort(),version,"GET","/foo");
  final CountDownLatch replyLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  session.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
    private final AtomicInteger replyFrames=new AtomicInteger();
    private final AtomicInteger contentLength=new AtomicInteger();
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      assertEquals(1,replyFrames.incrementAndGet());
      Assert.assertFalse(replyInfo.isClose());
      Fields replyHeaders=replyInfo.getHeaders();
      assertTrue(replyHeaders.get(HTTPSPDYHeader.STATUS.name(version)).value().contains("200"));
      replyLatch.countDown();
    }
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      contentLength.addAndGet(dataInfo.asBytes(true).length);
      if (dataInfo.isClose()) {
        Assert.assertEquals(data.length,contentLength.get());
        dataLatch.countDown();
      }
    }
  }
);
  assertTrue(handlerLatch.await(5,TimeUnit.SECONDS));
  assertTrue(replyLatch.await(5,TimeUnit.SECONDS));
  assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
}

{
  final String path="/foo";
  final CountDownLatch handlerLatch=new CountDownLatch(1);
  Session session=startClient(version,startHTTPServer(version,new AbstractHandler(){
    @Override public void handle(    String target,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      assertEquals("GET",httpRequest.getMethod());
      assertEquals(path,target);
      assertEquals(path,httpRequest.getRequestURI());
      assertThat("accept-encoding is set to gzip, even if client didn't set it",httpRequest.getHeader("accept-encoding"),containsString("gzip"));
      assertThat(httpRequest.getHeader("host"),is("localhost:" + connector.getLocalPort()));
      handlerLatch.countDown();
    }
  }
),null);
  Fields headers=SPDYTestUtils.createHeaders("localhost",connector.getLocalPort(),version,"GET",path);
  final CountDownLatch replyLatch=new CountDownLatch(1);
  session.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      assertTrue(replyInfo.isClose());
      Fields replyHeaders=replyInfo.getHeaders();
      assertThat(replyHeaders.get(HTTPSPDYHeader.STATUS.name(version)).value().contains("200"),is(true));
      assertThat(replyHeaders.get(HttpHeader.SERVER.asString()),is(notNullValue()));
      assertThat(replyHeaders.get(HttpHeader.X_POWERED_BY.asString()),is(notNullValue()));
      replyLatch.countDown();
    }
  }
);
  assertTrue(handlerLatch.await(5,TimeUnit.SECONDS));
  assertTrue(replyLatch.await(5,TimeUnit.SECONDS));
}

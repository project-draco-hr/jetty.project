{
  final byte[] data=new byte[2000];
  final CountDownLatch dispatchedAgainAfterExpire=new CountDownLatch(1);
  Session session=startClient(version,startHTTPServer(version,new AbstractHandler(){
    @Override public void handle(    String target,    final Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      if (request.getAttribute(SUSPENDED_ATTRIBUTE) == Boolean.TRUE) {
        dispatchedAgainAfterExpire.countDown();
      }
 else {
        readRequestData(request,data.length);
        AsyncContext asyncContext=request.startAsync();
        asyncContext.setTimeout(1000);
        asyncContext.addListener(new AsyncListenerAdapter());
        request.setAttribute(SUSPENDED_ATTRIBUTE,Boolean.TRUE);
      }
    }
  }
,30000),null);
  Fields headers=SPDYTestUtils.createHeaders("localhost",connector.getPort(),version,"POST","/foo");
  final CountDownLatch replyLatch=new CountDownLatch(1);
  Stream stream=session.syn(new SynInfo(5,TimeUnit.SECONDS,headers,false,(byte)0),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      Fields replyHeaders=replyInfo.getHeaders();
      assertTrue(replyHeaders.get(HTTPSPDYHeader.STATUS.name(version)).getValue().contains("200"));
      replyLatch.countDown();
    }
  }
);
  stream.data(new BytesDataInfo(data,true));
  assertTrue("Not dispatched again after expire",dispatchedAgainAfterExpire.await(5,TimeUnit.SECONDS));
  assertTrue("Reply not sent",replyLatch.await(5,TimeUnit.SECONDS));
}

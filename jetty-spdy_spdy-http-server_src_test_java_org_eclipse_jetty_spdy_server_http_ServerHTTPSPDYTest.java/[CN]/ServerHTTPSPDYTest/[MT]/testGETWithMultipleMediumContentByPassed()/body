{
  final byte[] data=new byte[2048];
  Session session=startClient(version,startHTTPServer(version,new AbstractHandler(){
    @Override public void handle(    String target,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      request.setHandled(true);
      OutputStream output=httpResponse.getOutputStream();
      output.write(data);
      output.flush();
      output.write(data);
      output.write(data);
    }
  }
,30000),null);
  Fields headers=SPDYTestUtils.createHeaders("localhost",connector.getPort(),version,"GET","/foo");
  final CountDownLatch replyLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  final AtomicInteger contentLength=new AtomicInteger();
  session.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      Assert.assertFalse(replyInfo.isClose());
      Fields replyHeaders=replyInfo.getHeaders();
      assertTrue(replyHeaders.get(HTTPSPDYHeader.STATUS.name(version)).getValue().contains("200"));
      replyLatch.countDown();
    }
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      dataInfo.consume(dataInfo.available());
      contentLength.addAndGet(dataInfo.length());
      if (dataInfo.isClose())       dataLatch.countDown();
    }
  }
);
  assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
  assertEquals(3 * data.length,contentLength.get());
}

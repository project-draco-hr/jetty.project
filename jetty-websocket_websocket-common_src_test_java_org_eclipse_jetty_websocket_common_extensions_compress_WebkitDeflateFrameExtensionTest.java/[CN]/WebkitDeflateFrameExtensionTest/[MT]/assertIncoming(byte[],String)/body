{
  WebSocketPolicy policy=WebSocketPolicy.newServerPolicy();
  WebkitDeflateFrameExtension ext=new WebkitDeflateFrameExtension();
  ext.setBufferPool(new MappedByteBufferPool());
  ext.setPolicy(policy);
  ExtensionConfig config=RequestedExtensionConfig.parse("x-webkit-deflate-frame");
  ext.setConfig(config);
  IncomingFramesCapture capture=new IncomingFramesCapture();
  FrameHandler incomingHandler=ext.createIncomingFrameHandler(capture);
  IncomingFrames incoming=new IncomingFrameHandler(incomingHandler);
  Parser parser=new Parser(policy);
  parser.configureFromExtensions(Collections.singletonList(ext));
  parser.setIncomingFramesHandler(incoming);
  parser.parse(ByteBuffer.wrap(raw));
  int len=expectedTextDatas.length;
  capture.assertFrameCount(len);
  capture.assertHasFrame(OpCode.TEXT,len);
  for (int i=0; i < len; i++) {
    WebSocketFrame actual=capture.getFrames().get(i);
    String prefix="Frame[" + i + "]";
    Assert.assertThat(prefix + ".opcode",actual.getOpCode(),is(OpCode.TEXT));
    Assert.assertThat(prefix + ".fin",actual.isFin(),is(true));
    Assert.assertThat(prefix + ".rsv1",actual.isRsv1(),is(false));
    Assert.assertThat(prefix + ".rsv2",actual.isRsv2(),is(false));
    Assert.assertThat(prefix + ".rsv3",actual.isRsv3(),is(false));
    ByteBuffer expected=BufferUtil.toBuffer(expectedTextDatas[i],StringUtil.__UTF8_CHARSET);
    Assert.assertThat(prefix + ".payloadLength",actual.getPayloadLength(),is(expected.remaining()));
    ByteBufferAssert.assertEquals(prefix + ".payload",expected,actual.getPayload().slice());
  }
}

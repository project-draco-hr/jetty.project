{
  ThreadLocalRandom random=ThreadLocalRandom.current();
  boolean download=random.nextBoolean();
  HttpMethod method=download ? HttpMethod.GET : HttpMethod.POST;
  int maxContentLength=128 * 1024;
  int contentLength=random.nextInt(maxContentLength) + 1;
  long requestId=requestIds.incrementAndGet();
  MetaData.Request request=newRequest(method.asString(),"/" + requestId,new HttpFields());
  if (download)   request.getFields().put("X-Download",String.valueOf(contentLength));
  HeadersFrame requestFrame=new HeadersFrame(request,null,download);
  FuturePromise<Stream> promise=new FuturePromise<>();
  CountDownLatch requestLatch=new CountDownLatch(1);
  AtomicBoolean reset=new AtomicBoolean();
  session.newStream(requestFrame,promise,new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      if (frame.isEndStream())       requestLatch.countDown();
    }
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream())       requestLatch.countDown();
    }
    @Override public void onReset(    Stream stream,    ResetFrame frame){
      reset.set(true);
      requestLatch.countDown();
    }
  }
);
  if (!download) {
    Stream stream=promise.get(5,TimeUnit.SECONDS);
    stream.data(new DataFrame(stream.getId(),ByteBuffer.allocate(contentLength),true),Callback.NOOP);
  }
  boolean success=requestLatch.await(5,TimeUnit.SECONDS);
  if (success)   latch.countDown();
 else   logger.warn("Request {} took too long{}{}{}{}",requestId,System.lineSeparator(),server.dump(),System.lineSeparator(),client.dump());
  return !reset.get();
}

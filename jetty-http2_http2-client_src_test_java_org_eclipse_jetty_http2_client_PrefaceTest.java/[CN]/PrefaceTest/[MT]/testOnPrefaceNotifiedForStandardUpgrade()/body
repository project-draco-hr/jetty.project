{
  Integer maxConcurrentStreams=128;
  AtomicReference<CountDownLatch> serverPrefaceLatch=new AtomicReference<>(new CountDownLatch(1));
  AtomicReference<CountDownLatch> serverSettingsLatch=new AtomicReference<>(new CountDownLatch(1));
  HttpConfiguration config=new HttpConfiguration();
  prepareServer(new HttpConnectionFactory(config),new HTTP2CServerConnectionFactory(config){
    @Override protected ServerSessionListener newSessionListener(    Connector connector,    EndPoint endPoint){
      return new ServerSessionListener.Adapter(){
        @Override public Map<Integer,Integer> onPreface(        Session session){
          Map<Integer,Integer> serverSettings=new HashMap<>();
          serverSettings.put(SettingsFrame.MAX_CONCURRENT_STREAMS,maxConcurrentStreams);
          serverPrefaceLatch.get().countDown();
          return serverSettings;
        }
        @Override public void onSettings(        Session session,        SettingsFrame frame){
          serverSettingsLatch.get().countDown();
        }
        @Override public Stream.Listener onNewStream(        Stream stream,        HeadersFrame frame){
          MetaData.Response response=new MetaData.Response(HttpVersion.HTTP_2,HttpStatus.OK_200,new HttpFields());
          stream.headers(new HeadersFrame(stream.getId(),response,null,true),Callback.NOOP);
          return null;
        }
      }
;
    }
  }
);
  server.start();
  ByteBufferPool byteBufferPool=new MappedByteBufferPool();
  try (SocketChannel socket=SocketChannel.open()){
    socket.connect(new InetSocketAddress("localhost",connector.getLocalPort()));
    String upgradeRequest="" + "GET /one HTTP/1.1\r\n" + "Host: localhost\r\n"+ "Connection: Upgrade, HTTP2-Settings\r\n"+ "Upgrade: h2c\r\n"+ "HTTP2-Settings: ==\r\n"+ "\r\n";
    ByteBuffer upgradeBuffer=ByteBuffer.wrap(upgradeRequest.getBytes(StandardCharsets.ISO_8859_1));
    socket.write(upgradeBuffer);
    Assert.assertTrue(serverPrefaceLatch.get().await(5,TimeUnit.SECONDS));
    Assert.assertTrue(serverSettingsLatch.get().await(5,TimeUnit.SECONDS));
    ByteBuffer buffer=byteBufferPool.acquire(1024,true);
    http1:     while (true) {
      BufferUtil.clearToFill(buffer);
      int read=socket.read(buffer);
      BufferUtil.flipToFlush(buffer,0);
      if (read < 0)       Assert.fail();
      int crlfs=0;
      while (buffer.hasRemaining()) {
        byte b=buffer.get();
        if (b == '\r' || b == '\n')         ++crlfs;
 else         crlfs=0;
        if (crlfs == 4)         break http1;
      }
    }
    serverPrefaceLatch.set(new CountDownLatch(1));
    serverSettingsLatch.set(new CountDownLatch(1));
    Generator generator=new Generator(byteBufferPool);
    ByteBufferPool.Lease lease=new ByteBufferPool.Lease(byteBufferPool);
    generator.control(lease,new PrefaceFrame());
    Map<Integer,Integer> clientSettings=new HashMap<>();
    clientSettings.put(SettingsFrame.ENABLE_PUSH,1);
    generator.control(lease,new SettingsFrame(clientSettings,false));
    List<ByteBuffer> buffers=lease.getByteBuffers();
    socket.write(buffers.toArray(new ByteBuffer[buffers.size()]));
    Assert.assertFalse(serverPrefaceLatch.get().await(1,TimeUnit.SECONDS));
    Assert.assertTrue(serverSettingsLatch.get().await(5,TimeUnit.SECONDS));
    CountDownLatch clientSettingsLatch=new CountDownLatch(1);
    AtomicBoolean responded=new AtomicBoolean();
    Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
      @Override public void onSettings(      SettingsFrame frame){
        if (frame.isReply())         return;
        Assert.assertEquals(maxConcurrentStreams,frame.getSettings().get(SettingsFrame.MAX_CONCURRENT_STREAMS));
        clientSettingsLatch.countDown();
      }
      @Override public void onHeaders(      HeadersFrame frame){
        if (frame.isEndStream())         responded.set(true);
      }
    }
,4096,8192);
    while (true) {
      parser.parse(buffer);
      if (responded.get())       break;
      BufferUtil.clearToFill(buffer);
      int read=socket.read(buffer);
      BufferUtil.flipToFlush(buffer,0);
      if (read < 0)       Assert.fail();
    }
    Assert.assertTrue(clientSettingsLatch.await(5,TimeUnit.SECONDS));
  }
 }

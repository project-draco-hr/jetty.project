{
  start(new ServerSessionListener.Adapter(){
    @Override public void onAccept(    Session session){
      session.settings(new SettingsFrame(new HashMap<>(),false),Callback.NOOP);
    }
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      MetaData.Response metaData=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),metaData,null,true);
      stream.headers(responseFrame,Callback.NOOP);
      return null;
    }
  }
);
  Session session=newClient(new Session.Listener.Adapter(){
    @Override public Map<Integer,Integer> onPreface(    Session session){
      try {
        Thread.sleep(1000);
        return null;
      }
 catch (      InterruptedException x) {
        x.printStackTrace();
        return null;
      }
    }
  }
);
  CountDownLatch latch=new CountDownLatch(1);
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(metaData,null,true);
  session.newStream(requestFrame,new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      if (frame.isEndStream())       latch.countDown();
    }
  }
);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

{
  if (LOG.isDebugEnabled())   LOG.debug(String.format("CtxTbl[%x] decoding %d octets",_context.hashCode(),buffer.remaining()));
  if (buffer.remaining() > _builder.getMaxSize())   throw new BadMessageException(HttpStatus.REQUEST_ENTITY_TOO_LARGE_413,"Header frame size " + buffer.remaining() + ">"+ _builder.getMaxSize());
  while (buffer.hasRemaining()) {
    if (LOG.isDebugEnabled()) {
      int l=Math.min(buffer.remaining(),16);
      LOG.debug("decode  " + TypeUtil.toHexString(buffer.array(),buffer.arrayOffset() + buffer.position(),l) + (l < buffer.remaining() ? "..." : ""));
    }
    byte b=buffer.get();
    if (b < 0) {
      int index=NBitInteger.decode(buffer,7);
      Entry entry=_context.get(index);
      if (entry == null) {
        throw new BadMessageException("Unknown index " + index);
      }
 else       if (entry.isStatic()) {
        if (LOG.isDebugEnabled())         LOG.debug("decode IdxStatic {}",entry);
        _builder.emit(entry.getHttpField());
      }
 else {
        if (LOG.isDebugEnabled())         LOG.debug("decode Idx {}",entry);
        _builder.emit(entry.getHttpField());
      }
    }
 else {
      byte f=(byte)((b & 0xF0) >> 4);
      String name;
      HttpHeader header;
      String value;
      boolean indexed;
      int name_index;
switch (f) {
case 2:
case 3:
        int size=NBitInteger.decode(buffer,5);
      if (LOG.isDebugEnabled())       LOG.debug("decode resize=" + size);
    if (size > _localMaxHeaderTableSize)     throw new IllegalArgumentException();
  _context.resize(size);
continue;
case 0:
case 1:
indexed=false;
name_index=NBitInteger.decode(buffer,4);
break;
case 4:
case 5:
case 6:
case 7:
indexed=true;
name_index=NBitInteger.decode(buffer,6);
break;
default :
throw new IllegalStateException();
}
boolean huffmanName=false;
if (name_index > 0) {
Entry name_entry=_context.get(name_index);
name=name_entry.getHttpField().getName();
header=name_entry.getHttpField().getHeader();
}
 else {
huffmanName=(buffer.get() & 0x80) == 0x80;
int length=NBitInteger.decode(buffer,7);
_builder.checkSize(length,huffmanName);
if (huffmanName) name=Huffman.decode(buffer,length);
 else name=toASCIIString(buffer,length);
for (int i=0; i < name.length(); i++) {
char c=name.charAt(i);
if (c >= 'A' && c <= 'Z') {
throw new BadMessageException(400,"Uppercase header name");
}
}
header=HttpHeader.CACHE.get(name);
}
boolean huffmanValue=(buffer.get() & 0x80) == 0x80;
int length=NBitInteger.decode(buffer,7);
_builder.checkSize(length,huffmanValue);
if (huffmanValue) value=Huffman.decode(buffer,length);
 else value=toASCIIString(buffer,length);
HttpField field;
if (header == null) {
field=new HttpField(null,name,value);
}
 else {
switch (header) {
case C_STATUS:
if (indexed) field=new HttpField.IntValueHttpField(header,name,value);
 else field=new HttpField(header,name,value);
break;
case C_AUTHORITY:
field=new AuthorityHttpField(value);
break;
case CONTENT_LENGTH:
if ("0".equals(value)) field=CONTENT_LENGTH_0;
 else field=new HttpField.LongValueHttpField(header,name,value);
break;
default :
field=new HttpField(header,name,value);
break;
}
}
if (LOG.isDebugEnabled()) LOG.debug("decoded '" + field + "' by Lit"+ (name_index > 0 ? "IdxName" : (huffmanName ? "HuffName" : "LitName"))+ (huffmanValue ? "HuffVal" : "LitVal")+ (indexed ? "Idx" : ""));
_builder.emit(field);
if (indexed) {
_context.add(field);
}
}
}
return _builder.build();
}

{
  if (LOG.isDebugEnabled())   LOG.debug(String.format("CtxTbl[%x] decoding %d octets",_context.hashCode(),buffer.remaining()));
  if (buffer.remaining() > _builder.getMaxSize())   throw new BadMessageException(HttpStatus.REQUEST_ENTITY_TOO_LARGE_413,"Header frame size " + buffer.remaining() + ">"+ _builder.getMaxSize());
  while (buffer.hasRemaining()) {
    if (LOG.isDebugEnabled()) {
      int l=Math.min(buffer.remaining(),16);
      LOG.debug("decode  " + TypeUtil.toHexString(buffer.array(),buffer.arrayOffset() + buffer.position(),l) + (l < buffer.remaining() ? "..." : ""));
    }
    byte b=buffer.get();
    if (b < 0) {
      int index=NBitInteger.decode(buffer,7);
      Entry entry=_context.get(index);
      if (entry.isStatic()) {
        if (LOG.isDebugEnabled())         LOG.debug("decode IdxStatic {}",entry);
        _builder.emit(entry.getHttpField());
      }
 else {
        if (LOG.isDebugEnabled())         LOG.debug("decode Idx {}",entry);
        _builder.emit(entry.getHttpField());
      }
    }
 else {
      int f=(b & 0xF0) >> 4;
      String name;
      HttpHeader header;
      String value;
      if (f <= 1 || f >= 4) {
        boolean indexed=f >= 4;
        int bits=indexed ? 6 : 4;
        boolean huffmanName=false;
        int name_index=NBitInteger.decode(buffer,bits);
        if (name_index > 0) {
          Entry name_entry=_context.get(name_index);
          name=name_entry.getHttpField().getName();
          header=name_entry.getHttpField().getHeader();
        }
 else {
          huffmanName=(buffer.get() & 0x80) == 0x80;
          int length=NBitInteger.decode(buffer,7);
          _builder.checkSize(length,huffmanName);
          if (huffmanName)           name=Huffman.decode(buffer,length);
 else           name=toASCIIString(buffer,length);
          for (int i=0; i < name.length(); i++) {
            char c=name.charAt(i);
            if (c >= 'A' && c <= 'Z') {
              throw new BadMessageException(400,"Uppercase header name");
            }
          }
          header=HttpHeader.CACHE.get(name);
        }
        boolean huffmanValue=(buffer.get() & 0x80) == 0x80;
        int length=NBitInteger.decode(buffer,7);
        _builder.checkSize(length,huffmanValue);
        if (huffmanValue)         value=Huffman.decode(buffer,length);
 else         value=toASCIIString(buffer,length);
        HttpField field;
switch (name) {
case ":method":
          HttpMethod method=HttpMethod.CACHE.get(value);
        if (method != null)         field=new StaticValueHttpField(header,name,method.asString(),method);
 else         field=new AuthorityHttpField(value);
      break;
case ":status":
    Integer code=Integer.valueOf(value);
  field=new StaticValueHttpField(header,name,value,code);
break;
case ":scheme":
HttpScheme scheme=HttpScheme.CACHE.get(value);
if (scheme != null) field=new StaticValueHttpField(header,name,scheme.asString(),scheme);
 else field=new AuthorityHttpField(value);
break;
case ":authority":
field=new AuthorityHttpField(value);
break;
case ":path":
if (indexed) field=new StaticValueHttpField(header,name,value,new HttpURI(value));
 else field=new HttpField(header,name,value);
break;
default :
field=new HttpField(header,name,value);
break;
}
if (LOG.isDebugEnabled()) LOG.debug("decoded '" + field + "' by Lit"+ (name_index > 0 ? "IdxName" : (huffmanName ? "HuffName" : "LitName"))+ (huffmanValue ? "HuffVal" : "LitVal")+ (indexed ? "Idx" : ""));
_builder.emit(field);
if (indexed) {
_context.add(field);
}
}
 else if (f == 2) {
int size=NBitInteger.decode(buffer,4);
if (LOG.isDebugEnabled()) LOG.debug("decode resize=" + size);
if (size > _localMaxHeaderTableSize) throw new IllegalArgumentException();
_context.resize(size);
}
 else if (f == 3) {
if (LOG.isDebugEnabled()) LOG.debug("unused");
}
}
}
return _builder.build();
}

{
  URI uri=_bundleToUri.get(bundle);
  if (!_alreadyParsed.add(uri)) {
    return;
  }
  String bundleClasspath=(String)bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH);
  if (bundleClasspath == null) {
    bundleClasspath=".";
  }
  TreeSet<String> paths=new TreeSet<String>(new Comparator<String>(){
    public int compare(    String o1,    String o2){
      int paths1=new StringTokenizer(o1,"/",false).countTokens();
      int paths2=new StringTokenizer(o2,"/",false).countTokens();
      if (paths1 == paths2) {
        return o1.compareTo(o2);
      }
      return paths2 - paths1;
    }
  }
);
  boolean hasDotPath=false;
  StringTokenizer tokenizer=new StringTokenizer(bundleClasspath,",;",false);
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken().trim();
    if (!token.startsWith("/")) {
      token="/" + token;
    }
    if (token.equals("/.")) {
      hasDotPath=true;
    }
 else     if (!token.endsWith(".jar") && !token.endsWith("/")) {
      paths.add(token + "/");
    }
 else {
      paths.add(token);
    }
  }
  if (bundle.getEntry("/.classpath") != null) {
    if (bundle.getEntry("/bin/") != null) {
      paths.add("/bin/");
    }
 else     if (bundle.getEntry("/target/classes/") != null) {
      paths.add("/target/classes/");
    }
  }
  Enumeration classes=bundle.findEntries("/","*.class",true);
  if (classes == null) {
    return;
  }
  while (classes.hasMoreElements()) {
    URL classUrl=(URL)classes.nextElement();
    String path=classUrl.getPath();
    String name=null;
    for (    String prefixPath : paths) {
      if (path.startsWith(prefixPath)) {
        name=path.substring(prefixPath.length());
        break;
      }
    }
    if (name == null && hasDotPath) {
      name=path.substring(1);
    }
    if (name == null) {
      continue;
    }
    String shortName=name.replace('/','.').substring(0,name.length() - 6);
    if ((resolver == null) || (!resolver.isExcluded(shortName) && (!isParsed(shortName) || resolver.shouldOverride(shortName)))) {
      try (InputStream classInputStream=classUrl.openStream()){
        scanClass(handlers,getResource(bundle),classInputStream);
      }
     }
  }
}

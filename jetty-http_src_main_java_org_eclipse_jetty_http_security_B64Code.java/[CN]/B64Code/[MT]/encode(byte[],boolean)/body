{
  if (b == null)   return null;
  int bLen=b.length;
  int cLen=((bLen + 2) / 3) * 4;
  if (rfc2045)   cLen+=2 + 2 * cLen / 76;
  char c[]=new char[cLen];
  int ci=0;
  int bi=0;
  byte b0, b1, b2;
  int stop=(bLen / 3) * 3;
  int l=0;
  while (bi < stop) {
    b0=b[bi++];
    b1=b[bi++];
    b2=b[bi++];
    c[ci++]=rfc1421alphabet[(b0 >>> 2) & 0x3f];
    c[ci++]=rfc1421alphabet[(b0 << 4) & 0x3f | (b1 >>> 4) & 0x0f];
    c[ci++]=rfc1421alphabet[(b1 << 2) & 0x3f | (b2 >>> 6) & 0x03];
    c[ci++]=rfc1421alphabet[b2 & 077];
    l+=4;
    if (rfc2045 && l % 76 == 0) {
      c[ci++]=13;
      c[ci++]=10;
    }
  }
  if (bLen != bi) {
switch (bLen % 3) {
case 2:
      b0=b[bi++];
    b1=b[bi++];
  c[ci++]=rfc1421alphabet[(b0 >>> 2) & 0x3f];
c[ci++]=rfc1421alphabet[(b0 << 4) & 0x3f | (b1 >>> 4) & 0x0f];
c[ci++]=rfc1421alphabet[(b1 << 2) & 0x3f];
c[ci++]=pad;
break;
case 1:
b0=b[bi++];
c[ci++]=rfc1421alphabet[(b0 >>> 2) & 0x3f];
c[ci++]=rfc1421alphabet[(b0 << 4) & 0x3f];
c[ci++]=pad;
c[ci++]=pad;
break;
default :
break;
}
}
if (rfc2045) {
c[ci++]=13;
c[ci++]=10;
}
return c;
}

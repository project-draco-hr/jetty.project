{
  SSLEngine server=__sslCtxFactory.newSslEngine();
  SSLEngine client=__sslCtxFactory.newSslEngine();
  ByteBuffer netC2S=ByteBuffer.allocate(server.getSession().getPacketBufferSize());
  ByteBuffer netS2C=ByteBuffer.allocate(server.getSession().getPacketBufferSize());
  ByteBuffer serverIn=ByteBuffer.allocate(server.getSession().getApplicationBufferSize());
  ByteBuffer serverOut=ByteBuffer.allocate(server.getSession().getApplicationBufferSize());
  ByteBuffer clientIn=ByteBuffer.allocate(client.getSession().getApplicationBufferSize());
  SSLEngineResult result;
  client.setUseClientMode(true);
  client.beginHandshake();
  Assert.assertEquals(HandshakeStatus.NEED_WRAP,client.getHandshakeStatus());
  netS2C.flip();
  result=client.unwrap(netS2C,clientIn);
  assertEquals(SSLEngineResult.Status.OK,result.getStatus());
  assertEquals(0,result.bytesConsumed());
  assertEquals(0,result.bytesProduced());
  assertEquals(HandshakeStatus.NEED_WRAP,result.getHandshakeStatus());
  netS2C.clear();
  result=client.wrap(BufferUtil.EMPTY_BUFFER,netC2S);
  assertEquals(SSLEngineResult.Status.OK,result.getStatus());
  assertEquals(0,result.bytesConsumed());
  assertThat(result.bytesProduced(),greaterThan(0));
  assertEquals(HandshakeStatus.NEED_UNWRAP,result.getHandshakeStatus());
  netC2S.flip();
  assertEquals(netC2S.remaining(),result.bytesProduced());
  server.setUseClientMode(false);
  server.beginHandshake();
  Assert.assertEquals(HandshakeStatus.NEED_UNWRAP,server.getHandshakeStatus());
  serverOut.put(BufferUtil.toBuffer("Hello World"));
  serverOut.flip();
  result=server.wrap(serverOut,netS2C);
  assertEquals(SSLEngineResult.Status.OK,result.getStatus());
  assertEquals(0,result.bytesConsumed());
  assertEquals(0,result.bytesProduced());
  assertEquals(HandshakeStatus.NEED_UNWRAP,result.getHandshakeStatus());
  result=server.unwrap(netC2S,BufferUtil.EMPTY_BUFFER);
  assertEquals(SSLEngineResult.Status.BUFFER_OVERFLOW,result.getStatus());
  assertEquals(0,result.bytesConsumed());
  assertEquals(0,result.bytesProduced());
  assertEquals(HandshakeStatus.NEED_UNWRAP,result.getHandshakeStatus());
  serverIn.position(serverIn.limit());
  result=server.unwrap(netC2S,serverIn);
  assertEquals(SSLEngineResult.Status.BUFFER_OVERFLOW,result.getStatus());
  assertEquals(0,result.bytesConsumed());
  assertEquals(0,result.bytesProduced());
  assertEquals(HandshakeStatus.NEED_UNWRAP,result.getHandshakeStatus());
  serverIn.clear();
  result=server.unwrap(netC2S,serverIn);
  assertEquals(SSLEngineResult.Status.OK,result.getStatus());
  assertThat(result.bytesConsumed(),greaterThan(0));
  assertEquals(0,result.bytesProduced());
  assertEquals(HandshakeStatus.NEED_TASK,result.getHandshakeStatus());
  server.getDelegatedTask().run();
  assertEquals(HandshakeStatus.NEED_WRAP,server.getHandshakeStatus());
}

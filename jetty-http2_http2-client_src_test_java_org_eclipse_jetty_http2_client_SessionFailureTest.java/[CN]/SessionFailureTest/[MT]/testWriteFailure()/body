{
  final CountDownLatch writeLatch=new CountDownLatch(1);
  final CountDownLatch serverFailureLatch=new CountDownLatch(1);
  start(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      ((HTTP2Session)stream.getSession()).getEndPoint().close();
      stream.headers(frame,new Callback(){
        @Override public void failed(        Throwable x){
          writeLatch.countDown();
        }
      }
);
      return null;
    }
    @Override public void onFailure(    Session session,    Throwable failure){
      serverFailureLatch.countDown();
    }
  }
);
  final CountDownLatch clientFailureLatch=new CountDownLatch(1);
  Session session=newClient(new Session.Listener.Adapter(){
    @Override public void onFailure(    Session session,    Throwable failure){
      clientFailureLatch.countDown();
    }
  }
);
  HeadersFrame frame=new HeadersFrame(0,newRequest("GET",new HttpFields()),null,true);
  Promise<Stream> promise=new Promise.Adapter<>();
  session.newStream(frame,promise,null);
  Assert.assertTrue(writeLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(serverFailureLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(clientFailureLatch.await(5,TimeUnit.SECONDS));
  Assert.assertFalse(((HTTP2Session)session).getEndPoint().isOpen());
}

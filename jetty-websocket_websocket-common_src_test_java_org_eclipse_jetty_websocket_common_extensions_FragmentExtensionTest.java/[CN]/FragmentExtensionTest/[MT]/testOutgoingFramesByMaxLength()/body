{
  OutgoingFramesCapture capture=new OutgoingFramesCapture();
  FragmentExtension ext=new FragmentExtension();
  ext.setBufferPool(bufferPool);
  ext.setPolicy(WebSocketPolicy.newServerPolicy());
  ExtensionConfig config=ExtensionConfig.parse("fragment;maxLength=20");
  ext.setConfig(config);
  ext.setNextOutgoingFrames(capture);
  List<String> quote=new ArrayList<>();
  quote.add("No amount of experimentation can ever prove me right;");
  quote.add("a single experiment can prove me wrong.");
  quote.add("-- Albert Einstein");
  for (  String section : quote) {
    Frame frame=new TextFrame().setPayload(section);
    ext.outgoingFrame(frame,null);
  }
  List<WebSocketFrame> expectedFrames=new ArrayList<>();
  expectedFrames.add(new TextFrame().setPayload("No amount of experim").setFin(false));
  expectedFrames.add(new ContinuationFrame().setPayload("entation can ever pr").setFin(false));
  expectedFrames.add(new ContinuationFrame().setPayload("ove me right;").setFin(true));
  expectedFrames.add(new TextFrame().setPayload("a single experiment ").setFin(false));
  expectedFrames.add(new ContinuationFrame().setPayload("can prove me wrong.").setFin(true));
  expectedFrames.add(new TextFrame().setPayload("-- Albert Einstein").setFin(true));
  int len=expectedFrames.size();
  capture.assertFrameCount(len);
  String prefix;
  LinkedList<WebSocketFrame> frames=capture.getFrames();
  for (int i=0; i < len; i++) {
    prefix="Frame[" + i + "]";
    WebSocketFrame actualFrame=frames.get(i);
    WebSocketFrame expectedFrame=expectedFrames.get(i);
    Assert.assertThat(prefix + ".opcode",actualFrame.getOpCode(),is(expectedFrame.getOpCode()));
    Assert.assertThat(prefix + ".fin",actualFrame.isFin(),is(expectedFrame.isFin()));
    Assert.assertThat(prefix + ".rsv1",actualFrame.isRsv1(),is(expectedFrame.isRsv1()));
    Assert.assertThat(prefix + ".rsv2",actualFrame.isRsv2(),is(expectedFrame.isRsv2()));
    Assert.assertThat(prefix + ".rsv3",actualFrame.isRsv3(),is(expectedFrame.isRsv3()));
    ByteBuffer expectedData=expectedFrame.getPayload().slice();
    ByteBuffer actualData=actualFrame.getPayload().slice();
    Assert.assertThat(prefix + ".payloadLength",actualData.remaining(),is(expectedData.remaining()));
    ByteBufferAssert.assertEquals(prefix + ".payload",expectedData,actualData);
  }
}

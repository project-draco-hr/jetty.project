{
  BlockheadClient client=new BlockheadClient(server.getServerUri());
  try {
    client.connect();
    client.sendStandardRequest();
    client.expectUpgradeResponse();
    byte buf1[]=new byte[128];
    byte buf2[]=new byte[128];
    byte buf3[]=new byte[128];
    Arrays.fill(buf1,(byte)0xAA);
    Arrays.fill(buf2,(byte)0xBB);
    Arrays.fill(buf3,(byte)0xCC);
    WebSocketFrame bin;
    bin=WebSocketFrame.binary(buf1).setFin(false);
    client.write(bin);
    bin=new WebSocketFrame(OpCode.CONTINUATION).setPayload(buf2).setFin(false);
    client.write(bin);
    bin=new WebSocketFrame(OpCode.CONTINUATION).setPayload(buf3).setFin(true);
    client.write(bin);
    Queue<WebSocketFrame> frames=client.readFrames(1,TimeUnit.MILLISECONDS,1000);
    WebSocketFrame binmsg=frames.remove();
    int expectedSize=buf1.length + buf2.length + buf3.length;
    Assert.assertThat("BinaryFrame.payloadLength",binmsg.getPayloadLength(),is(expectedSize));
    int aaCount=0;
    int bbCount=0;
    int ccCount=0;
    ByteBuffer echod=binmsg.getPayload();
    while (echod.remaining() >= 1) {
      byte b=echod.get();
switch (b) {
case (byte)0xAA:
        aaCount++;
      break;
case (byte)0xBB:
    bbCount++;
  break;
case (byte)0xCC:
ccCount++;
break;
default :
Assert.fail(String.format("Encountered invalid byte 0x%02X",(byte)(0xFF & b)));
}
}
Assert.assertThat("Echoed data count for 0xAA",aaCount,is(buf1.length));
Assert.assertThat("Echoed data count for 0xBB",bbCount,is(buf2.length));
Assert.assertThat("Echoed data count for 0xCC",ccCount,is(buf3.length));
}
  finally {
client.close();
}
}

{
  Connection result=idleConnections.poll();
  if (result != null)   return result;
  final int maxConnections=client.getMaxConnectionsPerDestination();
  while (true) {
    int current=connectionCount.get();
    final int next=current + 1;
    if (next > maxConnections) {
      LOG.debug("Max connections {} reached for {}",current,this);
      return idleConnections.poll();
    }
    if (connectionCount.compareAndSet(current,next)) {
      LOG.debug("Creating connection {}/{} for {}",next,maxConnections,this);
      Promise<Connection> promise=new Promise<Connection>(){
        @Override public void succeeded(        Connection connection){
          process(connection,true);
        }
        @Override public void failed(        final Throwable x){
          client.getExecutor().execute(new Runnable(){
            @Override public void run(){
              drain(x);
            }
          }
);
        }
      }
;
      createConnection(new ProxyPromise(promise){
        @Override public void succeeded(        Connection connection){
          LOG.debug("Created connection {}/{} {} for {}",next,maxConnections,connection,HttpDestination.this);
          super.succeeded(connection);
        }
        @Override public void failed(        Throwable x){
          LOG.debug("Connection failed {} for {}",x,HttpDestination.this);
          connectionCount.decrementAndGet();
          super.failed(x);
        }
      }
);
      return idleConnections.poll();
    }
  }
}

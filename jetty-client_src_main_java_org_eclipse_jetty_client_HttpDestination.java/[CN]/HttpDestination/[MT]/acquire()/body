{
  Connection result=idleConnections.poll();
  if (result != null)   return result;
  final int maxConnections=client.getMaxConnectionsPerAddress();
  while (true) {
    int current=connectionCount.get();
    final int next=current + 1;
    if (next > maxConnections) {
      LOG.debug("Max connections {} reached for {}",current,this);
      return idleConnections.poll();
    }
    if (connectionCount.compareAndSet(current,next)) {
      LOG.debug("Creating connection {}/{} for {}",next,maxConnections,this);
      newConnection(new Callback<Connection>(){
        @Override public void completed(        Connection connection){
          LOG.debug("Created connection {}/{} {} for {}",next,maxConnections,connection,HttpDestination.this);
          process(connection,true);
        }
        @Override public void failed(        Connection connection,        final Throwable x){
          LOG.debug("Connection failed {} for {}",x,HttpDestination.this);
          connectionCount.decrementAndGet();
          client.getExecutor().execute(new Runnable(){
            @Override public void run(){
              RequestPair pair=requests.poll();
              if (pair != null) {
                Request request=pair.request;
                requestNotifier.notifyFailure(request,x);
                Response.Listener listener=pair.listener;
                HttpResponse response=new HttpResponse(request,listener);
                responseNotifier.notifyFailure(listener,response,x);
                responseNotifier.notifyComplete(listener,new Result(request,x,response,x));
              }
            }
          }
);
        }
      }
);
      return idleConnections.poll();
    }
  }
}

{
  final HttpConnection httpConnection=(HttpConnection)connection;
  RequestContext requestContext=requests.poll();
  if (requestContext == null) {
    LOG.debug("{} idle",httpConnection);
    if (!idleConnections.offer(httpConnection)) {
      LOG.debug("{} idle overflow");
      httpConnection.close();
    }
    if (!client.isRunning()) {
      LOG.debug("{} is stopping",client);
      remove(httpConnection);
      httpConnection.close();
    }
  }
 else {
    final Request request=requestContext.request;
    final List<Response.ResponseListener> listeners=requestContext.listeners;
    Throwable cause=request.getAbortCause();
    if (cause != null) {
      abort(request,listeners,cause);
      LOG.debug("Aborted {} before processing",request);
    }
 else {
      LOG.debug("{} active",httpConnection);
      if (!activeConnections.offer(httpConnection)) {
        LOG.warn("{} active overflow");
      }
      if (dispatch) {
        client.getExecutor().execute(new Runnable(){
          @Override public void run(){
            httpConnection.send(request,listeners);
          }
        }
);
      }
 else {
        httpConnection.send(request,listeners);
      }
    }
  }
}

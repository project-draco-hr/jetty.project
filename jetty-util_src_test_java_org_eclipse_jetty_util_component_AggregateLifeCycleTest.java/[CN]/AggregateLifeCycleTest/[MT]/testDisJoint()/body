{
  final AtomicInteger destroyed=new AtomicInteger();
  final AtomicInteger started=new AtomicInteger();
  final AtomicInteger stopped=new AtomicInteger();
  AggregateLifeCycle a0=new AggregateLifeCycle();
  AggregateLifeCycle a1=new AggregateLifeCycle(){
    @Override protected void doStart() throws Exception {
      started.incrementAndGet();
      super.doStart();
    }
    @Override protected void doStop() throws Exception {
      stopped.incrementAndGet();
      super.doStop();
    }
    @Override public void destroy(){
      destroyed.incrementAndGet();
      super.destroy();
    }
  }
;
  a1.start();
  a0.addBean(a1);
  Assert.assertFalse(a0.isJoined(a1));
  a0.start();
  Assert.assertEquals(1,started.get());
  Assert.assertEquals(0,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a0.start();
  Assert.assertEquals(1,started.get());
  Assert.assertEquals(0,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a0.stop();
  Assert.assertEquals(1,started.get());
  Assert.assertEquals(0,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a1.stop();
  Assert.assertEquals(1,started.get());
  Assert.assertEquals(1,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a0.start();
  Assert.assertEquals(1,started.get());
  Assert.assertEquals(1,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a0.join(a1);
  Assert.assertTrue(a0.isJoined(a1));
  a0.stop();
  Assert.assertEquals(1,started.get());
  Assert.assertEquals(1,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a0.start();
  Assert.assertEquals(2,started.get());
  Assert.assertEquals(1,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a0.stop();
  Assert.assertEquals(2,started.get());
  Assert.assertEquals(2,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a0.disjoin(a1);
  Assert.assertFalse(a0.isJoined(a1));
  a0.destroy();
  Assert.assertEquals(2,started.get());
  Assert.assertEquals(2,stopped.get());
  Assert.assertEquals(0,destroyed.get());
  a1.destroy();
  Assert.assertEquals(2,started.get());
  Assert.assertEquals(2,stopped.get());
  Assert.assertEquals(1,destroyed.get());
}

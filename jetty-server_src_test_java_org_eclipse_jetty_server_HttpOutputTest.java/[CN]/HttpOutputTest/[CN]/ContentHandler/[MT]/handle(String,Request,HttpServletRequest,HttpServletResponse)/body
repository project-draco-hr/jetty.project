{
  baseRequest.setHandled(true);
  response.setContentType("text/plain");
  final HttpOutput out=(HttpOutput)response.getOutputStream();
  if (_contentInputStream != null) {
    out.sendContent(_contentInputStream);
    _contentInputStream=null;
    return;
  }
  if (_contentChannel != null) {
    out.sendContent(_contentChannel);
    _contentChannel=null;
    return;
  }
  if (_bytes != null) {
    if (_async) {
      final AsyncContext async=request.startAsync();
      out.setWriteListener(new WriteListener(){
        @Override public void onWritePossible() throws IOException {
          while (out.isReady()) {
            int len=_content.remaining();
            if (len > _bytes.length)             len=_bytes.length;
            if (len == 0) {
              async.complete();
              break;
            }
            _content.get(_bytes,0,len);
            out.write(_bytes,0,len);
          }
        }
        @Override public void onError(        Throwable t){
          t.printStackTrace();
          async.complete();
        }
      }
);
      return;
    }
    while (BufferUtil.hasContent(_content)) {
      int len=_content.remaining();
      if (len > _bytes.length)       len=_bytes.length;
      _content.get(_bytes,0,len);
      out.write(_bytes,0,len);
    }
    return;
  }
  if (_buffer != null) {
    if (_async) {
      final AsyncContext async=request.startAsync();
      out.setWriteListener(new WriteListener(){
        @Override public void onWritePossible() throws IOException {
          while (out.isReady()) {
            if (BufferUtil.isEmpty(_content)) {
              async.complete();
              break;
            }
            BufferUtil.clearToFill(_buffer);
            BufferUtil.put(_content,_buffer);
            BufferUtil.flipToFlush(_buffer,0);
            out.write(_buffer);
          }
        }
        @Override public void onError(        Throwable t){
          t.printStackTrace();
          async.complete();
        }
      }
);
      return;
    }
    while (BufferUtil.hasContent(_content)) {
      BufferUtil.clearToFill(_buffer);
      BufferUtil.put(_content,_buffer);
      BufferUtil.flipToFlush(_buffer,0);
      out.write(_buffer);
    }
    return;
  }
  if (_content != null) {
    out.sendContent(_content);
    _content=null;
    return;
  }
}

{
  Resource big=Resource.newClassPathResource("simple/big.txt");
  final ReadableByteChannel channel=big.getReadableByteChannel();
  _handler._contentChannel=new ReadableByteChannel(){
    @Override public boolean isOpen(){
      return channel.isOpen();
    }
    @Override public void close() throws IOException {
      channel.close();
    }
    @Override public int read(    ByteBuffer dst) throws IOException {
      int filled=0;
      if (dst.position() == 0 && dst.limit() > 2000) {
        int limit=dst.limit();
        dst.limit(2000);
        filled=channel.read(dst);
        dst.limit(limit);
      }
 else       filled=channel.read(dst);
      return filled;
    }
  }
;
  String response=_connector.getResponses("GET / HTTP/1.1\nHost: localhost:80\n\n" + "GET / HTTP/1.1\nHost: localhost:80\nConnection: close\n\n");
  response=response.substring(0,response.lastIndexOf("HTTP/1.1 200 OK"));
  assertThat(response,containsString("HTTP/1.1 200 OK"));
  assertThat(response,containsString("Transfer-Encoding: chunked"));
  assertThat(response,containsString("\r\n0\r\n"));
}

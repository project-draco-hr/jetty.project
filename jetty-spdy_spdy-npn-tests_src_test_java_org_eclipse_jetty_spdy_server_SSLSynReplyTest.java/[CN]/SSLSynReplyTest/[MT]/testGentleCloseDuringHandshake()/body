{
  InetSocketAddress address=prepare();
  SslContextFactory sslContextFactory=newSslContextFactory();
  sslContextFactory.start();
  SSLEngine sslEngine=sslContextFactory.newSSLEngine(address);
  sslEngine.setUseClientMode(true);
  NextProtoNego.put(sslEngine,new NextProtoNego.ClientProvider(){
    @Override public boolean supports(){
      return true;
    }
    @Override public void unsupported(){
    }
    @Override public String selectProtocol(    List<String> protocols){
      return null;
    }
  }
);
  sslEngine.beginHandshake();
  ByteBuffer encrypted=ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize());
  sslEngine.wrap(BufferUtil.EMPTY_BUFFER,encrypted);
  encrypted.flip();
  try (SocketChannel channel=SocketChannel.open(address)){
    channel.write(encrypted);
    sslEngine.closeOutbound();
    encrypted.clear();
    sslEngine.wrap(BufferUtil.EMPTY_BUFFER,encrypted);
    encrypted.flip();
    channel.write(encrypted);
    channel.shutdownOutput();
    encrypted.clear();
    int read=channel.read(encrypted);
    encrypted.flip();
    Assert.assertTrue(read > 0);
    encrypted.clear();
    read=channel.read(encrypted);
    Assert.assertTrue(read < 0);
  }
 }

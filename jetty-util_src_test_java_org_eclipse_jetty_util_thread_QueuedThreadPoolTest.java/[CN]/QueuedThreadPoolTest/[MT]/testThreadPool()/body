{
  QueuedThreadPool tp=new QueuedThreadPool();
  tp.setMinThreads(5);
  tp.setMaxThreads(10);
  tp.setMaxIdleTimeMs(1000);
  tp.setThreadsPriority(Thread.NORM_PRIORITY - 1);
  tp.start();
  waitForThreads(tp,5);
  waitForIdle(tp,5);
  Thread.sleep(1000);
  waitForThreads(tp,5);
  waitForIdle(tp,5);
  RunningJob job=new RunningJob();
  tp.dispatch(job);
  waitForIdle(tp,4);
  waitForThreads(tp,5);
  job.stop();
  waitForIdle(tp,5);
  waitForThreads(tp,5);
  Thread.sleep(200);
  waitForIdle(tp,5);
  waitForThreads(tp,5);
  RunningJob[] jobs=new RunningJob[5];
  for (int i=0; i < jobs.length; i++) {
    jobs[i]=new RunningJob();
    tp.dispatch(jobs[i]);
  }
  waitForIdle(tp,1);
  waitForThreads(tp,6);
  job=new RunningJob();
  tp.dispatch(job);
  waitForIdle(tp,1);
  waitForThreads(tp,7);
  job.stop();
  waitForIdle(tp,2);
  waitForThreads(tp,7);
  waitForThreads(tp,6);
  waitForIdle(tp,1);
  jobs[0].stop();
  waitForIdle(tp,1);
  waitForThreads(tp,5);
  for (int i=1; i < jobs.length; i++)   jobs[i].stop();
  waitForIdle(tp,5);
  waitForThreads(tp,5);
  jobs=new RunningJob[15];
  for (int i=0; i < jobs.length; i++) {
    jobs[i]=new RunningJob();
    tp.dispatch(jobs[i]);
  }
  waitForIdle(tp,0);
  waitForThreads(tp,10);
  for (int i=0; i < 9; i++)   jobs[i].stop();
  waitForThreads(tp,9);
  for (int i=9; i < jobs.length; i++)   jobs[i].stop();
  waitForIdle(tp,5);
  tp.stop();
}

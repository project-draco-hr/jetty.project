{
  JettyPolicy ap=new JettyPolicy(Collections.singleton(getWorkingDirectory() + "/src/test/resources/jetty-bad-certificate.policy"),evaluator);
  ap.refresh();
  Policy.setPolicy(ap);
  System.setSecurityManager(new SecurityManager());
  URL url=new URL("file://" + getWorkingDirectory() + "/target/test-policy/jetty-test-policy-1.0-SNAPSHOT.jar");
  URLClassLoader loader;
  if (Thread.currentThread().getContextClassLoader() != null) {
    loader=new URLClassLoader(new URL[]{url},Thread.currentThread().getContextClassLoader());
  }
 else {
    loader=new URLClassLoader(new URL[]{url},ClassLoader.getSystemClassLoader());
  }
  Thread.currentThread().setContextClassLoader(loader);
  ap.refresh();
  boolean excepted=false;
  try {
    Class clazz=loader.loadClass("org.eclipse.jetty.toolchain.test.policy.Tester");
    Method m=clazz.getMethod("testEcho",new Class[]{String.class});
    String foo=(String)m.invoke(clazz.newInstance(),new Object[]{"foo"});
    assertEquals("foo",foo);
    Method m2=clazz.getMethod("testReadSystemProperty",new Class[]{String.class});
    m2.invoke(clazz.newInstance(),new Object[]{"foobar"});
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    assertFalse("should not have got here",true);
  }
catch (  InvocationTargetException e) {
    assertTrue(e.getCause().getMessage().contains("access denied"));
    excepted=true;
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
    assertFalse("should not have got here",true);
  }
  assertTrue("checking that we through a security exception",excepted);
}

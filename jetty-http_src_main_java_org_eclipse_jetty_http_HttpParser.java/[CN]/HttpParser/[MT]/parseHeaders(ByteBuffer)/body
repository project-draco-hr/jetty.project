{
  boolean return_from_parse=false;
  while (_state.ordinal() < State.END.ordinal() && buffer.hasRemaining() && !return_from_parse) {
    byte ch=buffer.get();
    if (_eol == HttpTokens.CARRIAGE_RETURN && ch == HttpTokens.LINE_FEED) {
      _eol=HttpTokens.LINE_FEED;
      continue;
    }
    _eol=0;
switch (_state) {
case HEADER:
switch (ch) {
case HttpTokens.COLON:
case HttpTokens.SPACE:
case HttpTokens.TAB:
{
          _length=-1;
          _string.setLength(0);
          _state=State.HEADER_VALUE;
          break;
        }
default :
{
        if (_headerString != null || _valueString != null) {
          if (_header != null) {
switch (_header) {
case CONTENT_LENGTH:
              if (_endOfContent != EndOfContent.CHUNKED_CONTENT && _responseStatus != 304 && _responseStatus != 204 && (_responseStatus < 100 || _responseStatus >= 200)) {
                try {
                  _contentLength=Long.parseLong(_valueString);
                }
 catch (                NumberFormatException e) {
                  LOG.ignore(e);
                  badMessage(buffer,"Bad Content-Length");
                  return true;
                }
                if (_contentLength <= 0)                 _endOfContent=EndOfContent.NO_CONTENT;
 else                 _endOfContent=EndOfContent.CONTENT_LENGTH;
              }
            break;
case TRANSFER_ENCODING:
          if (_value == HttpHeaderValue.CHUNKED)           _endOfContent=EndOfContent.CHUNKED_CONTENT;
 else {
            if (_valueString.endsWith(HttpHeaderValue.CHUNKED.toString()))             _endOfContent=EndOfContent.CHUNKED_CONTENT;
 else             if (_valueString.indexOf(HttpHeaderValue.CHUNKED.toString()) >= 0) {
              badMessage(buffer,"Bad chunking");
              return true;
            }
          }
        break;
case CONNECTION:
switch (_value == null ? HttpHeaderValue.UNKNOWN : _value) {
case CLOSE:
        _persistent=false;
      break;
case KEEP_ALIVE:
    _persistent=true;
  break;
default :
{
  for (  String v : _valueString.toString().split(",")) {
switch (HttpHeaderValue.CACHE.get(v.trim())) {
case CLOSE:
      _persistent=false;
    break;
case KEEP_ALIVE:
  _persistent=true;
break;
}
}
break;
}
}
}
}
return_from_parse|=_handler.parsedHeader(_header,_headerString,_valueString);
}
_headerString=_valueString=null;
_header=null;
_value=null;
if (ch == HttpTokens.CARRIAGE_RETURN || ch == HttpTokens.LINE_FEED) {
_eol=ch;
_contentPosition=0;
if (_endOfContent == EndOfContent.UNKNOWN_CONTENT) {
if (_responseStatus == 0 || _responseStatus == 304 || _responseStatus == 204 || _responseStatus < 200) _endOfContent=EndOfContent.NO_CONTENT;
 else _endOfContent=EndOfContent.EOF_CONTENT;
}
switch (_endOfContent) {
case EOF_CONTENT:
_state=State.EOF_CONTENT;
return_from_parse|=_handler.headerComplete(true,false);
break;
case CHUNKED_CONTENT:
_state=State.CHUNKED_CONTENT;
return_from_parse|=_handler.headerComplete(true,_persistent);
break;
case NO_CONTENT:
return_from_parse|=_handler.headerComplete(false,_persistent);
_state=_persistent || (_responseStatus >= 100 && _responseStatus < 200) ? State.END : State.SEEKING_EOF;
return_from_parse|=_handler.messageComplete(_contentPosition);
break;
default :
_state=State.CONTENT;
return_from_parse|=_handler.headerComplete(true,_persistent);
break;
}
}
 else {
if (buffer.remaining() > 6 && buffer.hasArray()) {
_header=HttpHeader.lookAheadGet(buffer.array(),buffer.arrayOffset() + buffer.position() - 1,buffer.arrayOffset() + buffer.limit());
if (_header != null) {
_headerString=_header.asString();
buffer.position(buffer.position() + _headerString.length());
_state=buffer.get(buffer.position() - 1) == ':' ? State.HEADER_VALUE : State.HEADER_NAME;
break;
}
}
_state=State.HEADER_NAME;
_string.setLength(0);
_string.append((char)ch);
_length=1;
}
}
}
break;
case HEADER_NAME:
switch (ch) {
case HttpTokens.CARRIAGE_RETURN:
case HttpTokens.LINE_FEED:
_eol=ch;
_headerString=takeLengthString();
_header=HttpHeader.CACHE.get(_headerString);
_state=State.HEADER;
break;
case HttpTokens.COLON:
if (_headerString == null) {
_headerString=takeLengthString();
_header=HttpHeader.CACHE.get(_headerString);
}
_state=State.HEADER_VALUE;
break;
case HttpTokens.SPACE:
case HttpTokens.TAB:
_string.append((char)ch);
break;
default :
{
if (_header != null) {
_string.setLength(0);
_string.append(_header.asString());
_string.append(' ');
_length=_string.length();
_header=null;
_headerString=null;
}
_string.append((char)ch);
_length=_string.length();
_state=State.HEADER_IN_NAME;
}
}
break;
case HEADER_IN_NAME:
switch (ch) {
case HttpTokens.CARRIAGE_RETURN:
case HttpTokens.LINE_FEED:
_eol=ch;
_headerString=takeString();
_length=-1;
_header=HttpHeader.CACHE.get(_headerString);
_state=State.HEADER;
break;
case HttpTokens.COLON:
if (_headerString == null) {
_headerString=takeString();
_header=HttpHeader.CACHE.get(_headerString);
}
_length=-1;
_state=State.HEADER_VALUE;
break;
case HttpTokens.SPACE:
case HttpTokens.TAB:
_state=State.HEADER_NAME;
_string.append((char)ch);
break;
default :
_string.append((char)ch);
_length++;
}
break;
case HEADER_VALUE:
switch (ch) {
case HttpTokens.CARRIAGE_RETURN:
case HttpTokens.LINE_FEED:
_eol=ch;
if (_length > 0) {
if (_valueString != null) {
_value=null;
_valueString+=" " + takeLengthString();
}
 else if (HttpHeaderValue.hasKnownValues(_header)) {
_valueString=takeLengthString();
_value=HttpHeaderValue.CACHE.get(_valueString);
}
 else {
_value=null;
_valueString=takeLengthString();
}
}
_state=State.HEADER;
break;
case HttpTokens.SPACE:
case HttpTokens.TAB:
break;
default :
{
_string.append((char)ch);
_length=_string.length();
_state=State.HEADER_IN_VALUE;
}
}
break;
case HEADER_IN_VALUE:
switch (ch) {
case HttpTokens.CARRIAGE_RETURN:
case HttpTokens.LINE_FEED:
_eol=ch;
if (_length > 0) {
if (_valueString != null) {
_value=null;
_valueString+=" " + takeString();
}
 else if (HttpHeaderValue.hasKnownValues(_header)) {
_valueString=takeString();
_value=HttpHeaderValue.CACHE.get(_valueString);
}
 else {
_value=null;
_valueString=takeString();
}
_length=-1;
}
_state=State.HEADER;
break;
case HttpTokens.SPACE:
case HttpTokens.TAB:
_string.append((char)ch);
_state=State.HEADER_VALUE;
break;
default :
_string.append((char)ch);
_length++;
}
break;
default :
throw new IllegalStateException(_state.toString());
}
}
return return_from_parse;
}

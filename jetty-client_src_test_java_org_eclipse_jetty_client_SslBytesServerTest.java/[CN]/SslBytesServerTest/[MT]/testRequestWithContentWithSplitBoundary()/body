{
  final SSLSocket client=newClient();
  SimpleProxy.AutomaticFlow automaticProxyFlow=proxy.startAutomaticFlow();
  client.startHandshake();
  Assert.assertTrue(automaticProxyFlow.stop(5,TimeUnit.SECONDS));
  final String content="0123456789ABCDEF";
  Future<Object> request=threadPool.submit(new Callable<Object>(){
    public Object call() throws Exception {
      OutputStream clientOutput=client.getOutputStream();
      clientOutput.write(("" + "POST / HTTP/1.1\r\n" + "Host: localhost\r\n"+ "Content-Type: text/plain\r\n"+ "Content-Length: " + content.length() + "\r\n"+ "\r\n"+ content).getBytes("UTF-8"));
      clientOutput.flush();
      return null;
    }
  }
);
  TLSRecord record=proxy.readFromClient();
  Assert.assertNull(request.get(5,TimeUnit.SECONDS));
  byte[] chunk1=new byte[2 * record.getBytes().length / 3];
  System.arraycopy(record.getBytes(),0,chunk1,0,chunk1.length);
  proxy.flushToServer(chunk1);
  TimeUnit.MILLISECONDS.sleep(100);
  byte[] chunk2=new byte[record.getBytes().length - chunk1.length];
  System.arraycopy(record.getBytes(),chunk1.length,chunk2,0,chunk2.length);
  proxy.flushToServer(chunk2);
  record=proxy.readFromServer();
  Assert.assertEquals(TLSRecord.Type.APPLICATION,record.getType());
  proxy.flushToClient(record);
  BufferedReader reader=new BufferedReader(new InputStreamReader(client.getInputStream(),"UTF-8"));
  String line=reader.readLine();
  Assert.assertNotNull(line);
  Assert.assertTrue(line.startsWith("HTTP/1.1 200 "));
  while ((line=reader.readLine()) != null) {
    if (line.trim().length() == 0)     break;
  }
  Assert.assertThat(sslHandles.get(),lessThan(20));
  Assert.assertThat(httpParses.get(),lessThan(50));
  closeClient(client);
}

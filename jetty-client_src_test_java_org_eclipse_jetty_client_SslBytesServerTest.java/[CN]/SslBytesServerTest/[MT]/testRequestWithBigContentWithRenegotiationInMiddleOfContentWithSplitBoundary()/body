{
  assumeJavaVersionSupportsTLSRenegotiations();
  final SSLSocket client=newClient();
  final OutputStream clientOutput=client.getOutputStream();
  SimpleProxy.AutomaticFlow automaticProxyFlow=proxy.startAutomaticFlow();
  client.startHandshake();
  Assert.assertTrue(automaticProxyFlow.stop(5,TimeUnit.SECONDS));
  byte[] data1=new byte[80 * 1024];
  Arrays.fill(data1,(byte)'X');
  String content1=new String(data1,"UTF-8");
  byte[] data2=new byte[48 * 1024];
  Arrays.fill(data2,(byte)'Y');
  final String content2=new String(data2,"UTF-8");
  automaticProxyFlow=proxy.startAutomaticFlow();
  clientOutput.write(("" + "POST / HTTP/1.1\r\n" + "Host: localhost\r\n"+ "Content-Type: text/plain\r\n"+ "Content-Length: " + (content1.length() + content2.length()) + "\r\n"+ "\r\n"+ content1).getBytes("UTF-8"));
  clientOutput.flush();
  Assert.assertTrue(automaticProxyFlow.stop(5,TimeUnit.SECONDS));
  Future<Object> renegotiation=threadPool.submit(new Callable<Object>(){
    public Object call() throws Exception {
      client.startHandshake();
      return null;
    }
  }
);
  TLSRecord record=proxy.readFromClient();
  Assert.assertEquals(TLSRecord.Type.HANDSHAKE,record.getType());
  byte[] bytes=record.getBytes();
  byte[] chunk1=new byte[2 * bytes.length / 3];
  System.arraycopy(bytes,0,chunk1,0,chunk1.length);
  byte[] chunk2=new byte[bytes.length - chunk1.length];
  System.arraycopy(bytes,chunk1.length,chunk2,0,chunk2.length);
  proxy.flushToServer(100,chunk1);
  proxy.flushToServer(100,chunk2);
  record=proxy.readFromServer();
  Assert.assertEquals(TLSRecord.Type.HANDSHAKE,record.getType());
  proxy.flushToClient(record);
  record=proxy.readFromServer();
  Assert.assertEquals(TLSRecord.Type.CHANGE_CIPHER_SPEC,record.getType());
  proxy.flushToClient(record);
  record=proxy.readFromServer();
  Assert.assertEquals(TLSRecord.Type.HANDSHAKE,record.getType());
  proxy.flushToClient(record);
  client.setSoTimeout(100);
  try {
    client.getInputStream().read();
    Assert.fail();
  }
 catch (  SocketTimeoutException x) {
  }
  record=proxy.readFromClient();
  Assert.assertEquals(TLSRecord.Type.CHANGE_CIPHER_SPEC,record.getType());
  bytes=record.getBytes();
  chunk1=new byte[2 * bytes.length / 3];
  System.arraycopy(bytes,0,chunk1,0,chunk1.length);
  chunk2=new byte[bytes.length - chunk1.length];
  System.arraycopy(bytes,chunk1.length,chunk2,0,chunk2.length);
  proxy.flushToServer(100,chunk1);
  proxy.flushToServer(100,chunk2);
  record=proxy.readFromClient();
  Assert.assertEquals(TLSRecord.Type.HANDSHAKE,record.getType());
  bytes=record.getBytes();
  chunk1=new byte[2 * bytes.length / 3];
  System.arraycopy(bytes,0,chunk1,0,chunk1.length);
  chunk2=new byte[bytes.length - chunk1.length];
  System.arraycopy(bytes,chunk1.length,chunk2,0,chunk2.length);
  proxy.flushToServer(100,chunk1);
  Assert.assertNull(renegotiation.get(5,TimeUnit.SECONDS));
  Future<Object> request=threadPool.submit(new Callable<Object>(){
    public Object call() throws Exception {
      clientOutput.write(content2.getBytes("UTF-8"));
      clientOutput.flush();
      return null;
    }
  }
);
  record=proxy.readFromClient();
  Assert.assertEquals(TLSRecord.Type.APPLICATION,record.getType());
  byte[] dataBytes=record.getBytes();
  byte[] mergedBytes=new byte[chunk2.length + dataBytes.length];
  System.arraycopy(chunk2,0,mergedBytes,0,chunk2.length);
  System.arraycopy(dataBytes,0,mergedBytes,chunk2.length,dataBytes.length);
  proxy.flushToServer(100,mergedBytes);
  for (int i=0; i < 2; ++i) {
    record=proxy.readFromClient();
    Assert.assertEquals(TLSRecord.Type.APPLICATION,record.getType());
    proxy.flushToServer(record);
  }
  Assert.assertNull(request.get(5,TimeUnit.SECONDS));
  record=proxy.readFromServer();
  Assert.assertEquals(TLSRecord.Type.APPLICATION,record.getType());
  proxy.flushToClient(record);
  BufferedReader reader=new BufferedReader(new InputStreamReader(client.getInputStream(),"UTF-8"));
  String line=reader.readLine();
  Assert.assertNotNull(line);
  Assert.assertTrue(line.startsWith("HTTP/1.1 200 "));
  while ((line=reader.readLine()) != null) {
    if (line.trim().length() == 0)     break;
  }
  TimeUnit.MILLISECONDS.sleep(500);
  Assert.assertThat(sslHandles.get(),lessThan(20));
  Assert.assertThat(sslFlushes.get(),lessThan(20));
  Assert.assertThat(httpParses.get(),lessThan(100));
  closeClient(client);
}

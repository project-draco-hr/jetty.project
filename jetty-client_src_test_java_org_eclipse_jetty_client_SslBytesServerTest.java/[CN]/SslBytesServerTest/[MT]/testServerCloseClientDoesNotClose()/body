{
  final SSLSocket client=newClient();
  final OutputStream clientOutput=client.getOutputStream();
  SimpleProxy.AutomaticFlow automaticProxyFlow=proxy.startAutomaticFlow();
  client.startHandshake();
  Assert.assertTrue(automaticProxyFlow.stop(5,TimeUnit.SECONDS));
  byte[] data=new byte[3 * 1024];
  Arrays.fill(data,(byte)'Y');
  String content=new String(data,"UTF-8");
  automaticProxyFlow=proxy.startAutomaticFlow();
  clientOutput.write(("" + "POST / HTTP/1.1\r\n" + "Host: localhost\r\n"+ "Content-Type: text/plain\r\n"+ "Content-Length: " + content.length() + "\r\n"+ "Connection: close\r\n"+ "\r\n"+ content).getBytes("UTF-8"));
  clientOutput.flush();
  Assert.assertTrue(automaticProxyFlow.stop(5,TimeUnit.SECONDS));
  BufferedReader reader=new BufferedReader(new InputStreamReader(client.getInputStream(),"UTF-8"));
  String line=reader.readLine();
  Assert.assertNotNull(line);
  Assert.assertTrue(line.startsWith("HTTP/1.1 200 "));
  while ((line=reader.readLine()) != null) {
    if (line.trim().length() == 0)     break;
  }
  Assert.assertEquals(-1,client.getInputStream().read());
  TimeUnit.MILLISECONDS.sleep(100);
  Assert.assertThat(sslHandles.get(),lessThan(20));
  Assert.assertThat(httpParses.get(),lessThan(50));
  Assert.assertTrue(((AsyncEndPoint)sslConnection.get().getEndPoint()).isOpen());
  Assert.assertTrue(((AsyncEndPoint)sslConnection.get().getEndPoint()).isOutputShutdown());
  Assert.assertFalse(((AsyncEndPoint)sslConnection.get().getEndPoint()).isInputShutdown());
  TimeUnit.MILLISECONDS.sleep(MAX_IDLE_TIME + 1000);
  Assert.assertFalse(((AsyncEndPoint)sslConnection.get().getEndPoint()).isOpen());
  Assert.assertTrue(((AsyncEndPoint)sslConnection.get().getEndPoint()).isOutputShutdown());
  Assert.assertTrue(((AsyncEndPoint)sslConnection.get().getEndPoint()).isInputShutdown());
  try {
    for (int i=0; i < 100; i++) {
      clientOutput.write(("" + "POST / HTTP/1.1\r\n" + "Host: localhost\r\n"+ "Content-Type: text/plain\r\n"+ "Content-Length: " + content.length() + "\r\n"+ "Connection: close\r\n"+ "\r\n"+ content).getBytes("UTF-8"));
      clientOutput.flush();
    }
    Assert.fail("Client should have seen server close");
  }
 catch (  SocketException e) {
  }
}

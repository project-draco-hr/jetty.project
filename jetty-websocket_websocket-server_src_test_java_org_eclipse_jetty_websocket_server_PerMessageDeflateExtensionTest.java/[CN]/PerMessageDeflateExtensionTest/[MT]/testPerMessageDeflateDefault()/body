{
  Assume.assumeTrue("Server has permessage-deflate registered",server.getWebSocketServletFactory().getExtensionFactory().isAvailable("permessage-deflate"));
  Assert.assertThat("server scheme",server.getServerUri().getScheme(),is(scheme));
  int binBufferSize=(int)(msgSize * 1.5);
  WebSocketPolicy serverPolicy=server.getWebSocketServletFactory().getPolicy();
  binBufferSize=Math.max(binBufferSize,serverPolicy.getMaxBinaryMessageSize());
  binBufferSize=Math.max(binBufferSize,serverPolicy.getMaxBinaryMessageBufferSize());
  binBufferSize=Math.max(binBufferSize,this.inputBufferSize);
  serverPolicy.setMaxBinaryMessageSize(binBufferSize);
  serverPolicy.setMaxBinaryMessageBufferSize(binBufferSize);
  WebSocketClient client=new WebSocketClient(server.getSslContextFactory(),null,bufferPool);
  WebSocketPolicy clientPolicy=client.getPolicy();
  clientPolicy.setMaxBinaryMessageSize(binBufferSize);
  clientPolicy.setMaxBinaryMessageBufferSize(binBufferSize);
  if (inputBufferSize > 0) {
    clientPolicy.setInputBufferSize(inputBufferSize);
  }
  try {
    client.start();
    client.setMaxIdleTimeout(TimeUnit.SECONDS.toMillis(1));
    CaptureSocket clientSocket=new CaptureSocket();
    ClientUpgradeRequest request=new ClientUpgradeRequest();
    request.addExtensions("permessage-deflate");
    request.setSubProtocols("echo");
    Future<Session> fut=client.connect(clientSocket,server.getServerUri(),request);
    Session session=fut.get(3,TimeUnit.SECONDS);
    assertThat("Response.extensions",getNegotiatedExtensionList(session),containsString("permessage-deflate"));
    byte msg[]=new byte[msgSize];
    Random rand=new Random();
    rand.setSeed(8080);
    rand.nextBytes(msg);
    String sha1=Sha1Sum.calculate(msg);
    session.getRemote().sendBytes(ByteBuffer.wrap(msg));
    clientSocket.messages.awaitEventCount(1,1,TimeUnit.SECONDS);
    String echoMsg=clientSocket.messages.poll();
    Assert.assertThat("Echo'd Message",echoMsg,is("binary[sha1=" + sha1 + "]"));
  }
  finally {
    client.stop();
  }
}

{
  this.headers=headers;
  Headers.Header method=headers.get(HTTPSPDYHeader.METHOD.name(getVersion()));
  Headers.Header uri=headers.get(HTTPSPDYHeader.URI.name(getVersion()));
  Headers.Header version=headers.get(HTTPSPDYHeader.VERSION.name(getVersion()));
  if (method == null || uri == null || version == null)   throw new IllegalStateException("400");
  HttpMethod httpMethod=HttpMethod.fromString(method.value());
  HttpVersion httpVersion=HttpVersion.fromString(version.value());
  String uriString=uri.value();
  logger.debug("HTTP > {} {} {}",httpMethod,uriString,httpVersion);
  getEventHandler().startRequest(httpMethod,httpMethod.asString(),uriString,httpVersion);
  Headers.Header schemeHeader=headers.get(HTTPSPDYHeader.SCHEME.name(getVersion()));
  for (  Headers.Header header : headers) {
    String name=header.name();
    HttpHeader httpHeader=null;
    HTTPSPDYHeader specialHeader=HTTPSPDYHeader.from(getVersion(),name);
    if (specialHeader != null) {
      if (specialHeader == HTTPSPDYHeader.HOST) {
        httpHeader=HttpHeader.HOST;
        name="host";
      }
 else       continue;
    }
switch (name) {
case "connection":
case "keep-alive":
case "proxy-connection":
case "transfer-encoding":
{
        continue;
      }
default :
{
      String value=header.value();
      logger.debug("HTTP > {}: {}",name,value);
      getEventHandler().parsedHeader(httpHeader,name,value);
      break;
    }
}
}
}

{
  DummyServer server=new DummyServer();
  int bufferSize=512;
  QueuedThreadPool threadPool=new QueuedThreadPool();
  WebSocketClientFactory factory=new WebSocketClientFactory(threadPool,new ZeroMaskGen(),bufferSize);
  try {
    server.start();
    threadPool.start();
    factory.start();
    WebSocketClient client=new WebSocketClient(factory);
    final CountDownLatch openLatch=new CountDownLatch(1);
    final CountDownLatch dataLatch=new CountDownLatch(1);
    WebSocket.OnTextMessage websocket=new WebSocket.OnTextMessage(){
      public void onOpen(      Connection connection){
        openLatch.countDown();
      }
      public void onMessage(      String data){
        dataLatch.countDown();
      }
      public void onClose(      int closeCode,      String message){
      }
    }
;
    URI wsURI=server.getWsUri();
    client.open(wsURI,websocket);
    ServerConnection socket=server.accept();
    socket.setSoTimeout(2000);
    Map<String,String> extraResponseHeaders=new HashMap<String,String>();
    extraResponseHeaders.put("Transfer-Encoding","chunked");
    socket.upgrade(extraResponseHeaders);
    Assert.assertTrue("Timed out waiting for Client side WebSocket open event",openLatch.await(1,TimeUnit.SECONDS));
    int length=bufferSize / 2;
    ByteBuffer serverFrame=ByteBuffer.allocate(bufferSize);
    serverFrame.put((byte)(0x80 | 0x01));
    serverFrame.put((byte)0x7E);
    serverFrame.put((byte)(length >> 8));
    serverFrame.put((byte)(length & 0xFF));
    for (int i=0; i < length; ++i)     serverFrame.put((byte)'x');
    serverFrame.flip();
    byte buf[]=serverFrame.array();
    socket.write(buf,0,buf.length);
    socket.flush();
    Assert.assertTrue(dataLatch.await(1000,TimeUnit.SECONDS));
  }
  finally {
    factory.stop();
    threadPool.stop();
    server.stop();
  }
}

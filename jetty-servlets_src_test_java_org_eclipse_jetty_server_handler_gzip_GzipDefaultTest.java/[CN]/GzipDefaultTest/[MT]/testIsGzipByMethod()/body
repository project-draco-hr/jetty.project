{
  GzipTester tester=new GzipTester(testingdir,compressionType);
  tester.getGzipHandler().setIncludedMethods("POST","WIBBLE","HEAD");
  int filesize=tester.getOutputBufferSize() * 2;
  tester.prepareServerFile("file.txt",filesize);
  tester.setContentServlet(GetServlet.class);
  try {
    tester.start();
    HttpTester.Response response;
    tester.assertIsResponseGzipCompressed("POST","file.txt");
    tester.assertIsResponseGzipCompressed("WIBBLE","file.txt");
    response=tester.executeRequest("HEAD","/context/file.txt",5,TimeUnit.SECONDS);
    assertThat("Response status",response.getStatus(),is(HttpStatus.OK_200));
    assertThat("ETag",response.get("ETag"),containsString(GzipHttpContent.ETAG_GZIP));
    assertThat("Content encoding",response.get("Content-Encoding"),containsString("gzip"));
    assertNull("Content length",response.get("Content-Length"));
    response=tester.executeRequest("GET","/context/file.txt",5,TimeUnit.SECONDS);
    assertThat("Response status",response.getStatus(),is(HttpStatus.OK_200));
    assertThat("Content-Encoding",response.get("Content-Encoding"),not(containsString(compressionType)));
    String content=tester.readResponse(response);
    assertThat("Response content size",content.length(),is(filesize));
    String expectedContent=IO.readToString(testingdir.getFile("file.txt"));
    assertThat("Response content",content,is(expectedContent));
  }
  finally {
    tester.stop();
  }
}

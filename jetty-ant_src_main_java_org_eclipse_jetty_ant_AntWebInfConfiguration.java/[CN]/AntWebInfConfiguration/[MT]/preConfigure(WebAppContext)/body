{
  File work=findWorkDirectory(context);
  if (work != null)   makeTempDirectory(work,context,false);
  resolveTempDirectory(context);
  unpack(context);
  String tmp=(String)context.getAttribute(WEBINF_JAR_PATTERN);
  Pattern webInfPattern=(tmp == null ? null : Pattern.compile(tmp));
  tmp=(String)context.getAttribute(CONTAINER_JAR_PATTERN);
  Pattern containerPattern=(tmp == null ? null : Pattern.compile(tmp));
  PatternMatcher containerJarNameMatcher=new PatternMatcher(){
    public void matched(    URI uri) throws Exception {
      context.getMetaData().addContainerJar(Resource.newResource(uri));
    }
  }
;
  ClassLoader loader=context.getClassLoader();
  if (loader != null) {
    loader=loader.getParent();
    if (loader != null) {
      URI[] containerUris=null;
      if (loader instanceof URLClassLoader) {
        URL[] urls=((URLClassLoader)loader).getURLs();
        if (urls != null) {
          containerUris=new URI[urls.length];
          int i=0;
          for (          URL u : urls) {
            try {
              containerUris[i]=u.toURI();
            }
 catch (            URISyntaxException e) {
              containerUris[i]=new URI(u.toString().replaceAll(" ","%20"));
            }
            i++;
          }
        }
      }
 else       if (loader instanceof AntClassLoader) {
        AntClassLoader antLoader=(AntClassLoader)loader;
        String[] paths=antLoader.getClasspath().split(new String(new char[]{File.pathSeparatorChar}));
        if (paths != null) {
          containerUris=new URI[paths.length];
          int i=0;
          for (          String p : paths) {
            File f=new File(p);
            containerUris[i]=f.toURI();
            i++;
          }
        }
      }
      containerJarNameMatcher.match(containerPattern,containerUris,false);
    }
  }
  PatternMatcher webInfJarNameMatcher=new PatternMatcher(){
    @Override public void matched(    URI uri) throws Exception {
      context.getMetaData().addWebInfJar(Resource.newResource(uri));
    }
  }
;
  List<Resource> jars=findJars(context);
  URI[] uris=null;
  if (jars != null) {
    uris=new URI[jars.size()];
    int i=0;
    for (    Resource r : jars) {
      uris[i++]=r.getURI();
    }
  }
  webInfJarNameMatcher.match(webInfPattern,uris,true);
}

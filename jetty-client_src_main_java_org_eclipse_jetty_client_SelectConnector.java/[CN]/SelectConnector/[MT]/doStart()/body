{
  super.doStart();
  _connectTimer.setDuration(_httpClient.getConnectTimeout());
  _connectTimer.setNow();
  if (!_httpClient.isConnectBlocking()) {
    _httpClient._threadPool.dispatch(new Runnable(){
      public void run(){
        while (isRunning()) {
          _connectTimer.tick(System.currentTimeMillis());
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException x) {
            Thread.currentThread().interrupt();
            break;
          }
        }
      }
    }
);
  }
  _selectorManager.start();
  final boolean direct=_httpClient.getUseDirectBuffers();
  SSLEngine sslEngine=_selectorManager.newSslEngine();
  final SSLSession ssl_session=sslEngine.getSession();
  ThreadLocalBuffers ssl_buffers=new ThreadLocalBuffers(){
{
      super.setBufferSize(ssl_session.getApplicationBufferSize());
      super.setHeaderSize(ssl_session.getApplicationBufferSize());
    }
    @Override protected Buffer newBuffer(    int size){
      return direct ? new DirectNIOBuffer(size) : new IndirectNIOBuffer(size);
    }
    @Override protected Buffer newHeader(    int size){
      return direct ? new DirectNIOBuffer(size) : new IndirectNIOBuffer(size);
    }
    @Override protected boolean isHeader(    Buffer buffer){
      return true;
    }
    @Override public void setBufferSize(    int size){
    }
    @Override public void setHeaderSize(    int size){
    }
  }
;
  _sslBuffers=ssl_buffers;
  _httpClient._threadPool.dispatch(this);
}

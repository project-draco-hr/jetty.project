{
  final Socket client=newClient();
  final OutputStream clientOutput=client.getOutputStream();
  byte[] data=new byte[3 * 1024];
  Arrays.fill(data,(byte)'Y');
  String content=new String(data,"UTF-8");
  StringBuilder req=new StringBuilder();
  req.append("POST / HTTP/1.1\r\n");
  req.append("Host: localhost\r\n");
  req.append("Content-Type: text/plain\r\n");
  req.append("Content-Length: ").append(content.length()).append("\r\n");
  req.append("Connection: close\r\n");
  req.append("\r\n");
  req.append(content);
  clientOutput.write(req.toString().getBytes("UTF-8"));
  clientOutput.flush();
  InputStream in=null;
  InputStreamReader isr=null;
  BufferedReader reader=null;
  try {
    in=client.getInputStream();
    isr=new InputStreamReader(in);
    reader=new BufferedReader(isr);
    String line=reader.readLine();
    Assert.assertNotNull(line);
    Assert.assertThat(line,startsWith("HTTP/1.1 200 "));
    while ((line=reader.readLine()) != null) {
      if (line.trim().length() == 0) {
        break;
      }
    }
    Assert.assertEquals("one request handled",1,httpRequests.get());
    Assert.assertEquals("EOF received",-1,client.getInputStream().read());
    client.shutdownOutput();
    int httpParseCount=httpParses.get();
    Assert.assertThat(httpParseCount,lessThan(50));
    try {
      clientOutput.write(req.toString().getBytes("UTF-8"));
      clientOutput.flush();
      Assert.fail("Should not have been able to send a second POST request (connection: close)");
    }
 catch (    SocketException e) {
    }
    Assert.assertEquals("one request handled",1,httpRequests.get());
  }
  finally {
    IO.close(reader);
    IO.close(isr);
    IO.close(in);
    closeClient(client);
  }
}

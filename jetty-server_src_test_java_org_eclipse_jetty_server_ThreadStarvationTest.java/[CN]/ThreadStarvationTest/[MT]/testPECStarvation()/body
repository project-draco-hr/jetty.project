{
  System.setProperty("org.eclipse.jetty.io.ManagedSelector$SelectorProducer.ExecutionStrategy","org.eclipse.jetty.util.thread.strategy.ProduceExecuteConsume");
  startServer(_connector,new ReadHandler());
  System.err.println(_threadPool.dump());
  Socket[] client=new Socket[3];
  OutputStream[] os=new OutputStream[client.length];
  InputStream[] is=new InputStream[client.length];
  for (int i=0; i < client.length; i++) {
    client[i]=newSocket(_serverURI.getHost(),_serverURI.getPort());
    client[i].setSoTimeout(10000);
    os[i]=client[i].getOutputStream();
    is[i]=client[i].getInputStream();
    os[i].write(("PUT / HTTP/1.0\r\n" + "host: " + _serverURI.getHost() + ":"+ _serverURI.getPort()+ "\r\n"+ "content-length: 10\r\n"+ "\r\n1").getBytes("utf-8"));
    os[i].flush();
  }
  Thread.sleep(500);
  System.err.println(_threadPool.dump());
  for (int i=0; i < client.length; i++) {
    os[i].write(("234567890\r\n").getBytes("utf-8"));
    os[i].flush();
  }
  Thread.sleep(500);
  System.err.println(_threadPool.dump());
  for (int i=0; i < client.length; i++) {
    String response=IO.toString(is[i]);
    assertEquals(-1,is[i].read());
    assertThat(response,containsString("200 OK"));
    assertThat(response,containsString("Read Input 10"));
  }
}

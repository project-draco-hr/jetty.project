{
  AuthenticationStore authenticationStore=client.getAuthenticationStore();
  final AtomicReference<CountDownLatch> requests=new AtomicReference<>(new CountDownLatch(1));
  Request.Listener.Empty requestListener=new Request.Listener.Empty(){
    @Override public void onSuccess(    Request request){
      requests.get().countDown();
    }
  }
;
  client.getRequestListeners().add(requestListener);
  Request request=client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).path("/secure");
  ContentResponse response=request.send().get(5,TimeUnit.SECONDS);
  Assert.assertNotNull(response);
  Assert.assertEquals(401,response.status());
  Assert.assertTrue(requests.get().await(5,TimeUnit.SECONDS));
  client.getRequestListeners().remove(requestListener);
  authenticationStore.addAuthentication(authentication);
  requests.set(new CountDownLatch(2));
  requestListener=new Request.Listener.Empty(){
    @Override public void onSuccess(    Request request){
      requests.get().countDown();
    }
  }
;
  client.getRequestListeners().add(requestListener);
  response=request.send().get(5,TimeUnit.SECONDS);
  Assert.assertNotNull(response);
  Assert.assertEquals(200,response.status());
  Assert.assertTrue(requests.get().await(5,TimeUnit.SECONDS));
  client.getRequestListeners().remove(requestListener);
  requests.set(new CountDownLatch(1));
  requestListener=new Request.Listener.Empty(){
    @Override public void onSuccess(    Request request){
      requests.get().countDown();
    }
  }
;
  client.getRequestListeners().add(requestListener);
  request.header(HttpHeader.AUTHORIZATION.asString(),null);
  response=request.send().get(5,TimeUnit.SECONDS);
  Assert.assertNotNull(response);
  Assert.assertEquals(200,response.status());
  Assert.assertTrue(requests.get().await(5,TimeUnit.SECONDS));
  client.getRequestListeners().remove(requestListener);
}

{
  OutgoingFramesCapture capture=new OutgoingFramesCapture();
  DeflateFrameExtension ext=new DeflateFrameExtension();
  ext.setBufferPool(new StandardByteBufferPool());
  ext.setPolicy(WebSocketPolicy.newServerPolicy());
  ExtensionConfig config=ExtensionConfig.parse("x-deflate-frame;minLength=16");
  ext.setConfig(config);
  ext.setNextOutgoingFrames(capture);
  String payload="Are you there?";
  WebSocketFrame ping=WebSocketFrame.ping().setPayload(payload);
  FutureCallback<String> callback=new FutureCallback<>();
  ext.output("TenFour",callback,ping);
  capture.assertFrameCount(1);
  capture.assertHasFrame(OpCode.PING,1);
  Write<?> write=capture.getWrites().getFirst();
  Assert.assertThat("Write.context",(String)write.context,is("TenFour"));
  Assert.assertSame("Write.callback",callback,write.callback);
  WebSocketFrame actual=write.frame;
  Assert.assertThat("Frame.opcode",actual.getOpCode(),is(OpCode.PING));
  Assert.assertThat("Frame.fin",actual.isFin(),is(true));
  Assert.assertThat("Frame.rsv1",actual.isRsv1(),is(false));
  Assert.assertThat("Frame.rsv2",actual.isRsv2(),is(false));
  Assert.assertThat("Frame.rsv3",actual.isRsv3(),is(false));
  ByteBuffer expected=BufferUtil.toBuffer(payload,StringUtil.__UTF8_CHARSET);
  Assert.assertThat("Frame.payloadLength",actual.getPayloadLength(),is(expected.remaining()));
  ByteBufferAssert.assertEquals("Frame.payload",expected,actual.getPayload().slice());
}

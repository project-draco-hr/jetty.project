{
  OutgoingFramesCapture capture=new OutgoingFramesCapture();
  DeflateFrameExtension ext=new DeflateFrameExtension();
  ext.setBufferPool(new StandardByteBufferPool());
  ext.setPolicy(WebSocketPolicy.newServerPolicy());
  ExtensionConfig config=ExtensionConfig.parse("x-deflate-frame;minLength=16");
  ext.setConfig(config);
  ext.setNextOutgoingFrames(capture);
  List<String> quote=new ArrayList<>();
  quote.add("No amount of experimentation can ever prove me right;");
  quote.add("a single experiment can prove me wrong.");
  quote.add("-- Albert Einstein");
  List<Callback<?>> callbacks=new ArrayList<>();
  for (  String section : quote) {
    WebSocketFrame frame=WebSocketFrame.text(section);
    FutureCallback<String> callback=new FutureCallback<>();
    ext.output("Q" + (callbacks.size()),callback,frame);
    callbacks.add(callback);
  }
  int len=quote.size();
  capture.assertFrameCount(len);
  capture.assertHasFrame(OpCode.TEXT,len);
  String prefix;
  LinkedList<Write<?>> writes=capture.getWrites();
  for (int i=0; i < len; i++) {
    prefix="Write[" + i + "]";
    Write<?> write=writes.get(i);
    Assert.assertThat(prefix + ".context",(String)write.context,is("Q" + i));
    Assert.assertSame(prefix + ".callback",callbacks.get(i),write.callback);
    WebSocketFrame actual=write.frame;
    prefix=".frame";
    Assert.assertThat(prefix + ".opcode",actual.getOpCode(),is(OpCode.TEXT));
    Assert.assertThat(prefix + ".fin",actual.isFin(),is(true));
    Assert.assertThat(prefix + ".rsv1",actual.isRsv1(),is(true));
    Assert.assertThat(prefix + ".rsv2",actual.isRsv2(),is(false));
    Assert.assertThat(prefix + ".rsv3",actual.isRsv3(),is(false));
    ByteBuffer expected=BufferUtil.toBuffer(quote.get(i),StringUtil.__UTF8_CHARSET);
    ByteBuffer compressed=actual.getPayload().slice();
    ByteBuffer uncompressed=ext.inflate(compressed);
    Assert.assertThat(prefix + ".payloadLength",uncompressed.remaining(),is(expected.remaining()));
    ByteBufferAssert.assertEquals(prefix + ".payload",expected,uncompressed);
  }
}

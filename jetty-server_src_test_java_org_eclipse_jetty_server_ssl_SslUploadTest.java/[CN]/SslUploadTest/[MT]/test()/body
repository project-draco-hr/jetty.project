{
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  SslContextFactory ctx=connector.getConnectionFactory(SslConnectionFactory.class).getSslContextFactory();
  try (InputStream stream=new FileInputStream(ctx.getKeyStorePath())){
    keystore.load(stream,"storepwd".toCharArray());
  }
   TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(keystore);
  SSLContext sslContext=SSLContext.getInstance("SSL");
  sslContext.init(null,trustManagerFactory.getTrustManagers(),null);
  final SSLSocket socket=(SSLSocket)sslContext.getSocketFactory().createSocket("localhost",connector.getLocalPort());
  long start=System.nanoTime();
  OutputStream out=socket.getOutputStream();
  out.write("POST / HTTP/1.1\r\n".getBytes());
  out.write("Host: localhost\r\n".getBytes());
  out.write("Content-Length: 16777216\r\n".getBytes());
  out.write("Content-Type: bytes\r\n".getBytes());
  out.write("Connection: close\r\n".getBytes());
  out.write("\r\n".getBytes());
  out.flush();
  byte[] requestContent=new byte[16777216];
  Arrays.fill(requestContent,(byte)120);
  out.write(requestContent);
  out.flush();
  InputStream in=socket.getInputStream();
  String response=IO.toString(in);
  assertTrue(response.indexOf("200") > 0);
  assertEquals(requestContent.length,total);
}

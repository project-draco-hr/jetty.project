{
  boolean metadataComplete=context.getMetaData().isMetaDataComplete();
  context.addDecorator(new AnnotationDecorator(context));
  if (metadataComplete) {
    if (Log.isDebugEnabled())     Log.debug("Metadata-complete==true,  not processing annotations for context " + context);
    return;
  }
 else {
    if (Log.isDebugEnabled())     Log.debug("parsing annotations");
    AnnotationParser parser=createAnnotationParser();
    parser.registerAnnotationHandler("javax.servlet.annotation.WebServlet",new WebServletAnnotationHandler(context));
    parser.registerAnnotationHandler("javax.servlet.annotation.WebFilter",new WebFilterAnnotationHandler(context));
    parser.registerAnnotationHandler("javax.servlet.annotation.WebListener",new WebListenerAnnotationHandler(context));
    ClassInheritanceHandler classHandler=new ClassInheritanceHandler();
    parser.registerClassHandler(classHandler);
    registerServletContainerInitializerAnnotationHandlers(context,parser);
    if (context.getServletContext().getEffectiveMajorVersion() >= 3 || context.isConfigurationDiscovered()) {
      if (Log.isDebugEnabled())       Log.debug("Scanning all classses for annotations: webxmlVersion=" + context.getServletContext().getEffectiveMajorVersion() + " configurationDiscovered="+ context.isConfigurationDiscovered());
      parseContainerPath(context,parser);
      parseWebInfClasses(context,parser);
      parseWebInfLib(context,parser);
    }
    context.setAttribute(CLASS_INHERITANCE_MAP,classHandler.getMap());
  }
}

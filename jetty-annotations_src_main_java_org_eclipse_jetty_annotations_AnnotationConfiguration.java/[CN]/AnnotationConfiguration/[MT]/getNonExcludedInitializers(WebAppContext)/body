{
  ArrayList<ServletContainerInitializer> nonExcludedInitializers=new ArrayList<ServletContainerInitializer>();
  long start=0;
  ClassLoader old=Thread.currentThread().getContextClassLoader();
  ServiceLoader<ServletContainerInitializer> loadedInitializers=null;
  try {
    if (LOG.isDebugEnabled())     start=System.nanoTime();
    Thread.currentThread().setContextClassLoader(context.getClassLoader());
    loadedInitializers=ServiceLoader.load(ServletContainerInitializer.class);
  }
  finally {
    Thread.currentThread().setContextClassLoader(old);
  }
  if (LOG.isDebugEnabled())   LOG.debug("Service loaders found in {}ms",(TimeUnit.MILLISECONDS.convert((System.nanoTime() - start),TimeUnit.NANOSECONDS)));
  ServletContainerInitializerOrdering initializerOrdering=getInitializerOrdering(context);
  if (initializerOrdering != null && !initializerOrdering.isDefaultOrder()) {
    if (LOG.isDebugEnabled())     LOG.debug("Ordering ServletContainerInitializers with " + initializerOrdering);
    for (    ServletContainerInitializer sci : loadedInitializers) {
      Resource sciResource=getJarFor(sci);
      if (!isFromExcludedJar(context,sci,sciResource)) {
        String name=sci.getClass().getName();
        if (initializerOrdering.getIndexOf(name) >= 0 || initializerOrdering.hasWildcard())         nonExcludedInitializers.add(sci);
      }
    }
    Collections.sort(nonExcludedInitializers,new ServletContainerInitializerComparator(initializerOrdering));
  }
 else {
    if (LOG.isDebugEnabled())     LOG.debug("Ordering ServletContainerInitializers as container path, webapp path");
    Map<ServletContainerInitializer,Resource> webappPathInitializerResourceMap=new HashMap<ServletContainerInitializer,Resource>();
    for (    ServletContainerInitializer sci : loadedInitializers) {
      if (sci.getClass().getClassLoader() == context.getClassLoader().getParent()) {
        nonExcludedInitializers.add(sci);
      }
 else {
        Resource sciResource=getJarFor(sci);
        if (!isFromExcludedJar(context,sci,sciResource)) {
          webappPathInitializerResourceMap.put(sci,sciResource);
        }
      }
    }
    if (context.getMetaData().getOrdering() == null)     nonExcludedInitializers.addAll(webappPathInitializerResourceMap.keySet());
 else {
      for (      Map.Entry<ServletContainerInitializer,Resource> entry : webappPathInitializerResourceMap.entrySet()) {
        if (entry.getValue() == null)         nonExcludedInitializers.add(entry.getKey());
      }
      for (      Resource webInfJar : context.getMetaData().getOrderedWebInfJars()) {
        for (        Map.Entry<ServletContainerInitializer,Resource> entry : webappPathInitializerResourceMap.entrySet()) {
          if (webInfJar.equals(entry.getValue()))           nonExcludedInitializers.add(entry.getKey());
        }
      }
    }
  }
  return nonExcludedInitializers;
}

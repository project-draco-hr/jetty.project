{
  if (scis == null || scis.isEmpty())   return;
  List<ContainerInitializer> initializers=new ArrayList<ContainerInitializer>();
  context.setAttribute(CONTAINER_INITIALIZERS,initializers);
  for (  ServletContainerInitializer service : scis) {
    HandlesTypes annotation=service.getClass().getAnnotation(HandlesTypes.class);
    ContainerInitializer initializer=null;
    if (annotation != null) {
      Class[] classes=annotation.value();
      if (classes != null) {
        initializer=new ContainerInitializer(service,classes);
        if (context.getAttribute(CLASS_INHERITANCE_MAP) == null) {
          ConcurrentHashMap<String,ConcurrentHashSet<String>> map=new ConcurrentHashMap<String,ConcurrentHashSet<String>>();
          context.setAttribute(CLASS_INHERITANCE_MAP,map);
          _classInheritanceHandler=new ClassInheritanceHandler(map);
        }
        for (        Class c : classes) {
          if (c.isAnnotation()) {
            if (LOG.isDebugEnabled())             LOG.debug("Registering annotation handler for " + c.getName());
            _containerInitializerAnnotationHandlers.add(new ContainerInitializerAnnotationHandler(initializer,c));
          }
        }
      }
 else {
        initializer=new ContainerInitializer(service,null);
        if (LOG.isDebugEnabled())         LOG.debug("No classes in HandlesTypes on initializer " + service.getClass());
      }
    }
 else {
      initializer=new ContainerInitializer(service,null);
      if (LOG.isDebugEnabled())       LOG.debug("No annotation on initializer " + service.getClass());
    }
    initializers.add(initializer);
  }
  ServletContainerInitializersStarter starter=(ServletContainerInitializersStarter)context.getAttribute(CONTAINER_INITIALIZER_STARTER);
  if (starter != null)   throw new IllegalStateException("ServletContainerInitializersStarter already exists");
  starter=new ServletContainerInitializersStarter(context);
  context.setAttribute(CONTAINER_INITIALIZER_STARTER,starter);
  context.addBean(starter,true);
}

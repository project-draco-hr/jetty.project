{
  BlockheadClient client=new BlockheadClient(server.getServerUri());
  try {
    client.connect();
    client.sendStandardRequest();
    client.expectUpgradeResponse();
    ByteBuffer buf=ByteBuffer.allocate(Generator.OVERHEAD + 2);
    BufferUtil.clearToFill(buf);
    String fragment1="fragment1";
    buf.put((byte)(0x00 | OpCode.TEXT.getCode()));
    byte b=0x00;
    b|=fragment1.length() & 0x7F;
    buf.put(b);
    buf.put(fragment1.getBytes());
    BufferUtil.flipToFlush(buf,0);
    client.writeRaw(buf);
    ByteBuffer pingBuf=ByteBuffer.allocate(Generator.OVERHEAD + 2);
    BufferUtil.clearToFill(pingBuf);
    String pingPayload="ping payload";
    pingBuf.put((byte)(0x00 | OpCode.PING.getCode()));
    b=0x00;
    b|=pingPayload.length() & 0x7F;
    pingBuf.put(b);
    pingBuf.put(pingPayload.getBytes());
    BufferUtil.flipToFlush(pingBuf,0);
    client.writeRaw(buf);
    ByteBuffer buf2=ByteBuffer.allocate(Generator.OVERHEAD + 2);
    BufferUtil.clearToFill(buf2);
    String fragment2="fragment2";
    buf2.put((byte)(0x80 | OpCode.CONTINUATION.getCode()));
    b=0x00;
    b|=fragment2.length() & 0x7F;
    buf2.put(b);
    buf2.put(fragment2.getBytes());
    BufferUtil.flipToFlush(buf2,0);
    client.writeRaw(buf2);
    Queue<WebSocketFrame> frames=client.readFrames(2,TimeUnit.MILLISECONDS,500);
    WebSocketFrame frame=frames.remove();
    Assert.assertThat("first frame should be pong frame",frame.getOpCode(),is(OpCode.PING));
    ByteBuffer payload1=ByteBuffer.allocate(pingPayload.length());
    payload1.flip();
    ByteBufferAssert.assertEquals("payloads should be equal",payload1,frame.getPayload());
    frame=frames.remove();
    Assert.assertThat("second frame should be text frame",frame.getOpCode(),is(OpCode.TEXT));
    Assert.assertThat("TextFrame.payload",frame.getPayloadAsUTF8(),is(fragment1 + fragment2));
  }
  finally {
    client.close();
  }
}

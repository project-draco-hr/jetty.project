{
  Resource resource=null;
  resource=super.getResource(uriInContext);
  if ((resource == null || !resource.exists()) && uriInContext != null && _classes != null) {
    String uri=URIUtil.canonicalPath(uriInContext);
    if (uri == null)     return null;
    try {
      if (uri.startsWith(WEB_INF_CLASSES_PREFIX)) {
        if (uri.equalsIgnoreCase(WEB_INF_CLASSES_PREFIX) || uri.equalsIgnoreCase(WEB_INF_CLASSES_PREFIX + "/")) {
          if (_classes != null)           return Resource.newResource(_classes);
 else           if (_testClasses != null)           return Resource.newResource(_testClasses);
        }
 else {
          Resource res=null;
          int i=0;
          while (res == null && (i < _webInfClasses.size())) {
            String newPath=uri.replace(WEB_INF_CLASSES_PREFIX,_webInfClasses.get(i).getPath());
            res=Resource.newResource(newPath);
            if (!res.exists()) {
              res=null;
              i++;
            }
          }
          return res;
        }
      }
 else       if (uri.startsWith(WEB_INF_LIB_PREFIX)) {
        String jarName=uri.replace(WEB_INF_LIB_PREFIX,"");
        if (jarName.startsWith("/") || jarName.startsWith("\\"))         jarName=jarName.substring(1);
        if (jarName.length() == 0)         return null;
        File jarFile=_webInfJarMap.get(jarName);
        if (jarFile != null)         return Resource.newResource(jarFile.getPath());
        return null;
      }
    }
 catch (    MalformedURLException e) {
      throw e;
    }
catch (    IOException e) {
      LOG.ignore(e);
    }
  }
  return resource;
}

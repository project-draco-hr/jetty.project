{
  if (!isGenerateQuickStart() && getQuickStartWebDescriptor() != null)   setConfigurations(_quickStartConfigurations);
 else {
    setConfigurations(_defaultConfigurations);
    if (isGenerateQuickStart()) {
      _preconfigProcessor=new PreconfigureDescriptorProcessor();
      getMetaData().addDescriptorProcessor(_preconfigProcessor);
    }
  }
  for (  Configuration c : getConfigurations()) {
    if (c instanceof EnvConfiguration && getJettyEnvXml() != null)     ((EnvConfiguration)c).setJettyEnvXml(Resource.toURL(new File(getJettyEnvXml())));
 else     if (c instanceof MavenQuickStartConfiguration && getQuickStartWebDescriptor() != null)     ((MavenQuickStartConfiguration)c).setQuickStartWebXml(getQuickStartWebDescriptor());
  }
  String tmp=_containerIncludeJarPattern;
  if (tmp == null || "".equals(tmp))   tmp=(String)getAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN);
  tmp=addPattern(tmp,DEFAULT_CONTAINER_INCLUDE_JAR_PATTERN);
  setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN,tmp);
  if (_webInfIncludeJarPattern != null)   setAttribute(WebInfConfiguration.WEBINF_JAR_PATTERN,_webInfIncludeJarPattern);
  if (_testClasses != null)   _webInfClasses.add(_testClasses);
  if (_classes != null)   _webInfClasses.add(_classes);
  _classpathFiles=new ArrayList<File>();
  _classpathFiles.addAll(_webInfClasses);
  _classpathFiles.addAll(_webInfJars);
  _webInfJarMap.clear();
  for (  File file : _webInfJars) {
    String fileName=file.getName();
    if (fileName.endsWith(".jar"))     _webInfJarMap.put(fileName,file);
  }
  super.doStart();
}

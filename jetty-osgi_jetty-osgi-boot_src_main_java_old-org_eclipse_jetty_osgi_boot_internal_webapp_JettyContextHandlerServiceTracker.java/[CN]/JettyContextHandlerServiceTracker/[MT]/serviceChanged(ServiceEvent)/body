{
  ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.MODIFIED:
case ServiceEvent.UNREGISTERING:
{
      ContextHandler ctxtHandler=unregisterInIndex(ev.getServiceReference());
      if (ctxtHandler != null && !ctxtHandler.isStopped()) {
        try {
          getWebBundleDeployerHelp(sr).unregister(ctxtHandler);
        }
 catch (        Exception e) {
          __logger.warn(e);
        }
      }
    }
  if (ev.getType() == ServiceEvent.UNREGISTERING) {
    break;
  }
 else {
  }
case ServiceEvent.REGISTERED:
{
  Bundle contributor=sr.getBundle();
  BundleContext context=FrameworkUtil.getBundle(JettyBootstrapActivator.class).getBundleContext();
  ContextHandler contextHandler=(ContextHandler)context.getService(sr);
  if (contextHandler.getServer() != null) {
    return;
  }
  String contextFilePath=(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_CONTEXT_FILE_PATH);
  if (contextHandler instanceof WebAppContext && contextFilePath == null) {
    WebAppContext webapp=(WebAppContext)contextHandler;
    String contextPath=(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_CONTEXT_PATH);
    if (contextPath == null) {
      contextPath=webapp.getContextPath();
    }
    String webXmlPath=(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_WEB_XML_PATH);
    if (webXmlPath == null) {
      webXmlPath=webapp.getDescriptor();
    }
    String defaultWebXmlPath=(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_DEFAULT_WEB_XML_PATH);
    if (defaultWebXmlPath == null) {
      String jettyHome=System.getProperty(DefaultJettyAtJettyHomeHelper.SYS_PROP_JETTY_HOME);
      if (jettyHome != null) {
        File etc=new File(jettyHome,"etc");
        if (etc.exists() && etc.isDirectory()) {
          File webDefault=new File(etc,"webdefault.xml");
          if (webDefault.exists())           defaultWebXmlPath=webDefault.getAbsolutePath();
 else           defaultWebXmlPath=webapp.getDefaultsDescriptor();
        }
 else         defaultWebXmlPath=webapp.getDefaultsDescriptor();
      }
    }
    String war=(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_WAR);
    try {
      IWebBundleDeployerHelper deployerHelper=getWebBundleDeployerHelp(sr);
      if (deployerHelper == null) {
      }
 else {
        WebAppContext handler=deployerHelper.registerWebapplication(contributor,war,contextPath,(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_EXTRA_CLASSPATH),(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_BUNDLE_INSTALL_LOCATION_OVERRIDE),(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_REQUIRE_TLD_BUNDLE),webXmlPath,defaultWebXmlPath,webapp);
        if (handler != null) {
          registerInIndex(handler,sr);
        }
      }
    }
 catch (    Throwable e) {
      __logger.warn(e);
    }
  }
 else {
    if (contextFilePath == null) {
      throw new IllegalArgumentException("the property contextFilePath is required");
    }
    try {
      IWebBundleDeployerHelper deployerHelper=getWebBundleDeployerHelp(sr);
      if (deployerHelper == null) {
      }
 else {
        if (Boolean.TRUE.toString().equals(sr.getProperty(IWebBundleDeployerHelper.INTERNAL_SERVICE_PROP_UNKNOWN_CONTEXT_HANDLER_TYPE))) {
          contextHandler=null;
        }
        ContextHandler handler=deployerHelper.registerContext(contributor,contextFilePath,(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_EXTRA_CLASSPATH),(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_BUNDLE_INSTALL_LOCATION_OVERRIDE),(String)sr.getProperty(OSGiWebappConstants.SERVICE_PROP_REQUIRE_TLD_BUNDLE),contextHandler);
        if (handler != null) {
          registerInIndex(handler,sr);
        }
      }
    }
 catch (    Throwable e) {
      __logger.warn(e);
    }
  }
}
break;
}
}

{
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  List<URL> webAppUrls=setUpWebAppClassPath();
  Set<URL> pluginJars=getPluginJars();
  Set<URL> providedJars=getProvidedScopeJars(pluginJars);
  List<URL> sysUrls=new ArrayList<URL>();
  sysUrls.addAll(providedJars);
  URLClassLoader sysClassLoader=new URLClassLoader((URL[])sysUrls.toArray(new URL[0]),currentClassLoader);
  URLClassLoader webAppClassLoader=new URLClassLoader((URL[])webAppUrls.toArray(new URL[0]),sysClassLoader);
  StringBuffer webAppClassPath=new StringBuffer();
  for (int i=0; i < webAppUrls.size(); i++) {
    if (getLog().isDebugEnabled())     getLog().debug("webappclassloader contains: " + webAppUrls.get(i));
    webAppClassPath.append(new File(webAppUrls.get(i).toURI()).getCanonicalPath());
    if (getLog().isDebugEnabled())     getLog().debug("added to classpath: " + ((URL)webAppUrls.get(i)).getFile());
    if (i + 1 < webAppUrls.size())     webAppClassPath.append(System.getProperty("path.separator"));
  }
  URLClassLoader fakeWebAppClassLoader=new URLClassLoader(new URL[0],webAppClassLoader);
  Thread.currentThread().setContextClassLoader(fakeWebAppClassLoader);
  if (jspc == null)   jspc=new JettyJspC();
  jspc.setWebXmlFragment(webXmlFragment);
  jspc.setUriroot(webAppSourceDirectory);
  jspc.setOutputDir(generatedClasses);
  jspc.setClassLoader(fakeWebAppClassLoader);
  jspc.setScanAllDirectories(scanAllDirectories);
  jspc.setCompile(true);
  String jspFiles=getJspFiles(webAppSourceDirectory);
  try {
    if (jspFiles == null | jspFiles.equals("")) {
      getLog().info("No files selected to precompile");
    }
 else {
      getLog().info("Compiling " + jspFiles + " from includes="+ includes+ " excludes="+ excludes);
      jspc.setJspFiles(jspFiles);
      jspc.execute();
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
  }
}

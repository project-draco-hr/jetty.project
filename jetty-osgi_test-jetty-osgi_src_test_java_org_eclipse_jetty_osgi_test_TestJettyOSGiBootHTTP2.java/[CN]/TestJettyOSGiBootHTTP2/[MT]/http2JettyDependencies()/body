{
  List<Option> res=new ArrayList<Option>();
  res.add(CoreOptions.systemProperty("jetty.port").value(String.valueOf(TestJettyOSGiBootCore.DEFAULT_HTTP_PORT)));
  res.add(CoreOptions.systemProperty("ssl.port").value(String.valueOf(TestJettyOSGiBootCore.DEFAULT_SSL_PORT)));
  String alpnBoot=System.getProperty("mortbay-alpn-boot");
  if (alpnBoot == null) {
    throw new IllegalStateException("Define path to alpn boot jar as system property -Dmortbay-alpn-boot");
  }
  File checkALPNBoot=new File(alpnBoot);
  if (!checkALPNBoot.exists()) {
    throw new IllegalStateException("Unable to find the alpn boot jar here: " + alpnBoot);
  }
  res.add(CoreOptions.vmOptions("-Xbootclasspath/p:" + alpnBoot));
  res.add(mavenBundle().groupId("org.eclipse.jetty.osgi").artifactId("jetty-osgi-alpn").versionAsInProject().noStart());
  res.add(mavenBundle().groupId("org.eclipse.jetty").artifactId("jetty-alpn-server").versionAsInProject().start());
  res.add(mavenBundle().groupId("org.eclipse.jetty.http2").artifactId("http2-hpack").versionAsInProject().noStart());
  res.add(mavenBundle().groupId("org.eclipse.jetty.http2").artifactId("http2-common").versionAsInProject().noStart());
  res.add(mavenBundle().groupId("org.eclipse.jetty.http2").artifactId("http2-server").versionAsInProject().noStart());
  return res;
}

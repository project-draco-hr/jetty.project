{
  String keystorePath=System.getProperty("basedir",".") + "/src/test/resources/keystore";
  SslContextFactory sslContextFactory=new SslContextFactory();
  sslContextFactory.setKeyStorePath(keystorePath);
  sslContextFactory.setKeyStorePassword("storepwd");
  sslContextFactory.setKeyManagerPassword("keypwd");
  sslContextFactory.setTrustStorePath(keystorePath);
  sslContextFactory.setTrustStorePassword("storepwd");
  SelectChannelConnector connector=new SelectChannelConnector(_server,sslContextFactory);
  startServer(connector);
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  keystore.load(new FileInputStream(sslContextFactory.getKeyStorePath()),"storepwd".toCharArray());
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(keystore);
  __sslContext=SSLContext.getInstance("TLS");
  __sslContext.init(null,trustManagerFactory.getTrustManagers(),null);
  try {
    HttpsURLConnection.setDefaultHostnameVerifier(__hostnameverifier);
    SSLContext sc=SSLContext.getInstance("TLS");
    sc.init(null,SslContextFactory.TRUST_ALL_CERTS,new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}

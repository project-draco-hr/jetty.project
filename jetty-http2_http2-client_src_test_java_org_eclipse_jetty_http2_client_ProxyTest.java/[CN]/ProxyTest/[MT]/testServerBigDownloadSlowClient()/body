{
  final CountDownLatch serverLatch=new CountDownLatch(1);
  final byte[] content=new byte[1024 * 1024];
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      response.getOutputStream().write(content);
      serverLatch.countDown();
    }
  }
);
  Map<String,String> params=new HashMap<>();
  params.put("proxyTo","http://localhost:" + serverConnector.getLocalPort());
  startProxy(new AsyncProxyServlet.Transparent(){
    @Override protected void sendProxyRequest(    HttpServletRequest clientRequest,    HttpServletResponse proxyResponse,    Request proxyRequest){
      proxyRequest.version(HttpVersion.HTTP_1_1);
      super.sendProxyRequest(clientRequest,proxyResponse,proxyRequest);
    }
  }
,params);
  startClient();
  final CountDownLatch clientLatch=new CountDownLatch(1);
  Session session=newClient(new Session.Listener.Adapter());
  MetaData.Request metaData=newRequest("GET","/",new HttpFields());
  HeadersFrame frame=new HeadersFrame(metaData,null,true);
  session.newStream(frame,new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      try {
        TimeUnit.MILLISECONDS.sleep(1);
        callback.succeeded();
        if (frame.isEndStream())         clientLatch.countDown();
      }
 catch (      InterruptedException x) {
        callback.failed(x);
      }
    }
  }
);
  Assert.assertTrue(serverLatch.await(15,TimeUnit.SECONDS));
  Assert.assertTrue(clientLatch.await(15,TimeUnit.SECONDS));
}

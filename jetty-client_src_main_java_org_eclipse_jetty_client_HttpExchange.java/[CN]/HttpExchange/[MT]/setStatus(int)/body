{
  try {
synchronized (this) {
      notifyAll();
switch (_status) {
case STATUS_START:
switch (status) {
case STATUS_WAITING_FOR_CONNECTION:
case STATUS_WAITING_FOR_COMMIT:
case STATUS_CANCELLING:
          _status=status;
        break;
default :
      throw new IllegalStateException(_status + " => " + status);
  }
break;
case STATUS_WAITING_FOR_CONNECTION:
switch (status) {
case STATUS_WAITING_FOR_COMMIT:
case STATUS_CANCELLING:
case STATUS_EXCEPTED:
_status=status;
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
case STATUS_WAITING_FOR_COMMIT:
switch (status) {
case STATUS_SENDING_REQUEST:
case STATUS_CANCELLING:
case STATUS_EXCEPTED:
_status=status;
break;
case STATUS_EXPIRED:
_status=status;
getEventListener().onExpire();
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
case STATUS_SENDING_REQUEST:
switch (status) {
case STATUS_WAITING_FOR_RESPONSE:
_status=status;
getEventListener().onRequestCommitted();
break;
case STATUS_CANCELLING:
case STATUS_EXCEPTED:
_status=status;
break;
case STATUS_EXPIRED:
_status=status;
getEventListener().onExpire();
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
case STATUS_WAITING_FOR_RESPONSE:
switch (status) {
case STATUS_PARSING_HEADERS:
case STATUS_CANCELLING:
case STATUS_EXCEPTED:
_status=status;
break;
case STATUS_EXPIRED:
_status=status;
getEventListener().onExpire();
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
case STATUS_PARSING_HEADERS:
switch (status) {
case STATUS_PARSING_CONTENT:
_status=status;
getEventListener().onResponseHeaderComplete();
break;
case STATUS_CANCELLING:
case STATUS_EXCEPTED:
_status=status;
break;
case STATUS_EXPIRED:
_status=status;
getEventListener().onExpire();
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
case STATUS_PARSING_CONTENT:
switch (status) {
case STATUS_COMPLETED:
_status=status;
getEventListener().onResponseComplete();
break;
case STATUS_CANCELLING:
case STATUS_EXCEPTED:
_status=status;
break;
case STATUS_EXPIRED:
_status=status;
getEventListener().onExpire();
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
case STATUS_COMPLETED:
switch (status) {
case STATUS_START:
_status=status;
break;
case STATUS_CANCELLING:
case STATUS_EXPIRED:
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
case STATUS_CANCELLING:
switch (status) {
case STATUS_CANCELLED:
_status=status;
break;
default :
break;
}
break;
case STATUS_EXCEPTED:
case STATUS_EXPIRED:
case STATUS_CANCELLED:
switch (status) {
case STATUS_START:
_status=status;
break;
default :
throw new IllegalStateException(_status + " => " + status);
}
break;
default :
throw new AssertionError(_status + " => " + status);
}
}
}
 catch (IOException x) {
Log.warn(x);
}
}

{
  proxyRequest.attribute(REMOTE_ADDR_ATTRIBUTE,request.getRemoteAddr());
  proxyRequest.attribute(REMOTE_PORT_ATTRIBUTE,String.valueOf(request.getRemotePort()));
  proxyRequest.attribute(SERVER_NAME_ATTRIBUTE,request.getServerName());
  proxyRequest.attribute(SERVER_ADDR_ATTRIBUTE,request.getLocalAddr());
  proxyRequest.attribute(SERVER_PORT_ATTRIBUTE,String.valueOf(request.getLocalPort()));
  proxyRequest.attribute(SCHEME_ATTRIBUTE,request.getScheme());
  String originalPath=(String)request.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);
  String originalQuery=(String)request.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING);
  if (originalPath == null) {
    originalPath=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);
    originalQuery=(String)request.getAttribute(RequestDispatcher.INCLUDE_QUERY_STRING);
  }
  if (originalPath != null) {
    String originalURI=originalPath;
    if (originalQuery != null)     originalURI+="?" + originalQuery;
    proxyRequest.attribute(REQUEST_URI_ATTRIBUTE,originalURI);
  }
  if (!proxyRequest.getHeaders().containsKey(HttpHeader.HOST.asString())) {
    String host=request.getServerName();
    int port=request.getServerPort();
    if (!getHttpClient().isDefaultPort(request.getScheme(),port))     host+=":" + port;
    proxyRequest.header(HttpHeader.HOST,host);
    proxyRequest.header(HttpHeader.X_FORWARDED_HOST,host);
  }
  List<String> cookies=proxyRequest.getHeaders().getValuesList(HttpHeader.COOKIE.asString());
  if (cookies.size() > 1) {
    StringBuilder builder=new StringBuilder();
    for (int i=0; i < cookies.size(); ++i) {
      if (i > 0)       builder.append("; ");
      String cookie=cookies.get(i);
      builder.append(cookie);
    }
    proxyRequest.header(HttpHeader.COOKIE,null);
    proxyRequest.header(HttpHeader.COOKIE,builder.toString());
  }
  super.customizeProxyRequest(proxyRequest,request);
}

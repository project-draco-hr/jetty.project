{
  if (LOG.isDebugEnabled())   LOG.debug("beanAdded {}->{}",parent,obj);
  ObjectName parentObjectName=null;
  if (parent != null) {
    parentObjectName=findMBean(parent);
    if (parentObjectName == null) {
      beanAdded(null,parent);
      parentObjectName=findMBean(parent);
    }
  }
  if (obj == null || _beans.containsKey(obj))   return;
  try {
    Object mbean=ObjectMBean.mbeanFor(obj);
    if (mbean == null)     return;
    ObjectName objectName=null;
    if (mbean instanceof ObjectMBean) {
      ((ObjectMBean)mbean).setMBeanContainer(this);
      objectName=((ObjectMBean)mbean).getObjectName();
    }
    if (objectName == null) {
      String domain=_domain;
      if (domain == null)       domain=obj.getClass().getPackage().getName();
      String type=obj.getClass().getName().toLowerCase(Locale.ENGLISH);
      int dot=type.lastIndexOf('.');
      if (dot >= 0)       type=type.substring(dot + 1);
      StringBuilder buf=new StringBuilder();
      String context=(mbean instanceof ObjectMBean) ? makeName(((ObjectMBean)mbean).getObjectContextBasis()) : null;
      if (context == null && parentObjectName != null)       context=parentObjectName.getKeyProperty("context");
      if (context != null && context.length() > 1)       buf.append("context=").append(context).append(",");
      buf.append("type=").append(type);
      String name=(mbean instanceof ObjectMBean) ? makeName(((ObjectMBean)mbean).getObjectNameBasis()) : context;
      if (name != null && name.length() > 1)       buf.append(",").append("name=").append(name);
      String basis=buf.toString();
      AtomicInteger count=__unique.get(basis);
      if (count == null) {
        count=new AtomicInteger();
        AtomicInteger existing=__unique.putIfAbsent(basis,count);
        if (existing != null)         count=existing;
      }
      objectName=ObjectName.getInstance(domain + ":" + basis+ ",id="+ count.getAndIncrement());
    }
    _mbeanServer.registerMBean(mbean,objectName);
    if (LOG.isDebugEnabled())     LOG.debug("Registered {}",objectName);
    _beans.put(obj,objectName);
  }
 catch (  Throwable x) {
    LOG.warn("bean: " + obj,x);
  }
}

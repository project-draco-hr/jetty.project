{
  HttpServletRequest srequest=(HttpServletRequest)request;
  if (srequest.getContentType() == null || !srequest.getContentType().startsWith("multipart/form-data")) {
    chain.doFilter(request,response);
    return;
  }
  InputStream in=new BufferedInputStream(request.getInputStream());
  String content_type=srequest.getContentType();
  MultiMap params=new MultiMap();
  for (  Map.Entry<String,String[]> entry : request.getParameterMap().entrySet()) {
    Object value=entry.getValue();
    if (value instanceof String[])     params.addValues(entry.getKey(),(String[])value);
 else     params.add(entry.getKey(),value);
  }
  MultipartConfigElement config=new MultipartConfigElement(tempdir.getCanonicalPath(),_maxFileSize,_maxRequestSize,_fileOutputBuffer);
  MultiPartInputStream mpis=new MultiPartInputStream(in,content_type,config,tempdir);
  mpis.setDeleteOnExit(_deleteFiles);
  request.setAttribute(MULTIPART,mpis);
  try {
    Collection<Part> parts=mpis.getParts();
    if (parts != null) {
      Iterator<Part> itor=parts.iterator();
      while (itor.hasNext() && params.size() < _maxFormKeys) {
        Part p=itor.next();
        MultiPartInputStream.MultiPart mp=(MultiPartInputStream.MultiPart)p;
        if (mp.getFile() != null) {
          request.setAttribute(mp.getName(),mp.getFile());
          if (mp.getContentDispositionFilename() != null) {
            params.add(mp.getName(),mp.getContentDispositionFilename());
            if (mp.getContentType() != null)             params.add(mp.getName() + CONTENT_TYPE_SUFFIX,mp.getContentType());
          }
        }
 else {
          ByteArrayOutputStream bytes=new ByteArrayOutputStream();
          IO.copy(p.getInputStream(),bytes);
          params.add(p.getName(),bytes.toByteArray());
          if (p.getContentType() != null)           params.add(p.getName() + CONTENT_TYPE_SUFFIX,p.getContentType());
        }
      }
    }
    chain.doFilter(new Wrapper(srequest,params),response);
  }
  finally {
    deleteFiles(request);
  }
}

{
  final CountDownLatch midLatch=new CountDownLatch(2);
  final CountDownLatch end1Latch=new CountDownLatch(1);
  Callable<Session> call1=new Callable<Session>(){
    @Override public Session call() throws Exception {
      Session ret=null;
      ScopedInstance<WebSocketScopeContext> wsScope1Bean=newInstance(WebSocketScopeContext.class);
      WebSocketScopeContext wsScope1=wsScope1Bean.instance;
      wsScope1.create();
      try {
        wsScope1.begin();
        BogusSession sess=new BogusSession("1");
        wsScope1.setSession(sess);
        midLatch.countDown();
        midLatch.await(1,TimeUnit.SECONDS);
        ScopedInstance<BogusSocket> sock1Bean=newInstance(BogusSocket.class);
        BogusSocket sock1=sock1Bean.instance;
        assertThat("Socket 1 Session",sock1.getSession(),sameInstance((Session)sess));
        ret=sock1.getSession();
        sock1Bean.destroy();
      }
  finally {
        wsScope1.end();
      }
      wsScope1.destroy();
      wsScope1Bean.destroy();
      end1Latch.countDown();
      return ret;
    }
  }
;
  final CountDownLatch end2Latch=new CountDownLatch(1);
  Callable<Session> call2=new Callable<Session>(){
    @Override public Session call() throws Exception {
      Session ret=null;
      ScopedInstance<WebSocketScopeContext> wsScope2Bean=newInstance(WebSocketScopeContext.class);
      WebSocketScopeContext wsScope2=wsScope2Bean.instance;
      wsScope2.create();
      try {
        wsScope2.begin();
        BogusSession sess=new BogusSession("2");
        wsScope2.setSession(sess);
        ScopedInstance<BogusSocket> sock2Bean=newInstance(BogusSocket.class);
        midLatch.countDown();
        midLatch.await(1,TimeUnit.SECONDS);
        BogusSocket sock2=sock2Bean.instance;
        ret=sock2.getSession();
        assertThat("Socket 2 Session",sock2.getSession(),sameInstance((Session)sess));
        sock2Bean.destroy();
      }
  finally {
        wsScope2.end();
      }
      wsScope2.destroy();
      wsScope2Bean.destroy();
      end2Latch.countDown();
      return ret;
    }
  }
;
  ExecutorService svc=Executors.newFixedThreadPool(4);
  Future<Session> fut1=svc.submit(call1);
  Future<Session> fut2=svc.submit(call2);
  Session sess1=fut1.get(1,TimeUnit.SECONDS);
  Session sess2=fut2.get(1,TimeUnit.SECONDS);
  assertThat("Sessions are different",sess1,not(sameInstance(sess2)));
}

{
  Socket socket=new Socket("localhost",__connector.getLocalPort());
  socket.setSoTimeout(60000);
  OutputStream output=socket.getOutputStream();
  InputStream input=socket.getInputStream();
  output.write(("GET /test HTTP/1.1\r\n" + "Host: localhost\r\n" + "Upgrade: WebSocket\r\n"+ "Connection: Upgrade\r\n"+ "Sec-WebSocket-Protocol: latch\r\n"+ "Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5\r\n"+ "Sec-WebSocket-Key2: 12998 5 Y3 1  .P00\r\n"+ "\r\n"+ "^n:ds[4U").getBytes("ISO-8859-1"));
  output.flush();
  lookFor("HTTP/1.1 101 WebSocket Protocol Handshake\r\n",input);
  skipTo("\r\n\r\n",input);
  lookFor("8jKS'y:G*Co,Wxa-",input);
  assertTrue(__serverWebSocket.awaitConnected(1000));
  assertNotNull(__serverWebSocket.connection);
  __serverWebSocket.connection.setMaxIdleTime(60000);
  byte[] bytes="This is a long message of text that we will send again and again".getBytes(StringUtil.__ISO_8859_1);
  byte[] mesg=new byte[bytes.length + 2];
  mesg[0]=(byte)0x00;
  for (int i=0; i < bytes.length; i++)   mesg[i + 1]=(byte)(bytes[i]);
  mesg[mesg.length - 1]=(byte)0xFF;
  final int count=100000;
  output.write(mesg);
  output.flush();
  while (__textCount.get() == 0)   Thread.sleep(10);
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(4000);
        __latch.countDown();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
  long max=0;
  long start=System.currentTimeMillis();
  for (int i=0; i < count; i++) {
    output.write(mesg);
    if (i % 100 == 0) {
      output.flush();
      long now=System.currentTimeMillis();
      long duration=now - start;
      start=now;
      if (max < duration)       max=duration;
    }
  }
  Thread.sleep(50);
  while (__textCount.get() < count + 1) {
    System.err.println(__textCount.get() + "<" + (count + 1));
    Thread.sleep(10);
  }
  assertEquals(count + 1,__textCount.get());
  assertTrue(max > 2000);
}

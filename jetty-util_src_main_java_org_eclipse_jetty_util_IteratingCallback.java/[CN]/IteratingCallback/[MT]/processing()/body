{
  boolean on_complete_success=false;
  processing:   while (true) {
    Action action;
    try {
      action=process();
    }
 catch (    Throwable x) {
      failed(x);
      break processing;
    }
    try (SpinLock.Lock lock=_lock.lock()){
switch (_state) {
case PROCESSING:
{
switch (action) {
case IDLE:
{
              if (_iterate) {
                _iterate=false;
                _state=State.PROCESSING;
                continue processing;
              }
              _state=State.IDLE;
              break processing;
            }
case SCHEDULED:
{
            _state=State.PENDING;
            break processing;
          }
case SUCCEEDED:
{
          _iterate=false;
          _state=State.SUCCEEDED;
          on_complete_success=true;
          break processing;
        }
default :
      throw new IllegalStateException("state=" + _state + " action="+ action);
  }
}
case CALLED:
{
switch (action) {
case SCHEDULED:
{
    _state=State.PROCESSING;
    continue processing;
  }
default :
throw new IllegalStateException("state=" + _state + " action="+ action);
}
}
case SUCCEEDED:
case FAILED:
case CLOSED:
break processing;
case IDLE:
case PENDING:
default :
throw new IllegalStateException("state=" + _state + " action="+ action);
}
}
 }
if (on_complete_success) onCompleteSuccess();
}

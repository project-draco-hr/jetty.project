{
  if (_context == null) {
    if (_keyStore == null && _keyStoreInputStream == null && _keyStorePath == null && _trustStore == null && _trustStoreInputStream == null && _trustStorePath == null) {
      TrustManager[] trust_managers=null;
      if (_trustAll) {
        if (LOG.isDebugEnabled())         LOG.debug("No keystore or trust store configured.  ACCEPTING UNTRUSTED CERTIFICATES!!!!!");
        trust_managers=TRUST_ALL_CERTS;
      }
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      SSLContext context=SSLContext.getInstance(_sslProtocol);
      context.init(null,trust_managers,secureRandom);
      _context=context;
    }
 else {
      checkKeyStore();
      KeyStore keyStore=loadKeyStore();
      KeyStore trustStore=loadTrustStore();
      Collection<? extends CRL> crls=loadCRL(_crlPath);
      if (_validateCerts && keyStore != null) {
        if (_certAlias == null) {
          List<String> aliases=Collections.list(keyStore.aliases());
          _certAlias=aliases.size() == 1 ? aliases.get(0) : null;
        }
        Certificate cert=_certAlias == null ? null : keyStore.getCertificate(_certAlias);
        if (cert == null) {
          throw new Exception("No certificate found in the keystore" + (_certAlias == null ? "" : " for alias " + _certAlias));
        }
        CertificateValidator validator=new CertificateValidator(trustStore,crls);
        validator.setMaxCertPathLength(_maxCertPathLength);
        validator.setEnableCRLDP(_enableCRLDP);
        validator.setEnableOCSP(_enableOCSP);
        validator.setOcspResponderURL(_ocspResponderURL);
        validator.validate(keyStore,cert);
      }
      KeyManager[] keyManagers=getKeyManagers(keyStore);
      TrustManager[] trustManagers=getTrustManagers(trustStore,crls);
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      SSLContext context=_sslProvider == null ? SSLContext.getInstance(_sslProtocol) : SSLContext.getInstance(_sslProtocol,_sslProvider);
      context.init(keyManagers,trustManagers,secureRandom);
      _context=context;
    }
    SSLEngine engine=newSSLEngine();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Enabled Protocols {} of {}",Arrays.asList(engine.getEnabledProtocols()),Arrays.asList(engine.getSupportedProtocols()));
      LOG.debug("Enabled Ciphers   {} of {}",Arrays.asList(engine.getEnabledCipherSuites()),Arrays.asList(engine.getSupportedCipherSuites()));
    }
  }
}

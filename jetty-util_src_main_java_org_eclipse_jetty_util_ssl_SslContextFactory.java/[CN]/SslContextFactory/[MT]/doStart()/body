{
  SSLContext context=_setContext;
  KeyStore keyStore=_setKeyStore;
  KeyStore trustStore=_setTrustStore;
  if (context == null) {
    if (keyStore == null && _keyStoreResource == null && trustStore == null && _trustStoreResource == null) {
      TrustManager[] trust_managers=null;
      if (_trustAll) {
        if (LOG.isDebugEnabled())         LOG.debug("No keystore or trust store configured.  ACCEPTING UNTRUSTED CERTIFICATES!!!!!");
        trust_managers=TRUST_ALL_CERTS;
      }
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      context=_sslProvider == null ? SSLContext.getInstance(_sslProtocol) : SSLContext.getInstance(_sslProtocol,_sslProvider);
      context.init(null,trust_managers,secureRandom);
    }
 else {
      if (keyStore == null)       keyStore=loadKeyStore(_keyStoreResource);
      if (trustStore == null)       trustStore=loadTrustStore(_trustStoreResource);
      Collection<? extends CRL> crls=loadCRL(_crlPath);
      _certHosts.clear();
      if (keyStore != null) {
        for (        String alias : Collections.list(keyStore.aliases())) {
          Certificate certificate=keyStore.getCertificate(alias);
          if (certificate != null && "X.509".equals(certificate.getType())) {
            X509Certificate x509C=(X509Certificate)certificate;
            if (X509.isCertSign(x509C)) {
              if (LOG.isDebugEnabled())               LOG.debug("Skipping " + x509C);
              continue;
            }
            X509 x509=new X509(alias,x509C);
            _aliasX509.put(alias,x509);
            if (_validateCerts) {
              CertificateValidator validator=new CertificateValidator(trustStore,crls);
              validator.setMaxCertPathLength(_maxCertPathLength);
              validator.setEnableCRLDP(_enableCRLDP);
              validator.setEnableOCSP(_enableOCSP);
              validator.setOcspResponderURL(_ocspResponderURL);
              validator.validate(keyStore,x509C);
            }
            LOG.info("x509={} for {}",x509,this);
            for (            String h : x509.getHosts())             _certHosts.put(h,x509);
            for (            String w : x509.getWilds())             _certWilds.put(w,x509);
          }
        }
      }
      KeyManager[] keyManagers=getKeyManagers(keyStore);
      TrustManager[] trustManagers=getTrustManagers(trustStore,crls);
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      context=_sslProvider == null ? SSLContext.getInstance(_sslProtocol) : SSLContext.getInstance(_sslProtocol,_sslProvider);
      context.init(keyManagers,trustManagers,secureRandom);
    }
  }
  SSLSessionContext serverContext=context.getServerSessionContext();
  if (serverContext != null) {
    if (getSslSessionCacheSize() > -1)     serverContext.setSessionCacheSize(getSslSessionCacheSize());
    if (getSslSessionTimeout() > -1)     serverContext.setSessionTimeout(getSslSessionTimeout());
  }
  SSLEngine sslEngine=context.createSSLEngine();
  sslEngine.setSSLParameters(customize(sslEngine.getSSLParameters()));
  selectCipherSuites(sslEngine.getEnabledCipherSuites(),sslEngine.getSupportedCipherSuites());
  selectProtocols(sslEngine.getEnabledProtocols(),sslEngine.getSupportedProtocols());
  _factory=new Factory(keyStore,trustStore,context);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Selected Protocols {} of {}",Arrays.asList(_selectedProtocols),Arrays.asList(sslEngine.getSupportedProtocols()));
    LOG.debug("Selected Ciphers   {} of {}",Arrays.asList(_selectedCipherSuites),Arrays.asList(sslEngine.getSupportedCipherSuites()));
  }
}

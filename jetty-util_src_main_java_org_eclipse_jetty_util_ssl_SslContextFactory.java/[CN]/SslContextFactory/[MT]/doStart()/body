{
  SSLContext context=_setContext;
  KeyStore keyStore=_setKeyStore;
  KeyStore trustStore=_setTrustStore;
  if (context == null) {
    if (keyStore == null && _keyStoreResource == null && trustStore == null && _trustStoreResource == null) {
      TrustManager[] trust_managers=null;
      if (_trustAll) {
        if (LOG.isDebugEnabled())         LOG.debug("No keystore or trust store configured.  ACCEPTING UNTRUSTED CERTIFICATES!!!!!");
        trust_managers=TRUST_ALL_CERTS;
      }
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      context=_sslProvider == null ? SSLContext.getInstance(_sslProtocol) : SSLContext.getInstance(_sslProtocol,_sslProvider);
      context.init(null,trust_managers,secureRandom);
    }
 else {
      if (keyStore == null)       keyStore=loadKeyStore(_keyStoreResource);
      if (trustStore == null)       trustStore=loadTrustStore(_trustStoreResource == null ? _keyStoreResource : _trustStoreResource);
      Collection<? extends CRL> crls=loadCRL(_crlPath);
      if (_validateCerts && keyStore != null) {
        if (_certAlias == null) {
          List<String> aliases=Collections.list(keyStore.aliases());
          _certAlias=aliases.size() == 1 ? aliases.get(0) : null;
        }
        Certificate cert=_certAlias == null ? null : keyStore.getCertificate(_certAlias);
        if (cert == null) {
          throw new Exception("No certificate found in the keystore" + (_certAlias == null ? "" : " for alias " + _certAlias));
        }
        CertificateValidator validator=new CertificateValidator(trustStore,crls);
        validator.setMaxCertPathLength(_maxCertPathLength);
        validator.setEnableCRLDP(_enableCRLDP);
        validator.setEnableOCSP(_enableOCSP);
        validator.setOcspResponderURL(_ocspResponderURL);
        validator.validate(keyStore,cert);
      }
      KeyManager[] keyManagers=getKeyManagers(keyStore);
      TrustManager[] trustManagers=getTrustManagers(trustStore,crls);
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      context=_sslProvider == null ? SSLContext.getInstance(_sslProtocol) : SSLContext.getInstance(_sslProtocol,_sslProvider);
      context.init(keyManagers,trustManagers,secureRandom);
    }
  }
  _factory=new Factory(keyStore,trustStore,context);
  SSLEngine engine=newSSLEngine();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Enabled Protocols {} of {}",Arrays.asList(engine.getEnabledProtocols()),Arrays.asList(engine.getSupportedProtocols()));
    LOG.debug("Enabled Ciphers   {} of {}",Arrays.asList(engine.getEnabledCipherSuites()),Arrays.asList(engine.getSupportedCipherSuites()));
  }
  _certAliases.clear();
  if (_factory._keyStore != null) {
    loop:     for (    String alias : Collections.list(_factory._keyStore.aliases())) {
      Certificate certificate=_factory._keyStore.getCertificate(alias);
      if ("X.509".equals(certificate.getType())) {
        X509Certificate x509=(X509Certificate)certificate;
        if (x509.getKeyUsage() != null) {
          boolean[] b=x509.getKeyUsage();
          if (b[5])           continue loop;
        }
        boolean named=false;
        Collection<List<?>> altNames=x509.getSubjectAlternativeNames();
        if (altNames != null) {
          for (          List<?> list : altNames) {
            if (((Number)list.get(0)).intValue() == 2) {
              String cn=list.get(1).toString();
              if (LOG.isDebugEnabled())               LOG.debug("Certificate san alias={} cn={} in {}",alias,cn,_factory);
              if (cn != null) {
                named=true;
                _certAliases.put(cn,alias);
              }
            }
          }
        }
        if (!named) {
          LdapName name=new LdapName(x509.getSubjectX500Principal().getName(X500Principal.RFC2253));
          for (          Rdn rdn : name.getRdns()) {
            if (rdn.getType().equalsIgnoreCase("cn")) {
              String cn=rdn.getValue().toString();
              if (LOG.isDebugEnabled())               LOG.debug("Certificate cn alias={} cn={} in {}",alias,cn,_factory);
              if (cn != null && cn.contains(".") && !cn.contains(" "))               _certAliases.put(cn,alias);
            }
          }
        }
      }
    }
  }
  _certWilds.clear();
  for (  String name : _certAliases.keySet())   if (name.startsWith("*."))   _certWilds.put(name.substring(1),_certAliases.get(name));
  LOG.info("x509={} for {}",_certAliases,this);
}

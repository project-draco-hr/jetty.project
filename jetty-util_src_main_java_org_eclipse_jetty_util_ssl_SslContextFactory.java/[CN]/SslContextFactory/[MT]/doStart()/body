{
  SSLContext context=_setContext;
  KeyStore keyStore=_setKeyStore;
  KeyStore trustStore=_setTrustStore;
  if (context == null) {
    if (keyStore == null && _keyStoreResource == null && trustStore == null && _trustStoreResource == null) {
      TrustManager[] trust_managers=null;
      if (_trustAll) {
        if (LOG.isDebugEnabled())         LOG.debug("No keystore or trust store configured.  ACCEPTING UNTRUSTED CERTIFICATES!!!!!");
        trust_managers=TRUST_ALL_CERTS;
      }
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      context=_sslProvider == null ? SSLContext.getInstance(_sslProtocol) : SSLContext.getInstance(_sslProtocol,_sslProvider);
      context.init(null,trust_managers,secureRandom);
    }
 else {
      if (keyStore == null)       keyStore=loadKeyStore(_keyStoreResource);
      if (trustStore == null)       trustStore=loadTrustStore(_trustStoreResource);
      Collection<? extends CRL> crls=loadCRL(_crlPath);
      if (_validateCerts && keyStore != null) {
        if (_certAlias == null) {
          for (Enumeration<String> e=keyStore.aliases(); _certAlias == null && e.hasMoreElements(); ) {
            String alias=e.nextElement();
            Certificate c=keyStore.getCertificate(alias);
            if (c != null && "X.509".equals(c.getType()))             _certAlias=alias;
          }
        }
        Certificate cert=_certAlias == null ? null : keyStore.getCertificate(_certAlias);
        if (cert == null || !"X.509".equals(cert.getType())) {
          throw new Exception("No X.509 certificate in the keystore" + (_certAlias == null ? "" : " for alias " + _certAlias));
        }
        CertificateValidator validator=new CertificateValidator(trustStore,crls);
        validator.setMaxCertPathLength(_maxCertPathLength);
        validator.setEnableCRLDP(_enableCRLDP);
        validator.setEnableOCSP(_enableOCSP);
        validator.setOcspResponderURL(_ocspResponderURL);
        validator.validate(keyStore,cert);
      }
      _certAliases.clear();
      if (keyStore != null) {
        for (        String alias : Collections.list(keyStore.aliases())) {
          Certificate certificate=keyStore.getCertificate(alias);
          if (certificate != null && "X.509".equals(certificate.getType())) {
            X509Certificate x509=(X509Certificate)certificate;
            if (x509.getKeyUsage() != null) {
              boolean[] b=x509.getKeyUsage();
              if (b[KEY_USAGE__KEY_CERT_SIGN])               continue;
            }
            boolean named=false;
            Collection<List<?>> altNames=x509.getSubjectAlternativeNames();
            if (altNames != null) {
              for (              List<?> list : altNames) {
                if (((Number)list.get(0)).intValue() == SUBJECT_ALTERNATIVE_NAMES__DNS_NAME) {
                  String cn=list.get(1).toString();
                  if (LOG.isDebugEnabled())                   LOG.debug("Certificate SAN alias={} cn={} in {}",alias,cn,this);
                  if (cn != null) {
                    named=true;
                    _certAliases.put(cn,alias);
                  }
                }
              }
            }
            if (!named) {
              LdapName name=new LdapName(x509.getSubjectX500Principal().getName(X500Principal.RFC2253));
              for (              Rdn rdn : name.getRdns()) {
                if (rdn.getType().equalsIgnoreCase("cn")) {
                  String cn=rdn.getValue().toString();
                  if (LOG.isDebugEnabled())                   LOG.debug("Certificate cn alias={} cn={} in {}",alias,cn,this);
                  if (cn != null && cn.contains(".") && !cn.contains(" "))                   _certAliases.put(cn,alias);
                }
              }
            }
          }
        }
      }
      _certWilds.clear();
      for (      String name : _certAliases.keySet())       if (name.startsWith("*."))       _certWilds.put(name.substring(2),_certAliases.get(name));
      LOG.info("x509={} wild={} alias={} for {}",_certAliases,_certWilds,_certAlias,this);
      KeyManager[] keyManagers=getKeyManagers(keyStore);
      TrustManager[] trustManagers=getTrustManagers(trustStore,crls);
      SecureRandom secureRandom=(_secureRandomAlgorithm == null) ? null : SecureRandom.getInstance(_secureRandomAlgorithm);
      context=_sslProvider == null ? SSLContext.getInstance(_sslProtocol) : SSLContext.getInstance(_sslProtocol,_sslProvider);
      context.init(keyManagers,trustManagers,secureRandom);
    }
  }
  SSLEngine sslEngine=context.createSSLEngine();
  selectCipherSuites(sslEngine.getEnabledCipherSuites(),sslEngine.getSupportedCipherSuites());
  selectProtocols(sslEngine.getEnabledProtocols(),sslEngine.getSupportedProtocols());
  _factory=new Factory(keyStore,trustStore,context);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Selected Protocols {} of {}",Arrays.asList(_selectedProtocols),Arrays.asList(sslEngine.getSupportedProtocols()));
    LOG.debug("Selected Ciphers   {} of {}",Arrays.asList(_selectedCipherSuites),Arrays.asList(sslEngine.getSupportedCipherSuites()));
  }
}

{
  if ("".equals(pathSpec.trim())) {
    MappedEntry<O> entry=new MappedEntry<>("",object);
    entry.setMapped("");
    _exactMap.put("",entry);
    _prefixDefault=entry;
    return super.put("",object);
  }
  StringTokenizer tok=new StringTokenizer(pathSpec,__pathSpecSeparators);
  O old=null;
  while (tok.hasMoreTokens()) {
    String spec=tok.nextToken();
    if (!spec.startsWith("/") && !spec.startsWith("*."))     throw new IllegalArgumentException("PathSpec " + spec + ". must start with '/' or '*.'");
    old=super.put(spec,object);
    MappedEntry<O> entry=new MappedEntry<>(spec,object);
    if (entry.getKey().equals(spec)) {
      if (spec.equals("/*"))       _prefixDefault=entry;
 else       if (spec.endsWith("/*")) {
        String mapped=spec.substring(0,spec.length() - 2);
        entry.setMapped(mapped);
        while (!_prefixMap.put(mapped,entry))         _prefixMap=new ArrayTernaryTrie<>((ArrayTernaryTrie<MappedEntry<O>>)_prefixMap,1.5);
      }
 else       if (spec.startsWith("*.")) {
        String suffix=spec.substring(2);
        while (!_suffixMap.put(suffix,entry))         _suffixMap=new ArrayTernaryTrie<>((ArrayTernaryTrie<MappedEntry<O>>)_suffixMap,1.5);
      }
 else       if (spec.equals(URIUtil.SLASH)) {
        if (_nodefault)         _exactMap.put(spec,entry);
 else {
          _default=entry;
          _defaultSingletonList=Collections.singletonList(_default);
        }
      }
 else {
        entry.setMapped(spec);
        _exactMap.put(spec,entry);
      }
    }
  }
  return old;
}

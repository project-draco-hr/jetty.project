{
  String contextPath="";
  String servletMapping="/server";
  int maxInactivePeriod=10000;
  int scavengePeriod=20000;
  AbstractTestServer server1=createServer(0,maxInactivePeriod,scavengePeriod);
  server1.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
  server1.start();
  int port1=server1.getPort();
  AbstractTestServer server2=createServer(0,maxInactivePeriod,scavengePeriod);
  server2.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
  server2.start();
  int port2=server2.getPort();
  try {
    HttpClient client=new HttpClient();
    client.start();
    try {
      ContentResponse response=client.GET("http://localhost:" + port1 + contextPath+ servletMapping+ "?action=init");
      assertEquals(HttpServletResponse.SC_OK,response.getStatus());
      String resp=response.getContentAsString();
      String[] sessionTestResponse=resp.split("/");
      assertEquals("a.b.c",sessionTestResponse[0]);
      String sessionCookie=response.getHeaders().get(HttpHeader.SET_COOKIE);
      assertTrue(sessionCookie != null);
      sessionCookie=sessionCookie.replaceFirst("(\\W)(P|p)ath=","$1\\$Path=");
      Request request2=client.newRequest("http://localhost:" + port2 + contextPath+ servletMapping+ "?action=get");
      request2.header("Cookie",sessionCookie);
      ContentResponse response2=request2.send();
      assertEquals(HttpServletResponse.SC_OK,response2.getStatus());
    }
  finally {
      client.stop();
    }
  }
  finally {
    server1.stop();
    server2.stop();
  }
}

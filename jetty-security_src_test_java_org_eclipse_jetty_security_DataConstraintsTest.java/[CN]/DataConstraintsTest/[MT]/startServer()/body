{
  _server=new Server();
  _connector=new LocalConnector(_server);
  _connector.setIdleTimeout(300000);
  HttpConfiguration httpConfiguration=new HttpConfiguration(null,false);
  httpConfiguration.setIntegralPort(9998);
  httpConfiguration.setIntegralScheme("FTP");
  httpConfiguration.setConfidentialPort(9999);
  httpConfiguration.setConfidentialScheme("SPDY");
  _connector.setDefaultConnectionFactory(new HttpServerConnectionFactory(_connector,httpConfiguration));
  _connectorS=new LocalConnector(_server);
  _connectorS.setDefaultConnectionFactory(new HttpServerConnectionFactory(_connectorS,new HttpConfiguration(null,false){
    @Override public void customize(    Request request) throws IOException {
      request.setScheme(HttpScheme.HTTPS.asString());
      super.customize(request);
    }
    @Override public boolean isIntegral(    Request request){
      return true;
    }
    @Override public boolean isConfidential(    Request request){
      return true;
    }
  }
));
  _server.setConnectors(new Connector[]{_connector,_connectorS});
  ContextHandler _context=new ContextHandler();
  _session=new SessionHandler();
  _context.setContextPath("/ctx");
  _server.setHandler(_context);
  _context.setHandler(_session);
  _security=new ConstraintSecurityHandler();
  _session.setHandler(_security);
  _security.setHandler(new AbstractHandler(){
    public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      response.sendError(404);
    }
  }
);
}

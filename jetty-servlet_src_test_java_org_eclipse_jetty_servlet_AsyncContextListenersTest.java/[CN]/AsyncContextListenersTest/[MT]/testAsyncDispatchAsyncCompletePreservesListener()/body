{
  final AtomicReference<CountDownLatch> completes=new AtomicReference<>(new CountDownLatch(1));
  final String path="/path";
  prepare(path + "/*",new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      String requestURI=request.getRequestURI();
      if (requestURI.endsWith("/one")) {
        AsyncContext asyncContext=request.startAsync(request,response);
        asyncContext.addListener(new AsyncListener(){
          @Override public void onStartAsync(          AsyncEvent event) throws IOException {
            event.getAsyncContext().addListener(this);
          }
          @Override public void onComplete(          AsyncEvent event) throws IOException {
            completes.get().countDown();
          }
          @Override public void onTimeout(          AsyncEvent event) throws IOException {
          }
          @Override public void onError(          AsyncEvent event) throws IOException {
          }
        }
);
        asyncContext.dispatch(path + "/two");
      }
 else       if (requestURI.endsWith("/two")) {
        AsyncContext asyncContext=request.startAsync(request,response);
        asyncContext.complete();
      }
    }
  }
);
  try (Socket socket=new Socket("localhost",_connector.getLocalPort())){
    OutputStream output=socket.getOutputStream();
    String request="" + "GET " + path + "/one HTTP/1.1\r\n"+ "Host: localhost\r\n"+ "\r\n";
    output.write(request.getBytes(StandardCharsets.UTF_8));
    output.flush();
    BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),StandardCharsets.UTF_8));
    SimpleHttpParser parser=new SimpleHttpParser();
    SimpleHttpResponse response=parser.readResponse(reader);
    Assert.assertEquals("200",response.getCode());
    completes.get().await(10,TimeUnit.SECONDS);
    completes.set(new CountDownLatch(1));
    output.write(request.getBytes(StandardCharsets.UTF_8));
    output.flush();
    response=parser.readResponse(reader);
    Assert.assertEquals("200",response.getCode());
    completes.get().await(10,TimeUnit.SECONDS);
  }
 }

{
  ClassLoader contextCl=Thread.currentThread().getContextClassLoader();
  String[] oldServerClasses=null;
  try {
    OSGiWebappClassLoader composite=createWebappClassLoader(contributor);
    Thread.currentThread().setContextClassLoader(composite);
    Bundle[] fragments=PackageAdminServiceTracker.INSTANCE.getFragments(contributor);
    if (fragments != null && fragments.length != 0) {
      TreeMap<String,Resource> patchResourcesPath=new TreeMap<String,Resource>();
      TreeMap<String,Resource> appendedResourcesPath=new TreeMap<String,Resource>();
      for (      Bundle frag : fragments) {
        String fragFolder=(String)frag.getHeaders().get(OSGiWebappConstants.JETTY_WAR_FRAGMENT_FOLDER_PATH);
        String patchFragFolder=(String)frag.getHeaders().get(OSGiWebappConstants.JETTY_WAR_PATCH_FRAGMENT_FOLDER_PATH);
        if (fragFolder != null) {
          URL fragUrl=frag.getEntry(fragFolder);
          if (fragUrl == null) {
            throw new IllegalArgumentException("Unable to locate " + fragFolder + " inside "+ " the fragment '"+ frag.getSymbolicName()+ "'");
          }
          fragUrl=DefaultFileLocatorHelper.getLocalURL(fragUrl);
          String key=patchFragFolder.startsWith("/") ? patchFragFolder.substring(1) : patchFragFolder;
          appendedResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(fragUrl));
        }
        if (patchFragFolder != null) {
          URL patchFragUrl=frag.getEntry(patchFragFolder);
          if (patchFragUrl == null) {
            throw new IllegalArgumentException("Unable to locate " + patchFragUrl + " inside "+ " the fragment '"+ frag.getSymbolicName()+ "'");
          }
          patchFragUrl=DefaultFileLocatorHelper.getLocalURL(patchFragUrl);
          String key=patchFragFolder.startsWith("/") ? patchFragFolder.substring(1) : patchFragFolder;
          patchResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(patchFragUrl));
        }
      }
      LinkedList<Resource> resourcesPath=new LinkedList<Resource>();
      resourcesPath.addAll(patchResourcesPath.values());
      resourcesPath.add(Resource.newResource(baseWebappInstallURL));
      resourcesPath.addAll(appendedResourcesPath.values());
      ResourceCollection rc=new ResourceCollection(resourcesPath.toArray(new Resource[resourcesPath.size()]));
      context.setBaseResource(rc);
    }
 else {
      context.setWar(baseWebappInstallURL.toString());
    }
    context.setContextPath(contextPath);
    context.setExtraClasspath(extraClasspath);
    if (webXmlPath != null && webXmlPath.length() != 0) {
      File webXml=null;
      if (webXmlPath.startsWith("/") || webXmlPath.startsWith("file:/")) {
        webXml=new File(webXmlPath);
      }
 else {
        webXml=new File(bundleInstall,webXmlPath);
      }
      if (webXml.exists()) {
        context.setDescriptor(webXml.getAbsolutePath());
      }
    }
    if (defaultWebXmlPath == null || defaultWebXmlPath.length() == 0) {
      defaultWebXmlPath=_wrapper.getOSGiAppProvider().getDefaultsDescriptor();
    }
    if (defaultWebXmlPath != null && defaultWebXmlPath.length() != 0) {
      File defaultWebXml=null;
      if (defaultWebXmlPath.startsWith("/") || defaultWebXmlPath.startsWith("file:/")) {
        defaultWebXml=new File(webXmlPath);
      }
 else {
        defaultWebXml=new File(bundleInstall,defaultWebXmlPath);
      }
      if (defaultWebXml.exists()) {
        context.setDefaultsDescriptor(defaultWebXml.getAbsolutePath());
      }
    }
    context.setParentLoaderPriority(_wrapper.getOSGiAppProvider().isParentLoaderPriority());
    configureWebAppContext(context,contributor,requireTldBundle);
    configureWebappClassLoader(contributor,context,composite);
    oldServerClasses=context.getServerClasses();
    context.setServerClasses(null);
    _wrapper.getOSGiAppProvider().addContext(contributor,pathInBundleToWebApp,context);
    return context;
  }
  finally {
    if (context != null && oldServerClasses != null) {
      context.setServerClasses(oldServerClasses);
    }
    Thread.currentThread().setContextClassLoader(contextCl);
  }
}

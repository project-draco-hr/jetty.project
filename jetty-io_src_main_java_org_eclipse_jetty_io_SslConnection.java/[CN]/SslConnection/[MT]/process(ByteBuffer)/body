{
  boolean some_progress=false;
  if (!_lock.tryLock())   throw new IllegalStateException();
  try {
    allocateBuffers();
    if (appOut == null)     appOut=__ZERO_BUFFER;
    boolean progress=true;
    while (progress) {
      progress=false;
switch (_engine.getHandshakeStatus()) {
case FINISHED:
        throw new IllegalStateException();
case NOT_HANDSHAKING:
{
        if (!BufferUtil.isFull(_inApp) && BufferUtil.hasContent(_inNet))         progress|=unwrap();
        if (BufferUtil.hasContent(appOut) && !BufferUtil.isFull(_outNet))         progress|=wrap(appOut);
      }
    break;
case NEED_TASK:
{
    Runnable task;
    while ((task=_engine.getDelegatedTask()) != null) {
      progress=true;
      task.run();
    }
  }
break;
case NEED_WRAP:
{
if (_handshook && !_allowRenegotiate) _endp.close();
 else progress|=wrap(appOut);
}
break;
case NEED_UNWRAP:
{
if (_handshook && !_allowRenegotiate) _endp.close();
 else if (BufferUtil.isEmpty(_inNet) && _endp.isInputShutdown()) _endp.close();
 else progress|=unwrap();
}
break;
}
if (_endp.isOpen() && _endp.isInputShutdown() && BufferUtil.isEmpty(_inNet)) _engine.closeInbound();
if (_endp.isOpen() && _engine.isOutboundDone() && BufferUtil.isEmpty(_outNet)) _endp.shutdownOutput();
some_progress|=progress;
}
}
 catch (SSLException e) {
LOG.warn(e.toString());
LOG.debug(e);
_endp.close();
}
 finally {
if (BufferUtil.compact(_inNet) && !_appReadFuture.isComplete() && _netReadFuture == null) _netReadFuture=scheduleOnReadable();
releaseBuffers();
_lock.unlock();
}
return some_progress;
}

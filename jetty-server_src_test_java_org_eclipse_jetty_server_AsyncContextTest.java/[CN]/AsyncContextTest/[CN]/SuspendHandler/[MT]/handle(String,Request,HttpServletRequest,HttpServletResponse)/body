{
  if (DispatcherType.REQUEST.equals(baseRequest.getDispatcherType())) {
    if (_read > 0) {
      byte[] buf=new byte[_read];
      request.getInputStream().read(buf);
    }
 else     if (_read < 0) {
      InputStream in=request.getInputStream();
      int b=in.read();
      while (b != -1)       b=in.read();
    }
    if (_suspendFor > 0)     baseRequest.setAsyncTimeout(_suspendFor);
    baseRequest.addEventListener(__asyncListener);
    final AsyncContext asyncContext=baseRequest.startAsync();
    if (_completeAfter > 0) {
      new Thread(){
        public void run(){
          try {
            Thread.sleep(_completeAfter);
            response.getOutputStream().print("COMPLETED");
            response.setStatus(200);
            baseRequest.setHandled(true);
            asyncContext.complete();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
.start();
    }
 else     if (_completeAfter == 0) {
      response.getOutputStream().print("COMPLETED");
      response.setStatus(200);
      baseRequest.setHandled(true);
      asyncContext.complete();
    }
    if (_resumeAfter > 0) {
      new Thread(){
        public void run(){
          try {
            Thread.sleep(_resumeAfter);
            asyncContext.dispatch();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
.start();
    }
 else     if (_resumeAfter == 0) {
      asyncContext.dispatch();
    }
  }
 else   if (request.getAttribute("TIMEOUT") != null) {
    response.setStatus(200);
    response.getOutputStream().print("TIMEOUT");
    baseRequest.setHandled(true);
  }
 else {
    response.setStatus(200);
    response.getOutputStream().print("RESUMED");
    baseRequest.setHandled(true);
  }
}

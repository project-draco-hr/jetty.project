{
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  String uri=request.getRequestURI();
  if (uri == null)   uri=URIUtil.SLASH;
  mandatory|=isJSecurityCheck(uri);
  if (!mandatory)   return new DeferredAuthentication(this);
  if (isLoginOrErrorPage(URIUtil.addPaths(request.getServletPath(),request.getPathInfo())) && !DeferredAuthentication.isDeferred(response))   return new DeferredAuthentication(this);
  HttpSession session=request.getSession(true);
  try {
    if (isJSecurityCheck(uri)) {
      final String username=request.getParameter(__J_USERNAME);
      final String password=request.getParameter(__J_PASSWORD);
      UserIdentity user=login(username,password,request);
      session=request.getSession(true);
      if (user != null) {
        String nuri;
synchronized (session) {
          nuri=(String)session.getAttribute(__J_URI);
          if (nuri == null || nuri.length() == 0) {
            nuri=request.getContextPath();
            if (nuri.length() == 0)             nuri=URIUtil.SLASH;
          }
        }
        response.setContentLength(0);
        response.sendRedirect(response.encodeRedirectURL(nuri));
        return new FormAuthentication(getAuthMethod(),user);
      }
      if (LOG.isDebugEnabled())       LOG.debug("Form authentication FAILED for " + StringUtil.printable(username));
      if (_formErrorPage == null) {
        if (response != null)         response.sendError(HttpServletResponse.SC_FORBIDDEN);
      }
 else       if (_dispatch) {
        RequestDispatcher dispatcher=request.getRequestDispatcher(_formErrorPage);
        response.setHeader(HttpHeaders.CACHE_CONTROL,"No-cache");
        response.setDateHeader(HttpHeaders.EXPIRES,1);
        dispatcher.forward(new FormRequest(request),new FormResponse(response));
      }
 else {
        response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getContextPath(),_formErrorPage)));
      }
      return Authentication.SEND_FAILURE;
    }
    Authentication authentication=(Authentication)session.getAttribute(SessionAuthentication.__J_AUTHENTICATED);
    if (authentication != null) {
      if (authentication instanceof Authentication.User && _loginService != null && !_loginService.validate(((Authentication.User)authentication).getUserIdentity())) {
        session.removeAttribute(SessionAuthentication.__J_AUTHENTICATED);
      }
 else {
        String j_uri=(String)session.getAttribute(__J_URI);
        if (j_uri != null) {
          MultiMap<String> j_post=(MultiMap<String>)session.getAttribute(__J_POST);
          if (j_post != null) {
            StringBuffer buf=request.getRequestURL();
            if (request.getQueryString() != null)             buf.append("?").append(request.getQueryString());
            if (j_uri.equals(buf.toString())) {
              session.removeAttribute(__J_POST);
              Request base_request=(req instanceof Request) ? (Request)req : AbstractHttpConnection.getCurrentConnection().getRequest();
              base_request.setMethod(HttpMethods.POST);
              base_request.setParameters(j_post);
            }
          }
 else           session.removeAttribute(__J_URI);
        }
        return authentication;
      }
    }
    if (DeferredAuthentication.isDeferred(response)) {
      LOG.debug("auth deferred {}",session.getId());
      return Authentication.UNAUTHENTICATED;
    }
synchronized (session) {
      if (session.getAttribute(__J_URI) == null || _alwaysSaveUri) {
        StringBuffer buf=request.getRequestURL();
        if (request.getQueryString() != null)         buf.append("?").append(request.getQueryString());
        session.setAttribute(__J_URI,buf.toString());
        if (MimeTypes.FORM_ENCODED.equalsIgnoreCase(req.getContentType()) && HttpMethods.POST.equals(request.getMethod())) {
          Request base_request=(req instanceof Request) ? (Request)req : AbstractHttpConnection.getCurrentConnection().getRequest();
          base_request.extractParameters();
          session.setAttribute(__J_POST,new MultiMap<String>(base_request.getParameters()));
        }
      }
    }
    if (_dispatch) {
      RequestDispatcher dispatcher=request.getRequestDispatcher(_formLoginPage);
      response.setHeader(HttpHeaders.CACHE_CONTROL,"No-cache");
      response.setDateHeader(HttpHeaders.EXPIRES,1);
      dispatcher.forward(new FormRequest(request),new FormResponse(response));
    }
 else {
      response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getContextPath(),_formLoginPage)));
    }
    return Authentication.SEND_CONTINUE;
  }
 catch (  IOException e) {
    throw new ServerAuthException(e);
  }
catch (  ServletException e) {
    throw new ServerAuthException(e);
  }
}

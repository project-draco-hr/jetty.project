{
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  HttpSession session=request.getSession(mandatory);
  String uri=request.getPathInfo();
  if (session == null || isLoginOrErrorPage(uri)) {
    return Authentication.NOT_CHECKED;
  }
  try {
    if (uri == null)     uri=URIUtil.SLASH;
 else     if (uri.endsWith(__J_SECURITY_CHECK)) {
      final String username=request.getParameter(__J_USERNAME);
      final String password=request.getParameter(__J_PASSWORD);
      UserIdentity user=_loginService.login(username,password);
      if (user != null) {
        String nuri;
synchronized (session) {
          nuri=(String)session.getAttribute(__J_URI);
          session.removeAttribute(__J_URI);
        }
        if (nuri == null || nuri.length() == 0) {
          nuri=request.getContextPath();
          if (nuri.length() == 0)           nuri=URIUtil.SLASH;
        }
        response.setContentLength(0);
        response.sendRedirect(response.encodeRedirectURL(nuri));
        return new FormAuthentication(this,user);
      }
      if (Log.isDebugEnabled())       Log.debug("Form authentication FAILED for " + StringUtil.printable(username));
      if (_formErrorPage == null) {
        if (response != null)         response.sendError(HttpServletResponse.SC_FORBIDDEN);
      }
 else       if (_dispatch) {
        RequestDispatcher dispatcher=request.getRequestDispatcher(_formErrorPage);
        response.setHeader(HttpHeaders.CACHE_CONTROL,"No-cache");
        response.setDateHeader(HttpHeaders.EXPIRES,1);
        dispatcher.forward(new FormRequest(request),new FormResponse(response));
      }
 else {
        response.sendRedirect(URIUtil.addPaths(request.getContextPath(),_formErrorPage));
      }
      return Authentication.SEND_FAILURE;
    }
    if (mandatory) {
      if (request.getQueryString() != null)       uri+="?" + request.getQueryString();
synchronized (session) {
        if (session.getAttribute(__J_URI) == null)         session.setAttribute(__J_URI,request.getScheme() + "://" + request.getServerName()+ ":"+ request.getServerPort()+ URIUtil.addPaths(request.getContextPath(),uri));
      }
      if (_dispatch) {
        RequestDispatcher dispatcher=request.getRequestDispatcher(_formLoginPage);
        response.setHeader(HttpHeaders.CACHE_CONTROL,"No-cache");
        response.setDateHeader(HttpHeaders.EXPIRES,1);
        dispatcher.forward(new FormRequest(request),new FormResponse(response));
      }
 else {
        response.sendRedirect(URIUtil.addPaths(request.getContextPath(),_formLoginPage));
      }
      return Authentication.SEND_CONTINUE;
    }
    return Authentication.UNAUTHENTICATED;
  }
 catch (  IOException e) {
    throw new ServerAuthException(e);
  }
catch (  ServletException e) {
    throw new ServerAuthException(e);
  }
}

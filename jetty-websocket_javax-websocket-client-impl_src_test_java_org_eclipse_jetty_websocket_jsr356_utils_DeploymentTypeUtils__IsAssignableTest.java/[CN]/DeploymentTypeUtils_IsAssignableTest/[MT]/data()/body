{
  List<Case[]> data=new ArrayList<>();
  data.add(new Case(null,Object.class).expecting(false));
  data.add(new Case(null,Integer.class).expecting(false));
  data.add(new Case(null,String.class).expecting(false));
  data.add(new Case(null,Integer.TYPE).expecting(false));
  data.add(new Case(null,Character.TYPE).expecting(false));
  data.add(new Case(Object.class,null).expecting(false));
  data.add(new Case(Integer.class,null).expecting(false));
  data.add(new Case(String.class,null).expecting(false));
  data.add(new Case(Integer.TYPE,null).expecting(false));
  data.add(new Case(Character.TYPE,null).expecting(false));
  data.add(new Case(String.class,Object.class).expecting(true));
  data.add(new Case(String.class,String.class).expecting(true));
  data.add(new Case(Object.class,String.class).expecting(false));
  data.add(new Case(Integer.TYPE,Integer.TYPE).expecting(true));
  data.add(new Case(Float.TYPE,Float.TYPE).expecting(true));
  data.add(new Case(Byte.TYPE,Byte.TYPE).expecting(true));
  data.add(new Case(Integer.TYPE,Integer.class).expecting(true));
  data.add(new Case(Float.TYPE,Float.class).expecting(true));
  data.add(new Case(Byte.TYPE,Byte.class).expecting(true));
  data.add(new Case(Integer.class,Integer.TYPE).expecting(true));
  data.add(new Case(Float.class,Float.TYPE).expecting(true));
  data.add(new Case(Byte.class,Byte.TYPE).expecting(true));
  data.add(new Case(byte[].class,Object.class).expecting(true));
  data.add(new Case(byte[].class,byte[].class).expecting(true));
  data.add(new Case(ByteBuffer.class,ByteBuffer.class).expecting(true));
  data.add(new Case(MappedByteBuffer.class,ByteBuffer.class).expecting(true));
  data.add(new Case(Reader.class,Reader.class).expecting(true));
  data.add(new Case(BufferedReader.class,Reader.class).expecting(true));
  data.add(new Case(FilterReader.class,Reader.class).expecting(true));
  return data;
}

{
  byte payload[]=new byte[10240];
  Arrays.fill(payload,(byte)0x55);
  byte mask[]=new byte[]{0x2A,(byte)0xF0,0x0F,0x00};
  WebSocketFrame frame=WebSocketFrame.binary(payload);
  frame.setMask(mask);
  int totalParts=0;
  int totalBytes=0;
  int windowSize=2929;
  int expectedHeaderSize=8;
  int expectedParts=(int)Math.ceil((double)(payload.length + expectedHeaderSize) / windowSize);
  ByteBuffer completeBuf=ByteBuffer.allocate(payload.length + expectedHeaderSize);
  BufferUtil.clearToFill(completeBuf);
  Generator generator=new UnitGenerator();
  boolean done=false;
  while (!done) {
    Assert.assertThat("Too many parts",totalParts,lessThan(20));
    ByteBuffer buf=generator.generate(windowSize,frame);
    totalBytes+=buf.remaining();
    totalParts++;
    BufferUtil.put(buf,completeBuf);
    done=(frame.remaining() <= 0);
  }
  Assert.assertThat("Created Parts",totalParts,is(expectedParts));
  Assert.assertThat("Created Bytes",totalBytes,is(payload.length + expectedHeaderSize));
  WebSocketPolicy policy=WebSocketPolicy.newServerPolicy();
  Parser parser=new Parser(policy);
  IncomingFramesCapture capture=new IncomingFramesCapture();
  parser.setIncomingFramesHandler(capture);
  BufferUtil.flipToFlush(completeBuf,0);
  parser.parse(completeBuf);
  WebSocketFrame actual=capture.getFrames().get(0);
  Assert.assertThat("Frame.opcode",actual.getOpCode(),is(OpCode.BINARY));
  Assert.assertThat("Frame.payloadLength",actual.getPayloadLength(),is(payload.length));
  ByteBuffer actualData=actual.getPayload().slice();
  Assert.assertThat("Frame.payload.remaining",actualData.remaining(),is(payload.length));
  while (actualData.remaining() > 0) {
    Assert.assertThat("Actual.payload[" + actualData.position() + "]",actualData.get(),is((byte)0x55));
  }
}

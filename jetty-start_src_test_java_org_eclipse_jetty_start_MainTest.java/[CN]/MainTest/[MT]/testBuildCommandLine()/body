{
  List<String> jvmArgs=new ArrayList<String>();
  jvmArgs.add("--exec");
  jvmArgs.add("-Xms1024m");
  jvmArgs.add("-Xmx1024m");
  List<String> xmls=new ArrayList<String>();
  xmls.add("jetty.xml");
  xmls.add("jetty-jmx.xml");
  xmls.add("jetty-logging.xml");
  Main main=new Main();
  main.addJvmArgs(jvmArgs);
  Classpath classpath=nastyWayToCreateAClasspathObject("/jetty/home with spaces/");
  CommandLineBuilder cmd=main.buildCommandLine(classpath,xmls);
  assertThat("CommandLineBuilder shouldn't be null",cmd,notNullValue());
  List<String> commandArgs=cmd.getArgs();
  assertThat("commandArgs should contain 11 elements",commandArgs.size(),equalTo(11));
  assertThat("args does not contain -cp",commandArgs,hasItems("-cp"));
  assertThat("Classpath should be correctly quoted and match expected value",commandArgs,hasItems("/jetty/home with spaces/somejar.jar:/jetty/home with spaces/someotherjar.jar"));
  assertThat("args does not contain --exec",commandArgs,hasItems("--exec"));
  assertThat("CommandLine should contain jvmArgs",commandArgs,hasItems("-Xms1024m"));
  assertThat("CommandLine should contain jvmArgs",commandArgs,hasItems("-Xmx1024m"));
  assertThat("CommandLine should contain xmls",commandArgs,hasItems("jetty.xml"));
  assertThat("CommandLine should contain xmls",commandArgs,hasItems("jetty-jmx.xml"));
  assertThat("CommandLine should contain xmls",commandArgs,hasItems("jetty-logging.xml"));
  String commandLine=cmd.toString();
  assertThat("cmd.toString() should be properly escaped",commandLine,containsString("-cp /jetty/home\\ with\\ " + "spaces/somejar.jar:/jetty/home\\ with\\ spaces/someotherjar.jar"));
  assertThat("cmd.toString() doesn't contain xml config files",commandLine,containsString(" jetty.xml jetty-jmx.xml jetty-logging.xml"));
}

{
  File start_d=baseHome.getFile("start.d");
  File ini=new File(start_d,name + ".ini");
  if (ini.exists()) {
    if (verbose)     StartLog.warn("Module %s already enabled by: %s",name,baseHome.toShortForm(ini));
    return;
  }
  File disabled=new File(start_d,name + ".ini.disabled");
  if (!disabled.exists() && baseHome.isBaseDifferent())   disabled=new File(new File(baseHome.getHomeDir(),"start.d"),name + ".ini.disabled");
  if (disabled.exists()) {
    System.err.printf("Enabling %s in %s from %s%n",name,baseHome.toShortForm(ini),baseHome.toShortForm(disabled));
    Files.copy(disabled.toPath(),ini.toPath());
    args.parse(baseHome,new StartIni(ini));
  }
 else   if (args.getAllModules().resolveEnabled().contains(args.getAllModules().get(name))) {
    List<String> sources=args.getSources(name);
    if (sources != null && sources.size() > 0)     for (    String s : args.getSources(name))     StartLog.warn("Module %s is enabled in %s",name,s);
 else     StartLog.warn("Module %s is already enabled (see --list-modules)",name);
  }
 else   if (ini.createNewFile()) {
    System.err.printf("Enabling %s in %s%n",name,baseHome.toShortForm(ini));
    try (FileOutputStream out=new FileOutputStream(ini)){
      out.write(("--module=" + name + "\n").getBytes("ISO-8859-1"));
    }
     args.parse(baseHome,new StartIni(ini));
  }
 else {
    StartLog.warn("ERROR: Module %s cannot be enabled! ",name);
    return;
  }
  Modules modules=args.getAllModules();
  Module module=modules.get(name);
  for (  String parent : module.getParentNames())   enable(args,parent,false);
}

{
  List<String> configuredXmls=loadConfig(xmls);
  if (configuredXmls.isEmpty()) {
    throw new FileNotFoundException("No XML configuration files specified in start.config or command line.");
  }
  configuredXmls=resolveXmlConfigs(configuredXmls);
  Classpath classpath=_config.getActiveClasspath();
  System.setProperty("java.class.path",classpath.toString());
  ClassLoader cl=classpath.getClassLoader();
  if (Config.isDebug()) {
    System.err.println("java.class.path=" + System.getProperty("java.class.path"));
    System.err.println("jetty.home=" + System.getProperty("jetty.home"));
    System.err.println("java.home=" + System.getProperty("java.home"));
    System.err.println("java.io.tmpdir=" + System.getProperty("java.io.tmpdir"));
    System.err.println("java.class.path=" + classpath);
    System.err.println("classloader=" + cl);
    System.err.println("classloader.parent=" + cl.getParent());
    System.err.println("properties=" + Config.getProperties());
  }
  if (_showUsage) {
    usage();
    return;
  }
  if (_dumpVersions) {
    showClasspathWithVersions(classpath);
    return;
  }
  if (_listOptions) {
    showAllOptionsWithVersions();
    return;
  }
  if (_listConfig) {
    listConfig();
    return;
  }
  if (_dryRun) {
    CommandLineBuilder cmd=buildCommandLine(classpath,configuredXmls);
    System.out.println(cmd.toString());
    return;
  }
  if (_exec) {
    CommandLineBuilder cmd=buildCommandLine(classpath,configuredXmls);
    ProcessBuilder pbuilder=new ProcessBuilder(cmd.getArgs());
    final Process process=pbuilder.start();
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        Config.debug("Destroying " + process);
        process.destroy();
      }
    }
);
    copyInThread(process.getErrorStream(),System.err);
    copyInThread(process.getInputStream(),System.out);
    copyInThread(System.in,process.getOutputStream());
    process.waitFor();
    System.exit(0);
    return;
  }
  if (_jvmArgs.size() > 0 || _sysProps.size() > 0) {
    System.err.println("WARNING: System properties and/or JVM args set.  Consider using --dry-run or --exec");
  }
  Thread.currentThread().setContextClassLoader(cl);
  try {
    String classname=_config.getMainClassname();
    String mainClass=System.getProperty("jetty.server");
    if (mainClass != null) {
      classname=mainClass;
    }
    mainClass=System.getProperty("main.class");
    if (mainClass != null) {
      classname=mainClass;
    }
    Config.debug("main.class=" + classname);
    invokeMain(cl,classname,configuredXmls);
  }
 catch (  Exception e) {
    usageExit(e,ERR_INVOKE_MAIN);
  }
}

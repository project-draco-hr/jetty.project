{
  StartLog.debug("StartArgs: %s",args);
  Classpath classpath=args.getClasspath();
  System.setProperty("java.class.path",classpath.toString());
  if (args.isHelp()) {
    usage(true);
  }
  if (args.isListClasspath()) {
    dumpClasspathWithVersions(classpath);
  }
  if (args.isListConfig()) {
    listConfig(args);
  }
  if (args.isListModules()) {
    listModules(args);
  }
  if (args.getModuleGraphFilename() != null) {
    Path outputFile=baseHome.getBasePath(args.getModuleGraphFilename());
    System.out.printf("Generating GraphViz Graph of Jetty Modules at %s%n",baseHome.toShortForm(outputFile));
    ModuleGraphWriter writer=new ModuleGraphWriter();
    writer.config(args.getProperties());
    writer.write(args.getAllModules(),outputFile);
  }
  if (args.isDryRun()) {
    CommandLineBuilder cmd=args.getMainArgs(baseHome,true);
    System.out.println(cmd.toString());
  }
  if (args.isStopCommand()) {
    int stopPort=Integer.parseInt(args.getProperties().getString("STOP.PORT"));
    String stopKey=args.getProperties().getString("STOP.KEY");
    if (args.getProperties().getString("STOP.WAIT") != null) {
      int stopWait=Integer.parseInt(args.getProperties().getString("STOP.PORT"));
      stop(stopPort,stopKey,stopWait);
    }
 else {
      stop(stopPort,stopKey);
    }
  }
  for (  String module : args.getAddToStartIni()) {
    buildIni(args,module,true,true);
  }
  for (  String module : args.getAddToStartdIni()) {
    buildIni(args,module,true,false);
  }
  for (  FileArg arg : args.getFiles()) {
    Path file=baseHome.getBasePath(arg.location);
    if (!FS.exists(file) && args.isDownload()) {
      initFile(arg);
    }
    if (!FS.exists(file)) {
      String type=arg.location.endsWith("/") ? "directory" : "file";
      if (arg.uri != null) {
        StartLog.warn("Required %s '%s' not downloaded from %s.  Run with --create-files to download",type,baseHome.toShortForm(file),arg.uri);
      }
    }
  }
  if (!args.isRun()) {
    return;
  }
  if (args.isExec()) {
    CommandLineBuilder cmd=args.getMainArgs(baseHome,true);
    cmd.debug();
    ProcessBuilder pbuilder=new ProcessBuilder(cmd.getArgs());
    final Process process=pbuilder.start();
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        StartLog.debug("Destroying " + process);
        process.destroy();
      }
    }
);
    copyInThread(process.getErrorStream(),System.err);
    copyInThread(process.getInputStream(),System.out);
    copyInThread(System.in,process.getOutputStream());
    process.waitFor();
    System.exit(0);
    return;
  }
  if (args.hasJvmArgs() || args.hasSystemProperties()) {
    System.err.println("WARNING: System properties and/or JVM args set.  Consider using --dry-run or --exec");
  }
  ClassLoader cl=classpath.getClassLoader();
  Thread.currentThread().setContextClassLoader(cl);
  try {
    invokeMain(args);
  }
 catch (  Exception e) {
    usageExit(e,ERR_INVOKE_MAIN);
  }
}

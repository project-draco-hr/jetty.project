{
  StartLog.debug("StartArgs: %s",args);
  Classpath classpath=args.getClasspath();
  System.setProperty("java.class.path",classpath.toString());
  if (args.isHelp()) {
    usage(true);
  }
  if (args.isListClasspath()) {
    dumpClasspathWithVersions(classpath);
  }
  if (args.isListConfig()) {
    listConfig(args);
  }
  if (args.isListModules()) {
    listModules(args);
  }
  if (args.getModuleGraphFilename() != null) {
    Path outputFile=baseHome.getBasePath(args.getModuleGraphFilename());
    System.out.printf("Generating GraphViz Graph of Jetty Modules at %s%n",baseHome.toShortForm(outputFile));
    ModuleGraphWriter writer=new ModuleGraphWriter();
    writer.config(args.getProperties());
    writer.write(args.getAllModules(),outputFile);
  }
  if (args.isDryRun()) {
    CommandLineBuilder cmd=args.getMainArgs(baseHome,true);
    System.out.println(cmd.toString(File.separatorChar == '/' ? " \\\n" : " "));
  }
  if (args.isStopCommand()) {
    doStop(args);
  }
  boolean rebuildGraph=false;
  for (  String module : args.getAddToStartIni()) {
    buildIni(args,module,true,true);
    rebuildGraph=true;
  }
  for (  String module : args.getAddToStartdIni()) {
    buildIni(args,module,true,false);
    rebuildGraph=true;
  }
  if (rebuildGraph) {
    args.getAllModules().clearMissing();
    args.getAllModules().buildGraph();
  }
  if (args.isDownload()) {
    if (!args.isApproveAllLicenses()) {
      for (      Module module : args.getAllModules().resolveEnabled()) {
        if (!module.hasFiles(baseHome) && !module.acknowledgeLicense()) {
          StartLog.warn(EXITING_LICENSE_NOT_ACKNOWLEDGED);
          System.exit(1);
        }
      }
    }
  }
  for (  FileArg arg : args.getFiles()) {
    Path file=baseHome.getBasePath(arg.location);
    if (!FS.exists(file) && args.isDownload()) {
      initFile(args,arg);
    }
    if (!FS.exists(file)) {
      boolean isDir=arg.location.endsWith("/");
      if (isDir) {
        StartLog.log("MKDIR",baseHome.toShortForm(file));
        FS.ensureDirectoryExists(file);
      }
 else {
        String shortRef=baseHome.toShortForm(file);
        if (args.isTestingModeEnabled()) {
          StartLog.log("TESTING MODE","Skipping required file check on: %s",shortRef);
          return;
        }
        StartLog.warn("Missing Required File: %s",baseHome.toShortForm(file));
        args.setRun(false);
        if (arg.uri != null) {
          StartLog.warn("  Can be downloaded From: %s",arg.uri);
          StartLog.warn("  Run start.jar --create-files to download");
        }
      }
    }
  }
  if (!args.isRun()) {
    return;
  }
  if (args.isExec()) {
    CommandLineBuilder cmd=args.getMainArgs(baseHome,true);
    cmd.debug();
    ProcessBuilder pbuilder=new ProcessBuilder(cmd.getArgs());
    StartLog.endStartLog();
    final Process process=pbuilder.start();
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        StartLog.debug("Destroying " + process);
        process.destroy();
      }
    }
);
    copyInThread(process.getErrorStream(),System.err);
    copyInThread(process.getInputStream(),System.out);
    copyInThread(System.in,process.getOutputStream());
    process.waitFor();
    System.exit(0);
    return;
  }
  if (args.hasJvmArgs() || args.hasSystemProperties()) {
    System.err.println("WARNING: System properties and/or JVM args set.  Consider using --dry-run or --exec");
  }
  ClassLoader cl=classpath.getClassLoader();
  Thread.currentThread().setContextClassLoader(cl);
  try {
    invokeMain(cl,args);
  }
 catch (  Exception e) {
    usageExit(e,ERR_INVOKE_MAIN);
  }
}

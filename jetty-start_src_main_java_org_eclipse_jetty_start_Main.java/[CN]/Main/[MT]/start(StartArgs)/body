{
  StartLog.debug("StartArgs: %s",args);
  Classpath classpath=args.getClasspath();
  System.setProperty("java.class.path",classpath.toString());
  if (args.isHelp()) {
    usage(true);
  }
  if (args.isListClasspath()) {
    dumpClasspathWithVersions(classpath);
  }
  if (args.isListConfig()) {
    listConfig(args);
  }
  if (args.isListModules()) {
    listModules(args);
  }
  if (args.isDryRun()) {
    CommandLineBuilder cmd=args.getMainArgs(baseHome,true);
    System.out.println(cmd.toString());
  }
  for (  String url : args.getDownloads()) {
    download(url);
  }
  ModulePersistence persistence=loadModulePersistence();
  if (args.isModulePersistenceChanging()) {
    System.out.println("Persistent Module Management:");
    System.out.println("-----------------------------");
    System.out.printf("Persistence file: %s%n",baseHome.toShortForm(persistence.getFile()));
    for (    String module : args.getModulePersistDisable()) {
      persistence.disableModule(args,module);
    }
    for (    String module : args.getModulePersistEnable()) {
      persistence.enableModule(args,module);
    }
  }
  if (args.isStopCommand()) {
    int stopPort=Integer.parseInt(args.getProperties().getProperty("STOP.PORT"));
    String stopKey=args.getProperties().getProperty("STOP.KEY");
    if (args.getProperties().getProperty("STOP.WAIT") != null) {
      int stopWait=Integer.parseInt(args.getProperties().getProperty("STOP.PORT"));
      stop(stopPort,stopKey,stopWait);
    }
 else {
      stop(stopPort,stopKey);
    }
  }
  if (!args.isRun()) {
    return;
  }
  if (args.isExec()) {
    CommandLineBuilder cmd=args.getMainArgs(baseHome,true);
    ProcessBuilder pbuilder=new ProcessBuilder(cmd.getArgs());
    final Process process=pbuilder.start();
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        StartLog.debug("Destroying " + process);
        process.destroy();
      }
    }
);
    copyInThread(process.getErrorStream(),System.err);
    copyInThread(process.getInputStream(),System.out);
    copyInThread(System.in,process.getOutputStream());
    process.waitFor();
    System.exit(0);
    return;
  }
  if (args.hasJvmArgs() || args.hasSystemProperties()) {
    System.err.println("WARNING: System properties and/or JVM args set.  Consider using --dry-run or --exec");
  }
  ClassLoader cl=classpath.getClassLoader();
  Thread.currentThread().setContextClassLoader(cl);
  try {
    invokeMain(args);
  }
 catch (  Exception e) {
    usageExit(e,ERR_INVOKE_MAIN);
  }
}

{
  Path start_d=baseHome.getBasePath("start.d");
  Modules modules=args.getAllModules();
  Module module=modules.get(name);
  if (module == null) {
    StartLog.warn("ERROR: No known module for %s",name);
    return;
  }
  Path start_ini=baseHome.getBasePath("start.ini");
  String short_start_ini=baseHome.toShortForm(start_ini);
  Path startd_ini=start_d.resolve(name + ".ini");
  String short_startd_ini=baseHome.toShortForm(startd_ini);
  StartIni module_ini=null;
  if (FS.exists(startd_ini)) {
    module_ini=new StartIni(startd_ini);
    if (module_ini.getLineMatches(Pattern.compile("--module=(.*, *)*" + name)).size() == 0) {
      StartLog.warn("ERROR: %s is not enabled in %s!",name,short_startd_ini);
      return;
    }
  }
  boolean transitive=module.isEnabled() && (module.getSources().size() == 0);
  boolean hasDefinedDefaults=module.getDefaultConfig().size() > 0;
  if (!module.isEnabled() || (transitive && hasDefinedDefaults) || (topLevel && !FS.exists(startd_ini) && !appendStartIni)) {
    BufferedWriter writer=null;
    String source=null;
    PrintWriter out=null;
    try {
      if (appendStartIni) {
        source=short_start_ini;
        StartLog.info("%-15s initialised in %s (appended)",name,source);
        writer=Files.newBufferedWriter(start_ini,StandardCharsets.UTF_8,StandardOpenOption.CREATE,StandardOpenOption.APPEND);
        out=new PrintWriter(writer);
      }
 else {
        FS.ensureDirectoryExists(start_d);
        FS.ensureDirectoryWritable(start_d);
        source=short_startd_ini;
        StartLog.info("%-15s initialised in %s (created)",name,source);
        writer=Files.newBufferedWriter(startd_ini,StandardCharsets.UTF_8,StandardOpenOption.CREATE_NEW,StandardOpenOption.WRITE);
        out=new PrintWriter(writer);
      }
      if (appendStartIni) {
        out.println();
      }
      out.println("#");
      out.println("# Initialize module " + name);
      out.println("#");
      Pattern p=Pattern.compile("--module=([^,]+)(,([^,]+))*");
      out.println("--module=" + name);
      args.parse("--module=" + name,source);
      modules.enable(name,Collections.singletonList(source));
      for (      String line : module.getDefaultConfig()) {
        out.println(line);
        args.parse(line,source);
        Matcher m=p.matcher(line);
        if (m.matches()) {
          for (int i=1; i <= m.groupCount(); i++) {
            String n=m.group(i);
            if (n == null) {
              continue;
            }
            n=n.trim();
            if ((n.length() == 0) || n.startsWith(",")) {
              continue;
            }
            modules.enable(n,Collections.singletonList(source));
          }
        }
      }
    }
  finally {
      if (out != null) {
        out.close();
      }
    }
  }
 else   if (FS.exists(startd_ini)) {
    StartLog.info("%-15s initialised in %s",name,short_startd_ini);
  }
 else {
    StartLog.info("%-15s initialised transitively",name);
  }
  for (  String source : module.getSources()) {
    StartLog.debug("also enabled in: %s",source);
    if (!short_start_ini.equals(source)) {
      StartLog.info("%-15s enabled in     %s",name,baseHome.toShortForm(source));
    }
  }
  for (  String file : module.getFiles()) {
    initFile(new FileArg(file));
  }
  module.expandProperties(args.getProperties());
  modules.registerParentsIfMissing(module);
  modules.buildGraph();
  if (topLevel) {
    List<Module> depends=new ArrayList<>();
    for (    String depend : modules.resolveParentModulesOf(name)) {
      if (!name.equals(depend)) {
        Module m=modules.get(depend);
        m.setEnabled(true);
        depends.add(m);
      }
    }
    Collections.sort(depends,Collections.reverseOrder(new Module.DepthComparator()));
    Set<String> done=new HashSet<>(0);
    while (true) {
      boolean complete=true;
      for (      Module m : depends) {
        if (!done.contains(m.getName())) {
          complete=false;
          buildIni(args,m.getName(),false,appendStartIni);
          done.add(m.getName());
        }
      }
      if (complete)       break;
      depends.clear();
      for (      String depend : modules.resolveParentModulesOf(name)) {
        if (!name.equals(depend)) {
          Module m=modules.get(depend);
          m.setEnabled(true);
          depends.add(m);
        }
      }
      Collections.sort(depends,Collections.reverseOrder(new Module.DepthComparator()));
    }
  }
}

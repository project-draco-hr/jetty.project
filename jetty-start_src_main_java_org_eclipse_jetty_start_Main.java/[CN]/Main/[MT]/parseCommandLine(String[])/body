{
  try {
    List<String> arguments=new ArrayList<String>();
    boolean ini=false;
    for (    String arg : args) {
      if (arg.startsWith("--ini=") || arg.equals("--ini")) {
        ini=true;
        if (arg.length() > 6) {
          arguments.addAll(loadStartIni(arg.substring(6)));
          continue;
        }
      }
 else       if (arg.startsWith("--config=")) {
        _startConfig=arg.substring(9);
      }
 else {
        arguments.add(arg);
      }
    }
    if (!ini) {
      arguments.addAll(0,loadStartIni(null));
    }
    List<String> xmls=new ArrayList<String>();
    int startup=0;
    for (    String arg : arguments) {
      if ("--help".equals(arg) || "-?".equals(arg)) {
        _showUsage=true;
        continue;
      }
      if ("--stop".equals(arg)) {
        int port=Integer.parseInt(Config.getProperty("STOP.PORT","-1"));
        String key=Config.getProperty("STOP.KEY",null);
        stop(port,key);
        return;
      }
      if ("--version".equals(arg) || "-v".equals(arg) || "--info".equals(arg)) {
        _dumpVersions=true;
        continue;
      }
      if ("--list-modes".equals(arg) || "--list-options".equals(arg)) {
        _listOptions=true;
        continue;
      }
      if ("--list-config".equals(arg)) {
        _listConfig=true;
        continue;
      }
      if ("--exec-print".equals(arg) || "--dry-run".equals(arg)) {
        _dryRun=true;
        continue;
      }
      if ("--exec".equals(arg)) {
        _exec=true;
        continue;
      }
      if ("--daemon".equals(arg)) {
        File startDir=new File(System.getProperty("jetty.logs","logs"));
        if (!startDir.exists() || !startDir.canWrite())         startDir=new File(".");
        File startLog=new File(startDir,"start.log");
        if (!startLog.exists() && !startLog.createNewFile()) {
          System.err.println("Unable to create: " + startLog.getAbsolutePath());
          usageExit(ERR_LOGGING);
        }
        if (!startLog.canWrite()) {
          System.err.println("Unable to write to: " + startLog.getAbsolutePath());
          usageExit(ERR_LOGGING);
        }
        PrintStream logger=new PrintStream(new FileOutputStream(startLog,false));
        System.setOut(logger);
        System.setErr(logger);
        System.out.println("Establishing start.log on " + new Date());
        continue;
      }
      if ("--secure".equals(arg)) {
        _secure=true;
        continue;
      }
      if (arg.startsWith("--pre=")) {
        xmls.add(startup++,arg.substring(6));
        continue;
      }
      if (arg.startsWith("-D")) {
        String[] assign=arg.substring(2).split("=",2);
        _sysProps.add(assign[0]);
switch (assign.length) {
case 2:
          System.setProperty(assign[0],assign[1]);
        break;
case 1:
      System.setProperty(assign[0],"");
    break;
default :
  break;
}
continue;
}
if (arg.startsWith("-")) {
_jvmArgs.add(arg);
continue;
}
if (arg.indexOf('=') >= 0) {
String[] assign=arg.split("=",2);
switch (assign.length) {
case 2:
if ("OPTIONS".equals(assign[0])) {
  String opts[]=assign[1].split(",");
  for (  String opt : opts)   _config.addActiveOption(opt);
}
 else {
  this._config.setProperty(assign[0],assign[1]);
}
break;
case 1:
this._config.setProperty(assign[0],null);
break;
default :
break;
}
continue;
}
if (xmls.contains(arg)) {
System.out.println("WARN: Argument '" + arg + "' specified multiple times. Check start.ini?");
System.out.println("Use \"java -jar start.jar --help\" for more information.");
}
xmls.add(arg);
}
start(xmls);
}
 catch (Throwable t) {
usageExit(t,ERR_UNKNOWN);
}
}

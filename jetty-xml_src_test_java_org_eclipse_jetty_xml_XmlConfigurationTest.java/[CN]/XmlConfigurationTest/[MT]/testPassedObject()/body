{
  for (  String configure : _configure) {
    Map<String,String> properties=new HashMap<>();
    properties.put("whatever","xxx");
    TestConfiguration.VALUE=77;
    URL url=XmlConfigurationTest.class.getClassLoader().getResource(configure);
    XmlConfiguration configuration=new XmlConfiguration(url);
    TestConfiguration tc=new TestConfiguration("tc");
    configuration.getProperties().putAll(properties);
    configuration.configure(tc);
    assertEquals("Set String","SetValue",tc.testObject);
    assertEquals("Set Type",2,tc.testInt);
    assertEquals(18080,tc.propValue);
    assertEquals("Put","PutValue",tc.get("Test"));
    assertEquals("Put dft","2",tc.get("TestDft"));
    assertEquals("Put type",2,tc.get("TestInt"));
    assertEquals("Trim","PutValue",tc.get("Trim"));
    assertEquals("Null",null,tc.get("Null"));
    assertEquals("NullTrim",null,tc.get("NullTrim"));
    assertEquals("ObjectTrim",1.2345,tc.get("ObjectTrim"));
    assertEquals("Objects","-1String",tc.get("Objects"));
    assertEquals("ObjectsTrim","-1String",tc.get("ObjectsTrim"));
    assertEquals("String","\n    PutValue\n  ",tc.get("String"));
    assertEquals("NullString","",tc.get("NullString"));
    assertEquals("WhiteSpace","\n  ",tc.get("WhiteSpace"));
    assertEquals("ObjectString","\n    1.2345\n  ",tc.get("ObjectString"));
    assertEquals("ObjectsString","-1String",tc.get("ObjectsString"));
    assertEquals("ObjectsWhiteString","-1\n  String",tc.get("ObjectsWhiteString"));
    assertEquals("SystemProperty",System.getProperty("user.dir") + "/stuff",tc.get("SystemProperty"));
    assertEquals("Env",System.getenv("HOME"),tc.get("Env"));
    assertEquals("Property","xxx",tc.get("Property"));
    assertEquals("Called","Yes",tc.get("Called"));
    assertTrue(TestConfiguration.called);
    assertEquals("oa[0]","Blah",tc.oa[0]);
    assertEquals("oa[1]","1.2.3.4:5678",tc.oa[1]);
    assertEquals("oa[2]",1.2345,tc.oa[2]);
    assertEquals("oa[3]",null,tc.oa[3]);
    assertEquals("ia[0]",1,tc.ia[0]);
    assertEquals("ia[1]",2,tc.ia[1]);
    assertEquals("ia[2]",3,tc.ia[2]);
    assertEquals("ia[3]",0,tc.ia[3]);
    TestConfiguration tc2=tc.nested;
    assertTrue(tc2 != null);
    assertEquals("Called(bool)",true,tc2.get("Arg"));
    assertEquals("nested config",null,tc.get("Arg"));
    assertEquals("nested config",true,tc2.get("Arg"));
    assertEquals("nested config","Call1",tc2.testObject);
    assertEquals("nested config",4,tc2.testInt);
    assertEquals("nested call","http://www.eclipse.com/",tc2.url.toString());
    assertEquals("static to field",tc.testField1,77);
    assertEquals("field to field",tc.testField2,2);
    assertEquals("literal to static",TestConfiguration.VALUE,42);
  }
}

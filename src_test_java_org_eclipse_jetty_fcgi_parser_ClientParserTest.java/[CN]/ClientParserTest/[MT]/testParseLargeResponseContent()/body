{
  final int id=13;
  Fields fields=new Fields();
  ByteBuffer content=ByteBuffer.wrap(new byte[128 * 1024]);
  final int contentLength=content.remaining();
  final int code=200;
  final String contentTypeName="Content-Length";
  final String contentTypeValue=String.valueOf(contentLength);
  fields.put(contentTypeName,contentTypeValue);
  ByteBufferPool byteBufferPool=new MappedByteBufferPool();
  ServerGenerator generator=new ServerGenerator(byteBufferPool);
  Generator.Result result1=generator.generateResponseHeaders(id,code,"OK",fields,null);
  Generator.Result result2=generator.generateResponseContent(id,content,true,null);
  final AtomicInteger length=new AtomicInteger();
  final AtomicBoolean verifier=new AtomicBoolean();
  ClientParser parser=new ClientParser(new Parser.Listener.Adapter(){
    @Override public void onContent(    int request,    FCGI.StreamType stream,    ByteBuffer buffer){
      Assert.assertEquals(id,request);
      length.addAndGet(buffer.remaining());
    }
    @Override public void onEnd(    int request){
      Assert.assertEquals(id,request);
      Assert.assertEquals(contentLength,length.get());
      verifier.set(true);
    }
  }
);
  for (  ByteBuffer buffer : result1.getByteBuffers()) {
    parser.parse(buffer);
    Assert.assertFalse(buffer.hasRemaining());
  }
  for (  ByteBuffer buffer : result2.getByteBuffers()) {
    parser.parse(buffer);
    Assert.assertFalse(buffer.hasRemaining());
  }
  Assert.assertTrue(verifier.get());
}

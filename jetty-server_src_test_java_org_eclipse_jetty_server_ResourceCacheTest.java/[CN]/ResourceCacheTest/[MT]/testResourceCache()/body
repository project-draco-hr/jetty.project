{
  final Resource directory;
  File[] files=new File[10];
  String[] names=new String[files.length];
  ResourceCache cache;
  for (int i=0; i < files.length; i++) {
    files[i]=File.createTempFile("R-" + i + "-",".txt");
    files[i].deleteOnExit();
    names[i]=files[i].getName();
    FileOutputStream out=new FileOutputStream(files[i]);
    for (int j=0; j < (i * 10 - 1); j++)     out.write(' ');
    out.write('\n');
    out.close();
  }
  directory=Resource.newResource(files[0].getParentFile().getAbsolutePath());
  cache=new ResourceCache(null,directory,new MimeTypes(),false);
  cache.setMaxCacheSize(95);
  cache.setMaxCachedFileSize(85);
  cache.setMaxCachedFiles(4);
  assertTrue(cache.lookup("does not exist") == null);
  assertTrue(cache.lookup(names[9]) instanceof HttpContent.ResourceAsHttpContent);
  HttpContent content;
  content=cache.lookup(names[8]);
  assertTrue(content != null);
  assertEquals(80,content.getContentLength());
  assertEquals(80,cache.getCachedSize());
  assertEquals(1,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[1]);
  assertEquals(90,cache.getCachedSize());
  assertEquals(2,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[2]);
  assertEquals(30,cache.getCachedSize());
  assertEquals(2,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[3]);
  assertEquals(60,cache.getCachedSize());
  assertEquals(3,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[4]);
  assertEquals(90,cache.getCachedSize());
  assertEquals(3,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[5]);
  assertEquals(90,cache.getCachedSize());
  assertEquals(2,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[6]);
  assertEquals(60,cache.getCachedSize());
  assertEquals(1,cache.getCachedFiles());
  Thread.sleep(2);
  FileOutputStream out=new FileOutputStream(files[6]);
  out.write(' ');
  out.close();
  content=cache.lookup(names[7]);
  assertEquals(70,cache.getCachedSize());
  assertEquals(1,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[6]);
  assertEquals(71,cache.getCachedSize());
  assertEquals(2,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[0]);
  assertEquals(72,cache.getCachedSize());
  assertEquals(3,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[1]);
  assertEquals(82,cache.getCachedSize());
  assertEquals(4,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[2]);
  assertEquals(32,cache.getCachedSize());
  assertEquals(4,cache.getCachedFiles());
  Thread.sleep(2);
  content=cache.lookup(names[3]);
  assertEquals(61,cache.getCachedSize());
  assertEquals(4,cache.getCachedFiles());
  Thread.sleep(2);
  cache.flushCache();
  assertEquals(0,cache.getCachedSize());
  assertEquals(0,cache.getCachedFiles());
  cache.flushCache();
}

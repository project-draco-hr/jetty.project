{
  HttpResponse response=readResponseHeader();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Response Header: {}{}",'\n',response);
  }
  Assert.assertThat("Response Status Code",response.getStatusCode(),is(101));
  Assert.assertThat("Response Status Reason",response.getStatusReason(),is("Switching Protocols"));
  Assert.assertThat("Response Header[Upgrade]",response.getHeader("Upgrade"),is("WebSocket"));
  Assert.assertThat("Response Header[Connection]",response.getHeader("Connection"),is("Upgrade"));
  String acceptKey=response.getHeader("Sec-WebSocket-Accept");
  Assert.assertThat("Response Header[Sec-WebSocket-Accept Exists]",acceptKey,notNullValue());
  String reqKey=REQUEST_HASH_KEY;
  String expectedHash=AcceptHash.hashKey(reqKey);
  Assert.assertThat("Valid Sec-WebSocket-Accept Hash?",acceptKey,is(expectedHash));
  List<ExtensionConfig> configs=getExtensionConfigs(response);
  extensionStack=new ExtensionStack(this.extensionFactory);
  extensionStack.negotiate(configs);
  this.frameReader=new FrameReadingThread();
  this.frameReader.start();
  extensionStack.setNextIncoming(frameReader);
  extensionStack.setNextOutgoing(outgoing);
  extensionStack.configure(parser);
  extensionStack.configure(generator);
  try {
    extensionStack.start();
  }
 catch (  Exception e) {
    throw new IOException("Unable to start Extension Stack");
  }
  parser.setIncomingFramesHandler(extensionStack);
  ioState.onOpened();
  LOG.debug("outgoing = {}",outgoing);
  LOG.debug("incoming = {}",extensionStack);
  return response;
}

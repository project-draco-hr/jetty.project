{
  ByteBuffer data=frame.getPayload();
  int remaining=data.remaining();
  byte[] input=new byte[Math.min(remaining,inputLength)];
  int length=Math.min(remaining,input.length);
  LOG.debug("Compressing {}: {} bytes in {} bytes chunk",frame,remaining,length);
  finished=length == remaining;
  data.get(input,0,length);
  compressor.setInput(input,0,length);
  byte[] output=new byte[length + 64];
  int offset=0;
  int total=0;
  while (true) {
    int space=output.length - offset;
    int compressed=compressor.deflate(output,offset,space,Deflater.SYNC_FLUSH);
    total+=compressed;
    if (compressed < space) {
      break;
    }
 else {
      byte[] newOutput=new byte[output.length * 2];
      System.arraycopy(output,0,newOutput,0,output.length);
      offset+=output.length;
      output=newOutput;
    }
  }
  payload=getBufferPool().acquire(total,true);
  BufferUtil.flipToFill(payload);
  payload.put(output,0,total - TAIL_BYTES.length).flip();
  LOG.debug("Compressed {}: {}->{} chunk bytes",frame,length,total);
  DataFrame chunk=new DataFrame(frame);
  chunk.setRsv1(true);
  chunk.setPayload(payload);
  chunk.setFin(finished);
  nextOutgoingFrame(chunk,this);
}

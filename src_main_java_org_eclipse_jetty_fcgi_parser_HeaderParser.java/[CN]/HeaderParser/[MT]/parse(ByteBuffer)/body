{
  while (buffer.hasRemaining()) {
switch (state) {
case VERSION:
{
        version=buffer.get() & 0xFF;
        state=State.TYPE;
        break;
      }
case TYPE:
{
      type=buffer.get() & 0xFF;
      state=State.REQUEST;
      break;
    }
case REQUEST:
{
    if (buffer.remaining() >= 2) {
      request=buffer.getShort() & 0xFFFF;
      state=State.LENGTH;
    }
 else {
      state=State.REQUEST_BYTES;
      cursor=0;
    }
    break;
  }
case REQUEST_BYTES:
{
  int halfShort=buffer.get() & 0xFF;
  request=(request << (8 * cursor)) + halfShort;
  if (++cursor == 2)   state=State.LENGTH;
  break;
}
case LENGTH:
{
if (buffer.remaining() >= 2) {
  length=buffer.getShort() & 0xFFFF;
  state=State.PADDING;
}
 else {
  state=State.LENGTH_BYTES;
  cursor=0;
}
break;
}
case LENGTH_BYTES:
{
int halfShort=buffer.get() & 0xFF;
length=(length << (8 * cursor)) + halfShort;
if (++cursor == 2) state=State.PADDING;
break;
}
case PADDING:
{
padding=buffer.get() & 0xFF;
state=State.RESERVED;
break;
}
case RESERVED:
{
buffer.get();
return true;
}
default :
{
throw new IllegalStateException();
}
}
}
return false;
}

{
  if (baseRequest.isHandled())   return;
  boolean skipContentBody=false;
  if (!HttpMethod.GET.is(request.getMethod())) {
    if (!HttpMethod.HEAD.is(request.getMethod())) {
      super.handle(target,baseRequest,request,response);
      return;
    }
    skipContentBody=true;
  }
  Resource resource=getResource(request);
  if (resource == null || !resource.exists()) {
    if (target.endsWith("/jetty-dir.css")) {
      resource=getStylesheet();
      if (resource == null)       return;
      response.setContentType("text/css");
    }
 else {
      super.handle(target,baseRequest,request,response);
      return;
    }
  }
  baseRequest.setHandled(true);
  if (resource.isDirectory()) {
    if (!request.getPathInfo().endsWith(URIUtil.SLASH)) {
      response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getRequestURI(),URIUtil.SLASH)));
      return;
    }
    Resource welcome=getWelcome(resource);
    if (welcome != null && welcome.exists())     resource=welcome;
 else {
      doDirectory(request,response,resource);
      baseRequest.setHandled(true);
      return;
    }
  }
  long last_modified=resource.lastModified();
  String etag=null;
  if (_etags) {
    String ifnm=request.getHeader(HttpHeader.IF_NONE_MATCH.asString());
    etag=resource.getWeakETag();
    if (ifnm != null && resource != null && ifnm.equals(etag)) {
      response.setStatus(HttpStatus.NOT_MODIFIED_304);
      baseRequest.getResponse().getHttpFields().put(HttpHeader.ETAG,etag);
      return;
    }
  }
  if (last_modified > 0) {
    long if_modified=request.getDateHeader(HttpHeader.IF_MODIFIED_SINCE.asString());
    if (if_modified > 0 && last_modified / 1000 <= if_modified / 1000) {
      response.setStatus(HttpStatus.NOT_MODIFIED_304);
      return;
    }
  }
  String mime=_mimeTypes.getMimeByExtension(resource.toString());
  if (mime == null)   mime=_mimeTypes.getMimeByExtension(request.getPathInfo());
  doResponseHeaders(response,resource,mime != null ? mime.toString() : null);
  if (_etags)   baseRequest.getResponse().getHttpFields().put(HttpHeader.ETAG,etag);
  if (skipContentBody)   return;
  OutputStream out=null;
  try {
    out=response.getOutputStream();
  }
 catch (  IllegalStateException e) {
    out=new WriterOutputStream(response.getWriter());
  }
  if (!(out instanceof HttpOutput))   resource.writeTo(out,0,resource.length());
 else {
    int min_async_size=_minAsyncContentLength == 0 ? response.getBufferSize() : _minAsyncContentLength;
    if (request.isAsyncSupported() && min_async_size > 0 && resource.length() >= min_async_size) {
      final AsyncContext async=request.startAsync();
      Callback callback=new Callback(){
        @Override public void succeeded(){
          async.complete();
        }
        @Override public void failed(        Throwable x){
          LOG.warn(x.toString());
          LOG.debug(x);
          async.complete();
        }
      }
;
      if (_minMemoryMappedContentLength > 0 && resource.length() > _minMemoryMappedContentLength && resource instanceof FileResource) {
        ByteBuffer buffer=BufferUtil.toMappedBuffer(resource.getFile());
        ((HttpOutput)out).sendContent(buffer,callback);
      }
 else {
        ReadableByteChannel channel=resource.getReadableByteChannel();
        if (channel != null)         ((HttpOutput)out).sendContent(channel,callback);
 else         ((HttpOutput)out).sendContent(resource.getInputStream(),callback);
      }
    }
 else {
      if (_minMemoryMappedContentLength > 0 && resource.length() > _minMemoryMappedContentLength && resource instanceof FileResource) {
        ByteBuffer buffer=BufferUtil.toMappedBuffer(resource.getFile());
        ((HttpOutput)out).sendContent(buffer);
      }
 else {
        ReadableByteChannel channel=resource.getReadableByteChannel();
        if (channel != null)         ((HttpOutput)out).sendContent(channel);
 else         ((HttpOutput)out).sendContent(resource.getInputStream());
      }
    }
  }
}

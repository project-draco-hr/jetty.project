{
  Request base_request=request instanceof Request ? (Request)request : HttpConnection.getCurrentConnection().getRequest();
  if (base_request.isHandled())   return;
  boolean skipContentBody=false;
  if (!HttpMethods.GET.equals(request.getMethod())) {
    if (!HttpMethods.HEAD.equals(request.getMethod()))     return;
    skipContentBody=true;
  }
  Resource resource=getResource(request);
  if (resource == null || !resource.exists())   return;
  base_request.setHandled(true);
  if (resource.isDirectory()) {
    if (!request.getPathInfo().endsWith(URIUtil.SLASH)) {
      response.sendRedirect(URIUtil.addPaths(request.getRequestURI(),URIUtil.SLASH));
      return;
    }
    resource=getWelcome(resource);
    if (resource == null || !resource.exists() || resource.isDirectory()) {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
      return;
    }
  }
  long last_modified=resource.lastModified();
  if (last_modified > 0) {
    long if_modified=request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);
    if (if_modified > 0 && last_modified / 1000 <= if_modified / 1000) {
      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      return;
    }
  }
  Buffer mime=_mimeTypes.getMimeByExtension(resource.toString());
  if (mime == null)   mime=_mimeTypes.getMimeByExtension(request.getPathInfo());
  doResponseHeaders(response,resource,mime != null ? mime.toString() : null);
  response.setDateHeader(HttpHeaders.LAST_MODIFIED,last_modified);
  if (skipContentBody)   return;
  OutputStream out=null;
  try {
    out=response.getOutputStream();
  }
 catch (  IllegalStateException e) {
    out=new WriterOutputStream(response.getWriter());
  }
  if (out instanceof HttpConnection.Output) {
    ((HttpConnection.Output)out).sendContent(resource.getInputStream());
  }
 else {
    resource.writeTo(out,0,resource.length());
  }
}

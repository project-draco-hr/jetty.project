{
  startSSLServer(new ServerHandler(){
    @Override public void handle(    String target,    Request request,    HttpServletRequest httpRequest,    HttpServletResponse httpResponse) throws IOException, ServletException {
      super.handle(target,request,httpRequest,httpResponse);
    }
  }
);
  startProxy(new ConnectHandler(){
    @Override protected boolean handleAuthentication(    HttpServletRequest request,    HttpServletResponse response,    String address){
      final String header=request.getHeader(PROXY_AUTHORIZATION.toString());
      if (header == null || !header.startsWith("Basic ")) {
        LOG.warn("Missing header " + PROXY_AUTHORIZATION);
        response.setHeader(PROXY_AUTHENTICATE.toString(),String.format("Basic realm=\"%s\"","test-realm"));
        return false;
      }
 else {
        LOG.info("Request contains required header " + PROXY_AUTHORIZATION);
        return true;
      }
    }
  }
);
  HttpClient httpClient=new HttpClient(sslContextFactory);
  httpClient.getProxyConfiguration().getProxies().add(new HttpProxy("localhost",proxyPort()));
  httpClient.getAuthenticationStore().addAuthentication(new BasicAuthentication(URI.create("http://localhost:" + proxyPort()),"test-realm","user","password"));
  httpClient.start();
  try {
    String host="127.0.0.1";
    String body="BODY";
    ContentResponse response=httpClient.newRequest(host,serverConnector.getLocalPort()).scheme(HttpScheme.HTTPS.asString()).method(HttpMethod.GET).path("/echo?body=" + URLEncoder.encode(body,"UTF-8")).send();
    assertEquals(HttpStatus.OK_200,response.getStatus());
    String content=response.getContentAsString();
    assertEquals(body,content);
  }
  finally {
    httpClient.stop();
  }
}

{
  HttpHeader header=field.getHeader();
  String name=field.getName();
  String value=field.getValue();
  int field_size=name.length() + (value == null ? 0 : value.length());
  _size+=field_size + 32;
  if (_size > _maxSize)   throw new BadMessageException(HttpStatus.REQUEST_HEADER_FIELDS_TOO_LARGE_431,"Header size " + _size + ">"+ _maxSize);
  if (field instanceof StaticTableHttpField) {
    StaticTableHttpField staticField=(StaticTableHttpField)field;
switch (header) {
case C_STATUS:
      _status=(Integer)staticField.getStaticValue();
    break;
case C_METHOD:
  _method=value;
break;
case C_SCHEME:
_scheme=(HttpScheme)staticField.getStaticValue();
break;
default :
throw new IllegalArgumentException(name);
}
}
 else if (header != null) {
switch (header) {
case C_STATUS:
_status=field.getIntValue();
break;
case C_METHOD:
_method=value;
break;
case C_SCHEME:
if (value != null) _scheme=HttpScheme.CACHE.get(value);
break;
case C_AUTHORITY:
if (field instanceof HostPortHttpField) _authority=(HostPortHttpField)field;
 else if (value != null) _authority=new AuthorityHttpField(value);
break;
case HOST:
if (_authority == null) {
if (field instanceof HostPortHttpField) _authority=(HostPortHttpField)field;
 else if (value != null) _authority=new AuthorityHttpField(value);
}
_fields.add(field);
break;
case C_PATH:
_path=value;
break;
case CONTENT_LENGTH:
_contentLength=field.getLongValue();
_fields.add(field);
break;
default :
if (name.charAt(0) != ':') _fields.add(field);
break;
}
}
 else {
if (name.charAt(0) != ':') _fields.add(field);
}
}

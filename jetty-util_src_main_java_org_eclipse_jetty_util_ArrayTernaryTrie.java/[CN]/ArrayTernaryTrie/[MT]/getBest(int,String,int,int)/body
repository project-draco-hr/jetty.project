{
  int node=t;
  loop:   for (int i=0; i < len; i++) {
    char c=s.charAt(offset + i);
    if (isCaseInsensitive() && c < 128)     c=StringUtil.lowercases[c];
    while (true) {
      int row=ROW_SIZE * t;
      char n=_tree[row];
      int diff=n - c;
      if (diff == 0) {
        t=_tree[row + EQ];
        if (t == 0)         break loop;
        if (_key[t] != null) {
          node=t;
          V best=getBest(t,s,offset + i + 1,len - i - 1);
          if (best != null)           return best;
        }
        break;
      }
      t=_tree[row + hilo(diff)];
      if (t == 0)       break loop;
    }
  }
  return (V)_value[node];
}

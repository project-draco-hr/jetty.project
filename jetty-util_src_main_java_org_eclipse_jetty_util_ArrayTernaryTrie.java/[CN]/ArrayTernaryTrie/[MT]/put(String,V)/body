{
  int t=0;
  int limit=s.length();
  int last=0;
  for (int k=0; k < limit; k++) {
    char c=s.charAt(k);
    if (isCaseInsensitive() && c < 128)     c=StringUtil.lowercases[c];
    while (true) {
      int row=ROW_SIZE * t;
      if (t == _rows) {
        _rows++;
        if (_rows >= _key.length) {
          _rows--;
          return false;
        }
        _tree[row]=c;
      }
      char n=_tree[row];
      int diff=n - c;
      if (diff == 0)       t=_tree[last=(row + EQ)];
 else       if (diff < 0)       t=_tree[last=(row + LO)];
 else       t=_tree[last=(row + HI)];
      if (t == 0) {
        t=_rows;
        _tree[last]=(char)t;
      }
      if (diff == 0)       break;
    }
  }
  if (t == _rows) {
    _rows++;
    if (_rows >= _key.length) {
      _rows--;
      return false;
    }
  }
  _key[t]=v == null ? null : s;
  _value[t]=v;
  return true;
}

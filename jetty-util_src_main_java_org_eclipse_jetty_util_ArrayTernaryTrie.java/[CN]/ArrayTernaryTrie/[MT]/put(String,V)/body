{
  int last=EQ;
  int t=_tree[last];
  int k;
  int limit=s.length();
  int node=0;
  for (k=0; k < limit; k++) {
    char c=s.charAt(k);
    if (isCaseInsensitive() && c < 128)     c=StringUtil.lowercases[c];
    while (true) {
      if (t == 0) {
        node=t=++_rows;
        if (_rows >= _key.length) {
          _rows--;
          return false;
        }
        int row=ROW_SIZE * t;
        _tree[row]=c;
        _tree[last]=(char)t;
        last=row + EQ;
        t=0;
        break;
      }
      int row=ROW_SIZE * t;
      char n=_tree[row];
      int diff=n - c;
      if (diff == 0) {
        node=t;
        t=_tree[last=(row + EQ)];
        break;
      }
      if (diff < 0)       t=_tree[last=(row + LO)];
 else       t=_tree[last=(row + HI)];
    }
  }
  _key[node]=v == null ? null : s;
  _value[node]=v;
  return true;
}

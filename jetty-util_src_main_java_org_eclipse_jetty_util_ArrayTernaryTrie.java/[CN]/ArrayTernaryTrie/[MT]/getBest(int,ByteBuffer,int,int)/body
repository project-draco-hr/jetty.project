{
  int pos=b.position() + offset;
  int node=0;
  for (int i=0; t != 0 && i < len; i++) {
    char c=StringUtil.lowercases[b.get(pos++) & 0x7f];
    while (t != 0) {
      int row=ROW_SIZE * t;
      char n=_tree[row];
      int diff=n - c;
      if (diff == 0) {
        node=t;
        t=_tree[row + EQ];
        if (_key[node] != null) {
          V best=getBest(t,b,offset + i + 1,len - i - 1);
          if (best != null)           return best;
          return (V)_value[node];
        }
        break;
      }
      if (diff < 0)       t=_tree[row + LO];
 else       t=_tree[row + HI];
    }
  }
  return null;
}

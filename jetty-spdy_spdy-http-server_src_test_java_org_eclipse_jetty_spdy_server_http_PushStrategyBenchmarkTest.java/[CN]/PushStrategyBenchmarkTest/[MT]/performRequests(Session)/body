{
  int result=0;
  for (int j=0; j < htmlResources.length; ++j) {
    latch.set(new CountDownLatch(cssResources.length + jsResources.length + pngResources.length));
    pushedResources.clear();
    String primaryPath="/" + j + ".html";
    String referrer="http://localhost:" + connector.getLocalPort() + primaryPath;
    Fields headers=new Fields();
    headers.put(HTTPSPDYHeader.METHOD.name(version),"GET");
    headers.put(HTTPSPDYHeader.URI.name(version),primaryPath);
    headers.put(HTTPSPDYHeader.VERSION.name(version),"HTTP/1.1");
    headers.put(HTTPSPDYHeader.SCHEME.name(version),"http");
    headers.put(HTTPSPDYHeader.HOST.name(version),"localhost:" + connector.getLocalPort());
    ++result;
    final CountDownLatch htmlLatch=new CountDownLatch(1);
    session.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
      @Override public void onData(      Stream stream,      DataInfo dataInfo){
        dataInfo.consume(dataInfo.length());
        if (dataInfo.isClose())         htmlLatch.countDown();
      }
    }
);
    Assert.assertTrue(htmlLatch.await(5,TimeUnit.SECONDS));
    for (int i=0; i < cssResources.length; ++i) {
      String path="/" + i + ".css";
      if (pushedResources.contains(path))       continue;
      headers=createRequestHeaders(referrer,path);
      ++result;
      session.syn(new SynInfo(headers,true),new DataListener());
    }
    for (int i=0; i < jsResources.length; ++i) {
      String path="/" + i + ".js";
      if (pushedResources.contains(path))       continue;
      headers=createRequestHeaders(referrer,path);
      ++result;
      session.syn(new SynInfo(headers,true),new DataListener());
    }
    for (int i=0; i < pngResources.length; ++i) {
      String path="/" + i + ".png";
      if (pushedResources.contains(path))       continue;
      headers=createRequestHeaders(referrer,path);
      ++result;
      session.syn(new SynInfo(headers,true),new DataListener());
    }
    Assert.assertTrue(latch.get().await(5,TimeUnit.SECONDS));
  }
  return result;
}

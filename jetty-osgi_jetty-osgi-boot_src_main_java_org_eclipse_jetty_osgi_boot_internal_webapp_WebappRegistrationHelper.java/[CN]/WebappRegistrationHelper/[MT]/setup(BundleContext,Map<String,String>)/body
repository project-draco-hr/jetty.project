{
  Enumeration<?> enUrls=context.getBundle().findEntries("/etc","jetty.xml",false);
  if (enUrls != null && enUrls.hasMoreElements()) {
    URL url=(URL)enUrls.nextElement();
    if (url != null) {
      url=DefaultFileLocatorHelper.getLocalURL(url);
      if (url.getProtocol().equals("file")) {
        File jettyxml=new File(url.toURI());
        File jettyhome=jettyxml.getParentFile().getParentFile();
        System.setProperty("jetty.home",jettyhome.getAbsolutePath());
      }
    }
  }
  File _installLocation=BUNDLE_FILE_LOCATOR_HELPER.getBundleInstallLocation(context.getBundle());
  boolean bootBundleCanBeJarred=true;
  String jettyHome=stripQuotesIfPresent(System.getProperty("jetty.home"));
  if (jettyHome == null || jettyHome.length() == 0) {
    if (_installLocation != null) {
      if (_installLocation.getName().endsWith(".jar")) {
        jettyHome=JettyHomeHelper.setupJettyHomeInEclipsePDE(_installLocation);
      }
      if (jettyHome == null && _installLocation != null && _installLocation.isDirectory()) {
        jettyHome=_installLocation.getAbsolutePath() + "/jettyhome";
        bootBundleCanBeJarred=false;
      }
    }
  }
  if (jettyHome == null || (!bootBundleCanBeJarred && !_installLocation.isDirectory())) {
  }
 else {
    System.setProperty("jetty.home",jettyHome);
  }
  String jettyLogs=stripQuotesIfPresent(System.getProperty("jetty.logs"));
  if (jettyLogs == null || jettyLogs.length() == 0) {
    System.setProperty("jetty.logs",jettyHome + "/logs");
  }
  if (jettyHome != null) {
    try {
      System.err.println("JETTY_HOME set to " + new File(jettyHome).getCanonicalPath());
    }
 catch (    Throwable t) {
      System.err.println("JETTY_HOME _set to " + new File(jettyHome).getAbsolutePath());
    }
  }
 else {
  }
  ClassLoader contextCl=Thread.currentThread().getContextClassLoader();
  try {
    File jettyHomeF=jettyHome != null ? new File(jettyHome) : null;
    ClassLoader libExtClassLoader=null;
    try {
      libExtClassLoader=LibExtClassLoaderHelper.createLibEtcClassLoader(jettyHomeF,_server,JettyBootstrapActivator.class.getClassLoader());
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    Thread.currentThread().setContextClassLoader(libExtClassLoader);
    String jettyetc=System.getProperty(OSGiWebappConstants.SYS_PROP_JETTY_ETC_FILES,"etc/jetty.xml");
    StringTokenizer tokenizer=new StringTokenizer(jettyetc,";,");
    Map<Object,Object> id_map=new HashMap<Object,Object>();
    id_map.put("Server",_server);
    Map<Object,Object> properties=new HashMap<Object,Object>();
    if (jettyHome != null) {
      properties.put("jetty.home",jettyHome);
    }
    properties.put("jetty.host",System.getProperty("jetty.host",""));
    properties.put("jetty.port",System.getProperty("jetty.port","8080"));
    properties.put("jetty.port.ssl",System.getProperty("jetty.port.ssl","8443"));
    while (tokenizer.hasMoreTokens()) {
      String etcFile=tokenizer.nextToken().trim();
      File conffile=null;
      enUrls=null;
      if (etcFile.indexOf(":") != -1) {
        conffile=Resource.newResource(etcFile).getFile();
      }
 else       if (etcFile.startsWith("/")) {
        conffile=new File(etcFile);
      }
 else       if (jettyHomeF != null) {
        conffile=new File(jettyHomeF,etcFile);
      }
 else {
        int last=etcFile.lastIndexOf('/');
        String path=last != -1 && last < etcFile.length() - 2 ? etcFile.substring(0,last) : "/";
        if (!path.startsWith("/")) {
          path="/" + path;
        }
        String pattern=last != -1 && last < etcFile.length() - 2 ? etcFile.substring(last + 1) : etcFile;
        enUrls=context.getBundle().findEntries(path,pattern,false);
        if (pattern.equals("jetty.xml") && (enUrls == null || !enUrls.hasMoreElements())) {
          path="/jettyhome" + path;
          pattern="jetty-osgi-default.xml";
          enUrls=context.getBundle().findEntries(path,pattern,false);
          System.err.println("Configuring jetty with the default embedded configuration:" + "bundle org.eclipse.jetty.boot.osgi /jettyhome/etc/jetty-osgi-default.xml");
        }
      }
      if (conffile != null && !conffile.exists()) {
        __logger.warn("Unable to resolve the xml configuration file for jetty " + etcFile);
        if ("etc/jetty.xml".equals(etcFile)) {
          __logger.info("Configuring default server on 8080");
          SelectChannelConnector connector=new SelectChannelConnector();
          connector.setPort(8080);
          _server.addConnector(connector);
          HandlerCollection handlers=new HandlerCollection();
          ContextHandlerCollection contexts=new ContextHandlerCollection();
          RequestLogHandler requestLogHandler=new RequestLogHandler();
          handlers.setHandlers(new Handler[]{contexts,new DefaultHandler(),requestLogHandler});
          _server.setHandler(handlers);
        }
      }
 else {
        InputStream is=null;
        try {
          XmlConfiguration config=null;
          if (conffile != null && conffile.exists()) {
            is=new FileInputStream(conffile);
            config=new XmlConfiguration(is);
          }
 else           if (enUrls != null && enUrls.hasMoreElements()) {
            URL url=(URL)enUrls.nextElement();
            if (url != null) {
              is=url.openStream();
              config=new XmlConfiguration(is);
            }
 else {
              System.err.println("Could not locate " + etcFile + " inside "+ context.getBundle().getSymbolicName());
              continue;
            }
          }
 else {
            continue;
          }
          config.setIdMap(id_map);
          config.setProperties(properties);
          config.configure();
          id_map=config.getIdMap();
        }
 catch (        SAXParseException saxparse) {
          Log.getLogger(WebappRegistrationHelper.class.getName()).warn("Unable to configure the jetty/etc file " + etcFile,saxparse);
          throw saxparse;
        }
 finally {
          if (is != null)           try {
            is.close();
          }
 catch (          IOException ioe) {
          }
        }
      }
    }
    init();
    try {
      URL[] jarsWithTlds=getJarsWithTlds();
      _commonParentClassLoaderForWebapps=jarsWithTlds == null ? libExtClassLoader : new TldLocatableURLClassloader(libExtClassLoader,jarsWithTlds);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    _server.start();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
 finally {
    Thread.currentThread().setContextClassLoader(contextCl);
  }
}

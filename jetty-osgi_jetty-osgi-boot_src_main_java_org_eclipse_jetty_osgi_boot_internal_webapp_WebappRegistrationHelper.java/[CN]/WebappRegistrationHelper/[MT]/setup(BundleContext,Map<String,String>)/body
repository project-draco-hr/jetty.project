{
  File _installLocation=BUNDLE_FILE_LOCATOR_HELPER.getBundleInstallLocation(context.getBundle());
  boolean bootBundleCanBeJarred=true;
  String jettyHome=stripQuotesIfPresent(System.getProperty("jetty.home"));
  if (jettyHome == null || jettyHome.length() == 0) {
    if (_installLocation.getName().endsWith(".jar")) {
      jettyHome=JettyHomeHelper.setupJettyHomeInEclipsePDE(_installLocation);
    }
    if (jettyHome == null) {
      jettyHome=_installLocation.getAbsolutePath() + "/jettyhome";
      bootBundleCanBeJarred=false;
    }
  }
  System.setProperty("jetty.home",jettyHome);
  String jettyLogs=stripQuotesIfPresent(System.getProperty("jetty.logs"));
  if (jettyLogs == null || jettyLogs.length() == 0) {
    System.setProperty("jetty.logs",jettyHome + "/logs");
  }
  if (!bootBundleCanBeJarred && !_installLocation.isDirectory()) {
    String install=_installLocation != null ? _installLocation.getCanonicalPath() : " unresolved_install_location";
    throw new IllegalArgumentException("The system property -Djetty.home" + " must be set to a directory or the bundle " + context.getBundle().getSymbolicName() + " installed here "+ install+ " must be unjarred.");
  }
  try {
    System.err.println("JETTY_HOME set to " + new File(jettyHome).getCanonicalPath());
  }
 catch (  Throwable t) {
    System.err.println("JETTY_HOME _set to " + new File(jettyHome).getAbsolutePath());
  }
  ClassLoader contextCl=Thread.currentThread().getContextClassLoader();
  try {
    File jettyHomeF=new File(jettyHome);
    try {
      URLClassLoader libExtClassLoader=LibExtClassLoaderHelper.createLibEtcClassLoaderHelper(jettyHomeF,_server,JettyBootstrapActivator.class.getClassLoader());
      URL[] jarsWithTlds=getJarsWithTlds();
      _commonParentClassLoaderForWebapps=jarsWithTlds == null ? libExtClassLoader : new TldLocatableURLClassloader(libExtClassLoader,getJarsWithTlds());
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    Thread.currentThread().setContextClassLoader(_commonParentClassLoaderForWebapps);
    String jettyetc=System.getProperty(OSGiWebappConstants.SYS_PROP_JETTY_ETC_FILES,"etc/jetty.xml");
    StringTokenizer tokenizer=new StringTokenizer(jettyetc,";,");
    Map<Object,Object> id_map=new HashMap();
    id_map.put("Server","_server");
    Map<Object,Object> properties=new HashMap();
    properties.put("jetty.home",jettyHome);
    properties.put("jetty.host",System.getProperty("jetty.host",""));
    properties.put("jetty.port",System.getProperty("jetty.port","8080"));
    properties.put("jetty.port.ssl",System.getProperty("jetty.port.ssl","8443"));
    while (tokenizer.hasMoreTokens()) {
      String etcFile=tokenizer.nextToken().trim();
      File conffile=etcFile.startsWith("/") ? new File(etcFile) : new File(jettyHomeF,etcFile);
      if (!conffile.exists()) {
        __logger.warn("Unable to resolve the jetty/etc file " + etcFile);
        if ("etc/jetty.xml".equals(etcFile)) {
          __logger.info("Configuring default server on 8080");
          SelectChannelConnector connector=new SelectChannelConnector();
          connector.setPort(8080);
          _server.addConnector(connector);
          HandlerCollection handlers=new HandlerCollection();
          ContextHandlerCollection contexts=new ContextHandlerCollection();
          RequestLogHandler requestLogHandler=new RequestLogHandler();
          handlers.setHandlers(new Handler[]{contexts,new DefaultHandler(),requestLogHandler});
          _server.setHandler(handlers);
        }
      }
 else {
        try {
          XmlConfiguration config=new XmlConfiguration(new FileInputStream(conffile));
          config.setIdMap(id_map);
          config.setProperties(properties);
          config.configure();
          id_map=config.getIdMap();
        }
 catch (        SAXParseException saxparse) {
          Log.getLogger(WebappRegistrationHelper.class.getName()).warn("Unable to configure the jetty/etc file " + etcFile,saxparse);
          throw saxparse;
        }
      }
    }
    init();
    _server.start();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
 finally {
    Thread.currentThread().setContextClassLoader(contextCl);
  }
}

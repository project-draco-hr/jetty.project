{
  File _installLocation=BUNDLE_FILE_LOCATOR_HELPER.getBundleInstallLocation(context.getBundle());
  boolean bootBundleCanBeJarred=true;
  String jettyHome=System.getProperty("jetty.home");
  if (jettyHome == null || jettyHome.length() == 0) {
    if (_installLocation.getName().endsWith(".jar")) {
      jettyHome=JettyHomeHelper.setupJettyHomeInEclipsePDE(_installLocation);
    }
    if (jettyHome == null) {
      jettyHome=_installLocation.getAbsolutePath() + "/jettyhome";
      bootBundleCanBeJarred=false;
    }
    System.setProperty("jetty.home",jettyHome);
  }
  String jettyLogs=System.getProperty("jetty.logs");
  if (jettyLogs == null || jettyLogs.length() == 0) {
    System.setProperty("jetty.logs",System.getProperty("jetty.home") + "/logs");
  }
  if (!bootBundleCanBeJarred && !_installLocation.isDirectory()) {
    String install=_installLocation != null ? _installLocation.getCanonicalPath() : " unresolved_install_location";
    throw new IllegalArgumentException("The system property -Djetty.home" + " must be set to a directory or the bundle " + context.getBundle().getSymbolicName() + " installed here "+ install+ " must be unjarred.");
  }
  try {
    System.err.println("JETTY_HOME set to " + new File(jettyHome).getCanonicalPath());
  }
 catch (  Throwable t) {
    System.err.println("JETTY_HOME _set to " + new File(jettyHome).getAbsolutePath());
  }
  ClassLoader contextCl=Thread.currentThread().getContextClassLoader();
  try {
    XmlConfiguration config=new XmlConfiguration(new FileInputStream(jettyHome + "/etc/jetty.xml"));
    config.getProperties().put("jetty.home",jettyHome);
    File jettyHomeF=new File(jettyHome);
    try {
      _libEtcClassLoader=LibExtClassLoaderHelper.createLibEtcClassLoaderHelper(jettyHomeF,_server,JettyBootstrapActivator.class.getClassLoader());
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    Thread.currentThread().setContextClassLoader(_libEtcClassLoader);
    config.configure(_server);
    init();
    _server.start();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
 finally {
    Thread.currentThread().setContextClassLoader(contextCl);
  }
}

{
  ClassLoader contextCl=Thread.currentThread().getContextClassLoader();
  String[] oldServerClasses=null;
  WebAppContext context=null;
  try {
    OSGiWebappClassLoader composite=createWebappClassLoader(contributor);
    Thread.currentThread().setContextClassLoader(composite);
    final JettyWebXmlConfiguration jettyXml=new JettyWebXmlConfiguration(){
      /** 
 * Configure Apply web-jetty.xml configuration
 * @see Configuration#configure(WebAppContext)
 */
      public void configure(      WebAppContext context) throws Exception {
        if (context.isStarted()) {
          if (Log.isDebugEnabled()) {
            Log.debug("Cannot configure webapp after it is started");
          }
          return;
        }
        if (Log.isDebugEnabled())         Log.debug("Configuring web-jetty.xml");
        Resource web_inf=context.getWebInf();
        if (web_inf != null && web_inf.isDirectory()) {
          Resource jetty=web_inf.addPath("jetty7-web.xml");
          if (!jetty.exists())           jetty=web_inf.addPath("jetty-web.xml");
          if (!jetty.exists())           jetty=web_inf.addPath("web-jetty.xml");
          if (jetty.exists()) {
            String[] old_server_classes=context.getServerClasses();
            try {
              context.setServerClasses(null);
              if (Log.isDebugEnabled())               Log.debug("Configure: " + jetty);
              XmlConfiguration jetty_config=new XmlConfiguration(jetty.getURL());
              jetty_config.configure(context);
            }
  finally {
              if (context.getServerClasses() == null)               context.setServerClasses(old_server_classes);
            }
          }
        }
      }
    }
;
    context=new WebAppContext(webapp.getAbsolutePath(),contextPath){
      @Override protected void loadConfigurations() throws Exception {
        super.loadConfigurations();
        for (int i=0; i < getConfigurations().length; i++) {
          if (getConfigurations()[i] instanceof JettyWebXmlConfiguration) {
            getConfigurations()[i]=jettyXml;
          }
        }
      }
    }
;
    context.setExtraClasspath(extraClasspath);
    if (webXmlPath != null && webXmlPath.length() != 0) {
      File webXml=null;
      if (webXmlPath.startsWith("/") || webXmlPath.startsWith("file:/")) {
        webXml=new File(webXmlPath);
      }
 else {
        webXml=new File(bundleInstall,webXmlPath);
      }
      if (webXml.exists()) {
        context.setDescriptor(webXml.getAbsolutePath());
      }
    }
    if (defaultWebXmlPath != null && defaultWebXmlPath.length() != 0) {
      File defaultWebXml=null;
      if (defaultWebXmlPath.startsWith("/") || defaultWebXmlPath.startsWith("file:/")) {
        defaultWebXml=new File(webXmlPath);
      }
 else {
        defaultWebXml=new File(bundleInstall,defaultWebXmlPath);
      }
      if (defaultWebXml.exists()) {
        context.setDescriptor(defaultWebXml.getAbsolutePath());
      }
    }
    configureWebAppContext(context,contributor);
    _ctxtHandler.addHandler(context);
    configureWebappClassLoader(contributor,context,composite);
    oldServerClasses=context.getServerClasses();
    context.setServerClasses(null);
    context.start();
    return context;
  }
  finally {
    if (context != null && oldServerClasses != null) {
      context.setServerClasses(oldServerClasses);
    }
    Thread.currentThread().setContextClassLoader(contextCl);
  }
}

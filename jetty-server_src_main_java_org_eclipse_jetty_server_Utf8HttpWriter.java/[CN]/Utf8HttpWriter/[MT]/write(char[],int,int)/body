{
  HttpOutput out=_out;
  if (length == 0 && out.isAllContentWritten()) {
    close();
    return;
  }
  while (length > 0) {
    _bytes.reset();
    int chars=length > MAX_OUTPUT_CHARS ? MAX_OUTPUT_CHARS : length;
    byte[] buffer=_bytes.getBuf();
    int bytes=_bytes.getCount();
    if (bytes + chars > buffer.length)     chars=buffer.length - bytes;
    for (int i=0; i < chars; i++) {
      int code=s[offset + i];
      if (_surrogate == 0) {
        if (Character.isHighSurrogate((char)code)) {
          _surrogate=code;
          continue;
        }
      }
 else       if (Character.isLowSurrogate((char)code)) {
        code=Character.toCodePoint((char)_surrogate,(char)code);
      }
 else {
        code=_surrogate;
        _surrogate=0;
        i--;
      }
      if ((code & 0xffffff80) == 0) {
        if (bytes >= buffer.length) {
          chars=i;
          break;
        }
        buffer[bytes++]=(byte)(code);
      }
 else {
        if ((code & 0xfffff800) == 0) {
          if (bytes + 2 > buffer.length) {
            chars=i;
            break;
          }
          buffer[bytes++]=(byte)(0xc0 | (code >> 6));
          buffer[bytes++]=(byte)(0x80 | (code & 0x3f));
        }
 else         if ((code & 0xffff0000) == 0) {
          if (bytes + 3 > buffer.length) {
            chars=i;
            break;
          }
          buffer[bytes++]=(byte)(0xe0 | (code >> 12));
          buffer[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | (code & 0x3f));
        }
 else         if ((code & 0xff200000) == 0) {
          if (bytes + 4 > buffer.length) {
            chars=i;
            break;
          }
          buffer[bytes++]=(byte)(0xf0 | (code >> 18));
          buffer[bytes++]=(byte)(0x80 | ((code >> 12) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | (code & 0x3f));
        }
 else         if ((code & 0xf4000000) == 0) {
          if (bytes + 5 > buffer.length) {
            chars=i;
            break;
          }
          buffer[bytes++]=(byte)(0xf8 | (code >> 24));
          buffer[bytes++]=(byte)(0x80 | ((code >> 18) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | ((code >> 12) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | (code & 0x3f));
        }
 else         if ((code & 0x80000000) == 0) {
          if (bytes + 6 > buffer.length) {
            chars=i;
            break;
          }
          buffer[bytes++]=(byte)(0xfc | (code >> 30));
          buffer[bytes++]=(byte)(0x80 | ((code >> 24) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | ((code >> 18) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | ((code >> 12) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | ((code >> 6) & 0x3f));
          buffer[bytes++]=(byte)(0x80 | (code & 0x3f));
        }
 else {
          buffer[bytes++]=(byte)('?');
        }
        _surrogate=0;
        if (bytes == buffer.length) {
          chars=i + 1;
          break;
        }
      }
    }
    _bytes.setCount(bytes);
    _bytes.writeTo(out);
    length-=chars;
    offset+=chars;
  }
}

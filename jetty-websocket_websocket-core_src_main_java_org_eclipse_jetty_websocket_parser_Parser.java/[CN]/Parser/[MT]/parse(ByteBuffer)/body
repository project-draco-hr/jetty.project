{
  try {
    LOG.debug("Parsing {} bytes",buffer.remaining());
    while (buffer.hasRemaining()) {
switch (state) {
case FINOP:
{
          byte b=buffer.get();
          byte flags=(byte)(0xF & (b >> 4));
          boolean fin=((flags & BaseFrame.FLAG_FIN) == 1);
          boolean rsv1=((flags & BaseFrame.FLAG_RSV1) == 1);
          boolean rsv2=((flags & BaseFrame.FLAG_RSV2) == 1);
          boolean rsv3=((flags & BaseFrame.FLAG_RSV3) == 1);
          OpCode opcode=OpCode.from((byte)(b & 0xF));
          if (opcode.isControlFrame() && !fin) {
            throw new WebSocketException("Fragmented Control Frame");
          }
          if (parser == null) {
            parser=parsers.get(opcode);
            parser.reset();
            parser.initFrame(fin,rsv1,rsv2,rsv3,opcode);
          }
          state=State.BASE_FRAMING;
          break;
        }
case BASE_FRAMING:
{
        if (parser.parseBaseFraming(buffer)) {
          state=State.PAYLOAD;
        }
        break;
      }
case PAYLOAD:
{
      if (parser.parsePayload(buffer)) {
        notifyFrame(parser.getFrame());
        reset();
      }
      break;
    }
}
}
}
 catch (WebSocketException e) {
notifyWebSocketException(e);
}
catch (Throwable t) {
notifyWebSocketException(new WebSocketException(t));
}
 finally {
buffer.position(buffer.limit());
}
}

{
  while (_cache.size() > 0 && (_cachedFiles.get() > _maxCachedFiles || _cachedSize.get() > _maxCacheSize)) {
    SortedSet<Content> sorted=new TreeSet<Content>(new Comparator<Content>(){
      public int compare(      Content c1,      Content c2){
        if (c1._lastAccessed < c2._lastAccessed)         return -1;
        if (c1._lastAccessed > c2._lastAccessed)         return 1;
        if (c1._length < c2._length)         return -1;
        return c1._key.compareTo(c2._key);
      }
    }
);
    for (    Content content : _cache.values())     sorted.add(content);
    for (    Content content : sorted) {
      if (_cachedFiles.get() <= _maxCachedFiles && _cachedSize.get() <= _maxCacheSize)       break;
      if (content == _cache.remove(content.getKey()))       content.invalidate();
    }
  }
}

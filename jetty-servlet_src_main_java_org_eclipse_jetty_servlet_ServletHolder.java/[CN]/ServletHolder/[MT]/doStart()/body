{
  _unavailable=0;
  if (!_enabled)   return;
  if (_forcedPath != null) {
    String precompiled=getClassNameForJsp(_forcedPath);
    if (LOG.isDebugEnabled())     LOG.debug("Checking for precompiled servlet {} for jsp {}",precompiled,_forcedPath);
    ServletHolder jsp=getServletHandler().getServlet(precompiled);
    if (jsp != null && jsp.getClassName() != null) {
      if (LOG.isDebugEnabled())       LOG.debug("JSP file {} for {} mapped to Servlet {}",_forcedPath,getName(),jsp.getClassName());
      setClassName(jsp.getClassName());
    }
 else {
      if (getClassName() == null) {
        jsp=getServletHandler().getServlet("jsp");
        if (jsp != null) {
          if (LOG.isDebugEnabled())           LOG.debug("JSP file {} for {} mapped to Servlet class {}",_forcedPath,getName(),jsp.getClassName());
          setClassName(jsp.getClassName());
          for (          Map.Entry<String,String> entry : jsp.getInitParameters().entrySet()) {
            if (!_initParams.containsKey(entry.getKey()))             setInitParameter(entry.getKey(),entry.getValue());
          }
          setInitParameter("jspFile",_forcedPath);
        }
      }
    }
  }
  try {
    super.doStart();
  }
 catch (  UnavailableException ue) {
    makeUnavailable(ue);
    if (_servletHandler.isStartWithUnavailable()) {
      LOG.ignore(ue);
      return;
    }
 else     throw ue;
  }
  try {
    checkServletType();
  }
 catch (  UnavailableException ue) {
    makeUnavailable(ue);
    if (_servletHandler.isStartWithUnavailable()) {
      LOG.ignore(ue);
      return;
    }
 else     throw ue;
  }
  checkInitOnStartup();
  _identityService=_servletHandler.getIdentityService();
  if (_identityService != null && _runAsRole != null)   _runAsToken=_identityService.newRunAsToken(_runAsRole);
  _config=new Config();
  if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))   _servlet=new SingleThreadedWrapper();
}

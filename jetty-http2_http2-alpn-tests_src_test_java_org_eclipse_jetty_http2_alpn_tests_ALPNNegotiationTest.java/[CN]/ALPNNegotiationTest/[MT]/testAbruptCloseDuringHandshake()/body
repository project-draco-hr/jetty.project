{
  InetSocketAddress address=prepare();
  SslContextFactory sslContextFactory=newSslContextFactory();
  sslContextFactory.start();
  SSLEngine sslEngine=sslContextFactory.newSSLEngine(address);
  sslEngine.setUseClientMode(true);
  ALPN.put(sslEngine,new ALPN.ClientProvider(){
    @Override public void unsupported(){
    }
    @Override public List<String> protocols(){
      return Arrays.asList("h2");
    }
    @Override public void selected(    String s){
    }
  }
);
  sslEngine.beginHandshake();
  ByteBuffer encrypted=ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize());
  sslEngine.wrap(BufferUtil.EMPTY_BUFFER,encrypted);
  encrypted.flip();
  try (SocketChannel channel=SocketChannel.open(address)){
    channel.write(encrypted);
    channel.shutdownOutput();
    encrypted.clear();
    int read=channel.read(encrypted);
    encrypted.flip();
    Assert.assertTrue(read > 0);
    ByteBuffer decrypted=ByteBuffer.allocate(sslEngine.getSession().getApplicationBufferSize());
    sslEngine.unwrap(encrypted,decrypted);
    encrypted.clear();
    read=channel.read(encrypted);
    encrypted.flip();
    Assert.assertTrue(read > 0);
    Assert.assertEquals(21,encrypted.get(0));
  }
 }

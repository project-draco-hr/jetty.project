{
  int maxThreads=10;
  QueuedThreadPool threadPool=new QueuedThreadPool(maxThreads,maxThreads);
  threadPool.setDetailedDump(true);
  _server=new Server(threadPool);
  File directory=MavenTestingUtils.getTargetTestingDir();
  Files.createDirectories(directory.toPath());
  String resourceName="resource.bin";
  Path resourcePath=Paths.get(directory.getPath(),resourceName);
  try (OutputStream output=Files.newOutputStream(resourcePath,StandardOpenOption.CREATE,StandardOpenOption.WRITE)){
    byte[] chunk=new byte[1024];
    Arrays.fill(chunk,(byte)'X');
    chunk[chunk.length - 2]='\r';
    chunk[chunk.length - 1]='\n';
    for (int i=0; i < 256 * 1024; ++i)     output.write(chunk);
  }
   final CountDownLatch writePending=new CountDownLatch(1);
  ServerConnector connector=new ServerConnector(_server,0,1){
    @Override protected SelectChannelEndPoint newEndPoint(    SocketChannel channel,    ManagedSelector selectSet,    SelectionKey key) throws IOException {
      return new SelectChannelEndPoint(channel,selectSet,key,getScheduler(),getIdleTimeout()){
        @Override protected void onIncompleteFlush(){
          super.onIncompleteFlush();
          writePending.countDown();
        }
      }
;
    }
  }
;
  connector.setIdleTimeout(Long.MAX_VALUE);
  _server.addConnector(connector);
  ServletContextHandler context=new ServletContextHandler(_server,"/");
  context.setResourceBase(directory.toURI().toString());
  context.addServlet(DefaultServlet.class,"/*").setAsyncSupported(false);
  _server.setHandler(context);
  _server.start();
  List<Socket> sockets=new ArrayList<>();
  for (int i=0; i < maxThreads * 2; ++i) {
    Socket socket=new Socket("localhost",connector.getLocalPort());
    sockets.add(socket);
    OutputStream output=socket.getOutputStream();
    String request="" + "GET /" + resourceName + " HTTP/1.1\r\n"+ "Host: localhost\r\n"+ "\r\n";
    output.write(request.getBytes(StandardCharsets.UTF_8));
    output.flush();
    Thread.sleep(100);
  }
  Assert.assertTrue(writePending.await(5,TimeUnit.SECONDS));
  long expected=Files.size(resourcePath);
  byte[] buffer=new byte[48 * 1024];
  List<Exchanger<Long>> totals=new ArrayList<>();
  for (  Socket socket : sockets) {
    final Exchanger<Long> x=new Exchanger<>();
    totals.add(x);
    final InputStream input=socket.getInputStream();
    new Thread(){
      @Override public void run(){
        long total=0;
        try {
          StringBuilder header=new StringBuilder();
          int state=0;
          while (state < 4 && header.length() < 2048) {
            int ch=input.read();
            if (ch < 0)             break;
            header.append((char)ch);
switch (state) {
case 0:
              if (ch == '\r')               state=1;
            break;
case 1:
          if (ch == '\n')           state=2;
 else           state=0;
        break;
case 2:
      if (ch == '\r')       state=3;
 else       state=0;
    break;
case 3:
  if (ch == '\n')   state=4;
 else   state=0;
break;
}
}
while (total < expected) {
int read=input.read(buffer);
if (read < 0) break;
total+=read;
}
}
 catch (IOException e) {
e.printStackTrace();
}
 finally {
try {
x.exchange(total);
}
 catch (InterruptedException e) {
e.printStackTrace();
}
}
}
}
.start();
}
for (Exchanger<Long> x : totals) {
Long total=x.exchange(-1L,10000,TimeUnit.SECONDS);
Assert.assertEquals(expected,total.longValue());
}
for (Socket socket : sockets) socket.close();
}

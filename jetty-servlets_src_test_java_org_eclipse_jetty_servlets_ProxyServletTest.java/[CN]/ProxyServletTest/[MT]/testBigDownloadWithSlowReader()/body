{
  File targetTestingDir=MavenTestingUtils.getTargetTestingDir();
  targetTestingDir.mkdir();
  final File file=File.createTempFile("test_",null,targetTestingDir);
  file.deleteOnExit();
  FileOutputStream fos=new FileOutputStream(file);
  byte[] buffer=new byte[1024];
  Arrays.fill(buffer,(byte)'X');
  for (int i=0; i < 6 * 1024; ++i)   fos.write(buffer);
  fos.close();
  init(new HttpServlet(){
    private static final long serialVersionUID=1L;
    @Override protected void doGet(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      FileInputStream fis=new FileInputStream(file);
      ServletOutputStream output=response.getOutputStream();
      byte[] buffer=new byte[1024];
      int read;
      while ((read=fis.read(buffer)) >= 0)       output.write(buffer,0,read);
      fis.close();
    }
  }
);
  String url="http://localhost:" + _connector.getLocalPort() + "/proxy/test";
  ContentExchange exchange=new ContentExchange(true){
    @Override protected void onResponseContent(    Buffer content) throws IOException {
      try {
        TimeUnit.MILLISECONDS.sleep(10);
        super.onResponseContent(content);
      }
 catch (      InterruptedException x) {
        throw (IOException)new IOException().initCause(x);
      }
    }
  }
;
  exchange.setURL(url);
  long start=System.nanoTime();
  _client.send(exchange);
  Assert.assertEquals(HttpExchange.STATUS_COMPLETED,exchange.waitForDone());
  long elapsed=System.nanoTime() - start;
  Assert.assertEquals(HttpStatus.OK_200,exchange.getResponseStatus());
  Assert.assertEquals(file.length(),exchange.getResponseContentBytes().length);
  long millis=TimeUnit.NANOSECONDS.toMillis(elapsed);
  long rate=file.length() / 1024 * 1000 / millis;
  System.out.printf("download rate = %d KiB/s%n",rate);
}

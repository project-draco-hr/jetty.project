{
  final long delay=1000;
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      try {
        baseRequest.setHandled(true);
        TimeUnit.MILLISECONDS.sleep(2 * delay);
      }
 catch (      InterruptedException x) {
        throw new ServletException(x);
      }
    }
  }
);
  final Request request=client.newRequest("localhost",connector.getLocalPort()).timeout(3 * delay,TimeUnit.MILLISECONDS).scheme(scheme);
  final Throwable cause=new Exception();
  final AtomicBoolean aborted=new AtomicBoolean();
  final CountDownLatch latch=new CountDownLatch(1);
  new Thread(){
    @Override public void run(){
      try {
        TimeUnit.MILLISECONDS.sleep(delay);
        aborted.set(request.abort(cause));
        latch.countDown();
      }
 catch (      InterruptedException x) {
        throw new RuntimeException(x);
      }
    }
  }
.start();
  try {
    request.send();
  }
 catch (  ExecutionException x) {
    Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
    if (aborted.get())     Assert.assertSame(cause,x.getCause());
  }
  HttpDestinationOverHTTP destination=(HttpDestinationOverHTTP)client.getDestination(scheme,"localhost",connector.getLocalPort());
  ConnectionPool connectionPool=destination.getConnectionPool();
  Assert.assertEquals(0,connectionPool.getConnectionCount());
  Assert.assertEquals(0,connectionPool.getActiveConnections().size());
  Assert.assertEquals(0,connectionPool.getIdleConnections().size());
}

{
  final int windowSize=1024;
  final CountDownLatch settingsLatch=new CountDownLatch(1);
  startServer(new ServerSessionListener.Adapter(){
    @Override public void onSettings(    Session session,    SettingsFrame frame){
      settingsLatch.countDown();
    }
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame requestFrame){
      MetaData.Response metaData=new MetaData.Response(200,new HttpFields());
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),metaData,null,false);
      stream.headers(responseFrame,Callback.Adapter.INSTANCE);
      DataFrame dataFrame=new DataFrame(stream.getId(),ByteBuffer.allocate(windowSize / 2),true);
      stream.data(dataFrame,Callback.Adapter.INSTANCE);
      return null;
    }
  }
);
  Session client=newClient(new Session.Listener.Adapter());
  Map<Integer,Integer> settings=new HashMap<>();
  settings.put(SettingsFrame.INITIAL_WINDOW_SIZE,windowSize);
  client.settings(new SettingsFrame(settings,false),Callback.Adapter.INSTANCE);
  Assert.assertTrue(settingsLatch.await(5,TimeUnit.SECONDS));
  final AtomicReference<Callback> callbackRef1=new AtomicReference<>();
  final AtomicReference<Callback> callbackRef2=new AtomicReference<>();
  MetaData.Request request1=newRequest("GET",new HttpFields());
  client.newStream(new HeadersFrame(0,request1,null,true),new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callbackRef1.set(callback);
    }
  }
);
  MetaData.Request request2=newRequest("GET",new HttpFields());
  client.newStream(new HeadersFrame(0,request2,null,true),new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callbackRef2.set(callback);
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  MetaData.Request request3=newRequest("GET",new HttpFields());
  client.newStream(new HeadersFrame(0,request3,null,true),new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream())       latch.countDown();
    }
  }
);
  Assert.assertFalse(latch.await(1,TimeUnit.SECONDS));
  Callback callback2=callbackRef2.getAndSet(null);
  if (callback2 != null)   callback2.succeeded();
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

{
  Generator generator=new Generator(byteBufferPool);
  byte[] payload=new byte[8];
  new Random().nextBytes(payload);
  final List<PingFrame> frames=new ArrayList<>();
  ByteBufferPool.Lease lease=generator.generatePing(payload,true);
  Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
    @Override public boolean onPing(    PingFrame frame){
      frames.add(frame);
      return false;
    }
  }
);
  for (  ByteBuffer buffer : lease.getByteBuffers()) {
    while (buffer.hasRemaining()) {
      parser.parse(ByteBuffer.wrap(new byte[]{buffer.get()}));
    }
  }
  Assert.assertEquals(1,frames.size());
  PingFrame frame=frames.get(0);
  Assert.assertArrayEquals(payload,frame.getPayload());
  Assert.assertTrue(frame.isReply());
}

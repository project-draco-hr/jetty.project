{
  for (  Class clazz : _finder.getClassesForAnnotation(javax.servlet.http.annotation.ServletFilter.class)) {
    javax.servlet.http.annotation.ServletFilter annotation=(javax.servlet.http.annotation.ServletFilter)clazz.getAnnotation(javax.servlet.http.annotation.ServletFilter.class);
    PojoFilter filter=new PojoFilter(getPojoInstanceFor(clazz));
    FilterHolder holder=new FilterHolder(filter);
    holder.setName((annotation.filterName().equals("") ? clazz.getName() : annotation.filterName()));
    holder.setDisplayName(annotation.displayName());
    LazyList.add(_filters,holder);
    for (    InitParam ip : annotation.initParams()) {
      holder.setInitParameter(ip.name(),ip.value());
    }
    if (annotation.filterMapping() != null) {
      FilterMapping mapping=new FilterMapping();
      mapping.setFilterName(holder.getName());
      ArrayList paths=new ArrayList();
      for (      String s : annotation.filterMapping().urlPattern()) {
        paths.add(normalizePattern(s));
      }
      mapping.setPathSpecs((String[])paths.toArray(new String[paths.size()]));
      ArrayList names=new ArrayList();
      for (      String s : annotation.filterMapping().servletNames()) {
        names.add(s);
      }
      mapping.setServletNames((String[])names.toArray(new String[names.size()]));
      int dispatcher=FilterMapping.DEFAULT;
      for (      DispatcherType d : annotation.filterMapping().dispatcherTypes()) {
        dispatcher=dispatcher | FilterMapping.dispatch(d);
      }
      mapping.setDispatches(dispatcher);
      LazyList.add(_filterMappings,mapping);
    }
  }
}

{
  File homeDir=MavenTestingUtils.getTestResourceDir("dist-home");
  File baseDir=testdir.getEmptyDir();
  String cmdLine[]=new String[]{"jetty.version=TEST"};
  CommandLineConfigSource cmdLineSource=new CommandLineConfigSource(cmdLine);
  ConfigSources config=new ConfigSources();
  config.add(cmdLineSource);
  config.add(new JettyHomeConfigSource(homeDir.toPath()));
  config.add(new JettyBaseConfigSource(baseDir.toPath()));
  BaseHome basehome=new BaseHome(config);
  StartArgs args=new StartArgs();
  args.parse(config);
  Modules modules=new Modules(basehome,args);
  modules.registerAll();
  modules.selectNode("http",new Selection(TEST_SOURCE));
  modules.selectNode("annotations",new Selection(TEST_SOURCE));
  modules.selectNode("deploy",new Selection(TEST_SOURCE));
  String alt="<alt>";
  modules.selectNode("websocket",new Selection(alt));
  modules.selectNode("jsp",new Selection(alt));
  modules.buildGraph();
  List<Module> active=modules.getSelected();
  List<String> expectedNames=new ArrayList<>();
  expectedNames.add("apache-jsp");
  expectedNames.add("server");
  expectedNames.add("http");
  expectedNames.add("jndi");
  expectedNames.add("security");
  expectedNames.add("servlet");
  expectedNames.add("webapp");
  expectedNames.add("deploy");
  expectedNames.add("plus");
  expectedNames.add("annotations");
  expectedNames.add("jsp");
  expectedNames.add("websocket");
  List<String> actualNames=new ArrayList<>();
  for (  Module actual : active) {
    actualNames.add(actual.getName());
  }
  assertThat("Resolved Names: " + actualNames,actualNames,contains(expectedNames.toArray()));
  List<String> expectedAlts=new ArrayList<>();
  expectedAlts.add("apache-jsp");
  expectedAlts.add("jsp");
  expectedAlts.add("websocket");
  for (  String expectedAlt : expectedAlts) {
    Module altMod=modules.get(expectedAlt);
    assertThat("Alt.mod[" + expectedAlt + "].selected",altMod.isSelected(),is(true));
    Set<String> sources=altMod.getSelectedCriteriaSet();
    assertThat("Alt.mod[" + expectedAlt + "].sources: ["+ Utils.join(sources,", ")+ "]",sources,contains(alt));
  }
  List<Module> alts=modules.getMatching(new CriteriaSetPredicate(alt));
  actualNames=new ArrayList<>();
  for (  Module actual : alts) {
    actualNames.add(actual.getName());
  }
  assertThat("Resolved Alt (Sources) Names: " + actualNames,actualNames,contains(expectedAlts.toArray()));
}

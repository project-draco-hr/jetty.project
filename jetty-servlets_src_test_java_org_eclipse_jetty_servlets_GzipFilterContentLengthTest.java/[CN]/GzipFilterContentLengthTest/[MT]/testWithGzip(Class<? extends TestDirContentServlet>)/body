{
  GzipTester tester=new GzipTester(testingdir,GzipFilter.GZIP);
  FilterHolder gzipHolder=new FilterHolder(gzipFilterClass);
  gzipHolder.setAsyncSupported(true);
  tester.addFilter(gzipHolder,"*.txt",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));
  tester.addFilter(gzipHolder,"*.mp3",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));
  gzipHolder.setInitParameter("mimeTypes","text/plain");
  tester.setContentServlet(contentServlet);
  try {
    String testFilename=String.format("%s-%s-%s",gzipFilterClass.getSimpleName(),contentServlet.getSimpleName(),fileName);
    File testFile=tester.prepareServerFile(testFilename,fileSize);
    tester.start();
    HttpTester.Response response=tester.issueRequest("GET",testFile.getName(),2,TimeUnit.SECONDS);
    assertThat("Response status",response.getStatus(),is(HttpStatus.OK_200));
    if (expectCompressed) {
      assertThat("Content-Encoding",response.get("Content-Encoding"),containsString(GzipFilter.GZIP));
    }
 else {
      assertThat("Content-Encoding",response.get("Content-Encoding"),not(containsString(GzipFilter.GZIP)));
    }
    ContentMetadata content=tester.getResponseMetadata(response);
    assertThat("(Uncompressed) Content Length",content.size,is((long)fileSize));
  }
  finally {
    tester.stop();
  }
}

{
  if (str == null) {
    return str;
  }
  if (str.indexOf("${") < 0) {
    return str;
  }
  Pattern pat=Pattern.compile("(?<=[^$]|^)(\\$\\{[^}]*\\})");
  Matcher mat=pat.matcher(str);
  StringBuilder expanded=new StringBuilder();
  int offset=0;
  String property;
  String value;
  while (mat.find(offset)) {
    property=cleanReference(mat.group(1));
    if (seenStack.contains(property)) {
      StringBuilder err=new StringBuilder();
      err.append("Property expansion loop detected: ");
      int idx=seenStack.lastIndexOf(property);
      for (int i=idx; i < seenStack.size(); i++) {
        err.append(seenStack.get(i));
        err.append(" -> ");
      }
      err.append(property);
      throw new PropsException(err.toString());
    }
    expanded.append(str.subSequence(offset,mat.start(1)));
    value=getString(property);
    if (value == null) {
      StartLog.trace("Unable to expand: %s",property);
      expanded.append(mat.group(1));
    }
 else {
      seenStack.push(property);
      value=expand(value,seenStack);
      seenStack.pop();
      expanded.append(value);
    }
    offset=mat.end(1);
  }
  expanded.append(str.substring(offset));
  if (expanded.indexOf("$$") >= 0) {
    return expanded.toString().replaceAll("\\$\\$","\\$");
  }
  return expanded.toString();
}

{
  final Exchanger<Stream> streamExchanger=new Exchanger<>();
  final CountDownLatch pushStreamSynLatch=new CountDownLatch(1);
  final CyclicBarrier replyBarrier=new CyclicBarrier(3);
  final CyclicBarrier closeBarrier=new CyclicBarrier(3);
  final CountDownLatch streamDataSent=new CountDownLatch(2);
  final CountDownLatch pushStreamDataReceived=new CountDownLatch(2);
  final CountDownLatch exceptionCountDownLatch=new CountDownLatch(1);
  Session clientSession=startClient(startServer(new ServerSessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      stream.reply(new ReplyInfo(false),new Callback.Adapter());
      try {
        replyBarrier.await(5,TimeUnit.SECONDS);
        return new StreamFrameListener.Adapter(){
          @Override public void onData(          Stream stream,          DataInfo dataInfo){
            try {
              if (dataInfo.isClose()) {
                stream.data(new StringDataInfo("close stream",true));
                closeBarrier.await(5,TimeUnit.SECONDS);
              }
              streamDataSent.countDown();
              if (pushStreamDataReceived.getCount() == 2) {
                Stream pushStream=stream.syn(new SynInfo(new Fields(),false));
                streamExchanger.exchange(pushStream,5,TimeUnit.SECONDS);
              }
            }
 catch (            Exception e) {
              exceptionCountDownLatch.countDown();
            }
          }
        }
;
      }
 catch (      Exception e) {
        exceptionCountDownLatch.countDown();
        throw new IllegalStateException(e);
      }
    }
  }
),new SessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      pushStreamSynLatch.countDown();
      return new StreamFrameListener.Adapter(){
        @Override public void onData(        Stream stream,        DataInfo dataInfo){
          pushStreamDataReceived.countDown();
          super.onData(stream,dataInfo);
        }
      }
;
    }
  }
);
  Stream stream=clientSession.syn(new SynInfo(new Fields(),false),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      try {
        replyBarrier.await(5,TimeUnit.SECONDS);
      }
 catch (      Exception e) {
        exceptionCountDownLatch.countDown();
      }
    }
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      try {
        closeBarrier.await(5,TimeUnit.SECONDS);
      }
 catch (      Exception e) {
        exceptionCountDownLatch.countDown();
      }
    }
  }
);
  replyBarrier.await(5,TimeUnit.SECONDS);
  stream.data(new StringDataInfo("client data",false));
  Stream pushStream=streamExchanger.exchange(null,5,TimeUnit.SECONDS);
  pushStream.data(new StringDataInfo("first push data frame",false));
  while (pushStreamDataReceived.getCount() != 1)   Thread.sleep(1);
  stream.data(new StringDataInfo("client close",true));
  closeBarrier.await(5,TimeUnit.SECONDS);
  assertThat("stream is closed",stream.isClosed(),is(true));
  pushStream.data(new StringDataInfo("second push data frame while associated stream has been closed already",false));
  assertThat("2 pushStream data frames have been received.",pushStreamDataReceived.await(5,TimeUnit.SECONDS),is(true));
  assertThat("2 data frames have been sent",streamDataSent.await(5,TimeUnit.SECONDS),is(true));
  assertThatNoExceptionOccurred(exceptionCountDownLatch);
}

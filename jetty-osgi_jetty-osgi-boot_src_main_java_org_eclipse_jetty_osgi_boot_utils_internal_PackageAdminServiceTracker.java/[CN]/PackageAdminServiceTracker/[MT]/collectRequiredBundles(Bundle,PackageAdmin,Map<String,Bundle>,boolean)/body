{
  String requiredBundleHeader=(String)bundle.getHeaders().get("Require-Bundle");
  if (requiredBundleHeader == null) {
    return;
  }
  StringTokenizer tokenizer=new StringTokenizer(requiredBundleHeader,",");
  while (tokenizer.hasMoreTokens()) {
    String tok=tokenizer.nextToken().trim();
    StringTokenizer tokenizer2=new StringTokenizer(tok,";");
    String symbolicName=tokenizer2.nextToken().trim();
    if (deps.keySet().contains(symbolicName)) {
      continue;
    }
    String versionRange=null;
    boolean reexport=false;
    while (tokenizer2.hasMoreTokens()) {
      String next=tokenizer2.nextToken().trim();
      if (next.startsWith("bundle-version=")) {
        if (next.startsWith("bundle-version=\"") || next.startsWith("bundle-version='")) {
          versionRange=next.substring("bundle-version=\"".length(),next.length() - 1);
        }
 else {
          versionRange=next.substring("bundle-version=".length());
        }
      }
 else       if (next.equals("visibility:=reexport")) {
        reexport=true;
      }
    }
    if (!reexport && onlyReexport) {
      return;
    }
    Bundle[] reqBundles=admin.getBundles(symbolicName,versionRange);
    if (reqBundles != null && reqBundles.length != 0) {
      Bundle reqBundle=null;
      for (      Bundle b : reqBundles) {
        if (b.getState() == Bundle.ACTIVE || b.getState() == Bundle.STARTING) {
          reqBundle=b;
          break;
        }
      }
      if (reqBundle == null) {
        reqBundle=reqBundles[0];
      }
      deps.put(reqBundle.getSymbolicName(),reqBundle);
      collectFragmentsAndRequiredBundles(reqBundle,admin,deps,true);
    }
  }
}

{
  String response="";
  _connection=connection;
  _te=te;
  gen.setVersion(HttpVersion.fromVersion(version));
  gen.setResponse(_code,reason);
  gen.setHead(_head);
  if (_contentType != null)   fields.put("Content-Type",_contentType);
  if (_contentLength >= 0) {
    fields.put("Content-Length","" + _contentLength);
    gen.setContentLength(_contentLength);
  }
  if (_connection != null)   fields.put("Connection",_connection);
  if (_te != null)   fields.put("Transfer-Encoding",_te);
  if (_other != null)   fields.put("Other",_other);
  ByteBuffer content=_body == null ? null : BufferUtil.toBuffer(_body);
  if (content != null)   content.limit(0);
  ByteBuffer header=null;
  ByteBuffer chunk=null;
  ByteBuffer buffer=null;
  while (!gen.isComplete()) {
    if (content != null && content.position() < content.capacity()) {
      if (content.remaining() == 0) {
        content.limit(content.capacity());
        if (chunks-- > 1)         content.limit(content.position() + content.remaining() / 2);
      }
    }
    Action action=BufferUtil.hasContent(content) ? null : Action.COMPLETE;
    HttpGenerator.Result result=gen.generate(header,chunk,buffer,content,action);
switch (result) {
case NEED_HEADER:
      header=BufferUtil.allocate(2048);
    break;
case NEED_BUFFER:
  buffer=BufferUtil.allocate(8192);
break;
case NEED_CHUNK:
header=null;
chunk=BufferUtil.allocate(HttpGenerator.CHUNK_SIZE);
break;
case FLUSH:
if (BufferUtil.hasContent(header)) {
response+=BufferUtil.toString(header);
header.position(header.limit());
}
 else if (BufferUtil.hasContent(chunk)) {
response+=BufferUtil.toString(chunk);
chunk.position(chunk.limit());
}
if (BufferUtil.hasContent(buffer)) {
response+=BufferUtil.toString(buffer);
buffer.position(buffer.limit());
}
break;
case FLUSH_CONTENT:
if (BufferUtil.hasContent(header)) {
response+=BufferUtil.toString(header);
header.position(header.limit());
}
 else if (BufferUtil.hasContent(chunk)) {
response+=BufferUtil.toString(chunk);
chunk.position(chunk.limit());
}
if (BufferUtil.hasContent(content)) {
response+=BufferUtil.toString(content);
content.position(content.limit());
}
break;
case OK:
case SHUTDOWN_OUT:
}
}
return response;
}

{
  short version=clientStream.getSession().getVersion();
  String method=clientSynInfo.getHeaders().get(HTTPSPDYHeader.METHOD.name(version)).getValue();
  String path=clientSynInfo.getHeaders().get(HTTPSPDYHeader.URI.name(version)).getValue();
  Fields headers=new Fields(clientSynInfo.getHeaders(),false);
  removeHopHeaders(headers);
  addRequestProxyHeaders(clientStream,headers);
  customizeRequestHeaders(clientStream,headers);
  String host=proxyServerInfo.getHost();
  int port=proxyServerInfo.getAddress().getPort();
  LOG.debug("Sending HTTP request to: {}",host + ":" + port);
  final Request request=httpClient.newRequest(host,port).path(path).method(HttpMethod.fromString(method));
  addNonSpdyHeadersToRequest(version,headers,request);
  if (!clientSynInfo.isClose()) {
    request.content(new DeferredContentProvider());
  }
  sendRequest(clientStream,request);
  return new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      throw new UnsupportedOperationException("Not Yet Implemented");
    }
    @Override public void onHeaders(    Stream stream,    HeadersInfo headersInfo){
      throw new UnsupportedOperationException("Not Yet Implemented");
    }
    @Override public void onData(    Stream clientStream,    final DataInfo clientDataInfo){
      LOG.debug("received clientDataInfo: {} for stream: {}",clientDataInfo,clientStream);
      DeferredContentProvider contentProvider=(DeferredContentProvider)request.getContent();
      contentProvider.offer(clientDataInfo.asByteBuffer(true));
      if (clientDataInfo.isClose())       contentProvider.close();
    }
  }
;
}

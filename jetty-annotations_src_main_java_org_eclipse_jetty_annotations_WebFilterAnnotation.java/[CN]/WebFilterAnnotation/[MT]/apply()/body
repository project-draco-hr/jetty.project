{
  Class clazz=getTargetClass();
  if (clazz == null) {
    Log.warn(_className + " cannot be loaded");
    return;
  }
  if (!Filter.class.isAssignableFrom(clazz)) {
    Log.warn(clazz.getName() + " is not assignable from javax.servlet.Filter");
    return;
  }
  MetaData metaData=_context.getMetaData();
  WebFilter filterAnnotation=(WebFilter)clazz.getAnnotation(WebFilter.class);
  if (filterAnnotation.value().length > 0 && filterAnnotation.urlPatterns().length > 0) {
    Log.warn(clazz.getName() + " defines both @WebFilter.value and @WebFilter.urlPatterns");
    return;
  }
  String name=(filterAnnotation.filterName().equals("") ? clazz.getName() : filterAnnotation.filterName());
  String[] urlPatterns=filterAnnotation.value();
  if (urlPatterns.length == 0)   urlPatterns=filterAnnotation.urlPatterns();
  FilterHolder holder=_context.getServletHandler().getFilter(name);
  if (holder == null) {
    holder=_context.getServletHandler().newFilterHolder(Holder.Source.ANNOTATION);
    holder.setName(name);
    holder.setHeldClass(clazz);
    metaData.setOrigin(name + ".filter.filter-class");
    holder.setDisplayName(filterAnnotation.displayName());
    metaData.setOrigin(name + ".filter.display-name");
    for (    WebInitParam ip : filterAnnotation.initParams()) {
      holder.setInitParameter(ip.name(),ip.value());
      metaData.setOrigin(name + ".filter.init-param." + ip.name());
    }
    FilterMapping mapping=new FilterMapping();
    mapping.setFilterName(holder.getName());
    if (urlPatterns.length > 0) {
      ArrayList paths=new ArrayList();
      for (      String s : urlPatterns) {
        paths.add(Util.normalizePattern(s));
      }
      mapping.setPathSpecs((String[])paths.toArray(new String[paths.size()]));
    }
    if (filterAnnotation.servletNames().length > 0) {
      ArrayList<String> names=new ArrayList<String>();
      for (      String s : filterAnnotation.servletNames()) {
        names.add(s);
      }
      mapping.setServletNames((String[])names.toArray(new String[names.size()]));
    }
    EnumSet<DispatcherType> dispatcherSet=EnumSet.noneOf(DispatcherType.class);
    for (    DispatcherType d : filterAnnotation.dispatcherTypes()) {
      dispatcherSet.add(d);
    }
    mapping.setDispatcherTypes(dispatcherSet);
    metaData.setOrigin(name + ".filter.mappings");
    holder.setAsyncSupported(filterAnnotation.asyncSupported());
    metaData.setOrigin(name + ".filter.async-supported");
    _context.getServletHandler().addFilter(holder);
    _context.getServletHandler().addFilterMapping(mapping);
  }
 else {
    for (    WebInitParam ip : filterAnnotation.initParams()) {
      if (metaData.getOrigin(name + ".filter.init-param." + ip.name()) == Origin.NotSet) {
        holder.setInitParameter(ip.name(),ip.value());
        metaData.setOrigin(name + ".filter.init-param." + ip.name());
      }
    }
    FilterMapping[] mappings=_context.getServletHandler().getFilterMappings();
    boolean mappingExists=false;
    if (mappings != null) {
      for (      FilterMapping m : mappings) {
        if (m.getFilterName().equals(name)) {
          mappingExists=true;
          break;
        }
      }
    }
    if (!mappingExists) {
      FilterMapping mapping=new FilterMapping();
      mapping.setFilterName(holder.getName());
      if (urlPatterns.length > 0) {
        ArrayList paths=new ArrayList();
        for (        String s : urlPatterns) {
          paths.add(Util.normalizePattern(s));
        }
        mapping.setPathSpecs((String[])paths.toArray(new String[paths.size()]));
      }
      if (filterAnnotation.servletNames().length > 0) {
        ArrayList<String> names=new ArrayList<String>();
        for (        String s : filterAnnotation.servletNames()) {
          names.add(s);
        }
        mapping.setServletNames((String[])names.toArray(new String[names.size()]));
      }
      EnumSet<DispatcherType> dispatcherSet=EnumSet.noneOf(DispatcherType.class);
      for (      DispatcherType d : filterAnnotation.dispatcherTypes()) {
        dispatcherSet.add(d);
      }
      mapping.setDispatcherTypes(dispatcherSet);
      _context.getServletHandler().addFilterMapping(mapping);
      metaData.setOrigin(name + ".filter.mappings");
    }
  }
}

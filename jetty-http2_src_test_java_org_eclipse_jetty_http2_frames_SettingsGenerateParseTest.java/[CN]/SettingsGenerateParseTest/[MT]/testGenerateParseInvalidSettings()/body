{
  Generator generator=new Generator(byteBufferPool);
  Map<Integer,Integer> settings1=new HashMap<>();
  settings1.put(13,17);
  Generator.Result result=generator.generateSettings(settings1,true);
  ByteBuffer bytes=result.getByteBuffers().get(0);
  bytes.putShort(0,(short)(bytes.getShort(0) - 1));
  final AtomicInteger errorRef=new AtomicInteger();
  Parser parser=new Parser(new Parser.Listener.Adapter(){
    @Override public void onConnectionFailure(    int error,    String reason){
      errorRef.set(error);
    }
  }
);
  for (  ByteBuffer buffer : result.getByteBuffers()) {
    while (buffer.hasRemaining()) {
      parser.parse(ByteBuffer.wrap(new byte[]{buffer.get()}));
    }
  }
  Assert.assertEquals(ErrorCode.PROTOCOL_ERROR,errorRef.get());
}

{
  final AtomicReference<EndPoint> endPointRef=new AtomicReference<>();
  final CountDownLatch serverLatch=new CountDownLatch(1);
  QueuedThreadPool serverThreads=new QueuedThreadPool();
  serverThreads.setName("server");
  Server server=new Server(serverThreads);
  ServerConnector connector=new ServerConnector(server);
  server.addConnector(connector);
  server.setHandler(new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      endPointRef.set(baseRequest.getHttpChannel().getEndPoint());
      serverLatch.countDown();
    }
  }
);
  server.start();
  final AtomicBoolean afterSetup=new AtomicBoolean();
  final CountDownLatch sendLatch=new CountDownLatch(1);
  final CountDownLatch beginLatch=new CountDownLatch(1);
  final CountDownLatch associateLatch=new CountDownLatch(1);
  QueuedThreadPool clientThreads=new QueuedThreadPool();
  clientThreads.setName("client");
  HttpClient client=new HttpClient(new HttpClientTransportOverHTTP(1){
    @Override protected HttpConnectionOverHTTP newHttpConnection(    EndPoint endPoint,    HttpDestination destination,    Promise<Connection> promise){
      return new HttpConnectionOverHTTP(endPoint,destination,promise){
        @Override protected HttpChannelOverHTTP newHttpChannel(){
          return new HttpChannelOverHTTP(this){
            @Override public void send(){
              if (afterSetup.get()) {
                associateLatch.countDown();
              }
              super.send();
            }
          }
;
        }
        @Override protected void close(        Throwable failure){
          try {
            sendLatch.countDown();
            beginLatch.await(5,TimeUnit.SECONDS);
            super.close(failure);
          }
 catch (          InterruptedException x) {
            x.printStackTrace();
          }
        }
        @Override protected boolean abort(        Throwable failure){
          try {
            associateLatch.await(5,TimeUnit.SECONDS);
            return super.abort(failure);
          }
 catch (          InterruptedException x) {
            x.printStackTrace();
            return false;
          }
        }
      }
;
    }
  }
,null);
  client.setIdleTimeout(10000);
  client.setExecutor(clientThreads);
  client.start();
  client.newRequest("localhost",connector.getLocalPort()).send();
  Assert.assertTrue(serverLatch.await(5,TimeUnit.SECONDS));
  afterSetup.set(true);
  Thread.sleep(1000);
  EndPoint endPoint=endPointRef.get();
  endPoint.close();
  Assert.assertTrue(sendLatch.await(5,TimeUnit.SECONDS));
  final CountDownLatch completeLatch=new CountDownLatch(1);
  client.newRequest("localhost",connector.getLocalPort()).timeout(10,TimeUnit.SECONDS).onRequestBegin(new org.eclipse.jetty.client.api.Request.BeginListener(){
    @Override public void onBegin(    org.eclipse.jetty.client.api.Request request){
      try {
        beginLatch.countDown();
        completeLatch.await(5,TimeUnit.SECONDS);
      }
 catch (      InterruptedException x) {
        x.printStackTrace();
      }
    }
  }
).send(new Response.CompleteListener(){
    @Override public void onComplete(    Result result){
      completeLatch.countDown();
    }
  }
);
  Assert.assertTrue(completeLatch.await(5,TimeUnit.SECONDS));
  HttpDestinationOverHTTP destination=(HttpDestinationOverHTTP)client.getDestination("http","localhost",connector.getLocalPort());
  DuplexConnectionPool pool=destination.getConnectionPool();
  Assert.assertEquals(0,pool.getConnectionCount());
  Assert.assertEquals(0,pool.getIdleConnections().size());
  Assert.assertEquals(0,pool.getActiveConnections().size());
}

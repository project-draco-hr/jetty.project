{
  boolean pending=false;
  boolean changed=true;
  while (true) {
    State current=_interestState.get();
switch (current) {
case SELECTING:
case PENDING:
{
        if (!_interestState.compareAndSet(current,State.CHANGING))         continue;
        pending=current == State.PENDING;
        break;
      }
case UPDATING:
{
      Thread.yield();
      break;
    }
case CHANGING:
{
    int oldInterestOps=_interestOps;
    int newInterestOps;
    if (add)     newInterestOps=oldInterestOps | operation;
 else     newInterestOps=oldInterestOps & ~operation;
    if (isInputShutdown()) {
      newInterestOps&=~SelectionKey.OP_READ;
      if (add && (operation & SelectionKey.OP_READ) != 0)       changed=false;
    }
    if (isOutputShutdown()) {
      newInterestOps&=~SelectionKey.OP_WRITE;
      if (add && (operation & SelectionKey.OP_WRITE) != 0)       changed=false;
    }
    if (LOG.isDebugEnabled())     LOG.debug("changeInterests pending={} {}->{} for {}",pending,oldInterestOps,newInterestOps,this);
    if (newInterestOps != oldInterestOps)     _interestOps=newInterestOps;
    if (!_interestState.compareAndSet(current,State.SELECTING))     throw new IllegalStateException("Invalid state: " + current);
    submitKeyUpdate(!pending);
    return changed;
  }
default :
{
  throw new IllegalStateException();
}
}
}
}

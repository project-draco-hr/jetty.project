{
  while (true) {
    State current=_interestState.get();
    if (LOG.isDebugEnabled())     LOG.debug("Processing, state {} for {}",current,this);
switch (current) {
case UPDATE_PENDING:
case UPDATED:
{
        if (!_interestState.compareAndSet(current,State.LOCKED))         continue;
        int readyOps;
        try {
          readyOps=_key.readyOps();
          int oldInterestOps=_interestOps;
          int newInterestOps=oldInterestOps & ~readyOps;
          _interestOps=newInterestOps;
          if (LOG.isDebugEnabled())           LOG.debug("onSelected {}->{} for {}",oldInterestOps,newInterestOps,this);
        }
  finally {
          _interestState.set(State.UPDATE_PENDING);
        }
        boolean readable=(readyOps & SelectionKey.OP_READ) != 0;
        boolean writable=(readyOps & SelectionKey.OP_WRITE) != 0;
        if (readable) {
          if (writable)           return _runFillableCompleteWrite;
          return _runFillable;
        }
 else         if (writable) {
          return _runCompleteWrite;
        }
 else {
          return null;
        }
      }
case LOCKED:
{
      Thread.yield();
      break;
    }
default :
{
    throw new IllegalStateException("Invalid state: " + current);
  }
}
}
}

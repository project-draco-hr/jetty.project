{
  try {
    int oldInterestOps;
    int newInterestOps;
    try (SpinLock.Lock lock=_lock.lock()){
      _updatePending=false;
      oldInterestOps=_currentInterestOps;
      newInterestOps=_desiredInterestOps;
      if (oldInterestOps != newInterestOps) {
        _currentInterestOps=newInterestOps;
        _key.interestOps(newInterestOps);
      }
    }
     if (LOG.isDebugEnabled())     LOG.debug("Key interests updated {} -> {} on {}",oldInterestOps,newInterestOps,this);
  }
 catch (  CancelledKeyException x) {
    LOG.debug("Ignoring key update for concurrently closed channel {}",this);
    close();
  }
catch (  Throwable x) {
    LOG.warn("Ignoring key update for " + this,x);
    close();
  }
}

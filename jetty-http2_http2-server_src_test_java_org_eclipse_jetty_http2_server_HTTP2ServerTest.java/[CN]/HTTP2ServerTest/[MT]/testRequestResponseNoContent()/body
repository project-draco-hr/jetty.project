{
  final CountDownLatch latch=new CountDownLatch(3);
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      latch.countDown();
    }
  }
);
  ByteBufferPool.Lease lease=new ByteBufferPool.Lease(byteBufferPool);
  generator.control(lease,new PrefaceFrame());
  generator.control(lease,new SettingsFrame(new HashMap<>(),false));
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  generator.control(lease,new HeadersFrame(1,metaData,null,true));
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    for (    ByteBuffer buffer : lease.getByteBuffers()) {
      output.write(BufferUtil.toArray(buffer));
    }
    final AtomicReference<HeadersFrame> frameRef=new AtomicReference<>();
    Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
      @Override public void onSettings(      SettingsFrame frame){
        latch.countDown();
      }
      @Override public void onHeaders(      HeadersFrame frame){
        frameRef.set(frame);
        latch.countDown();
      }
    }
,4096,8192);
    parseResponse(client,parser);
    Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
    HeadersFrame response=frameRef.get();
    Assert.assertNotNull(response);
    MetaData.Response responseMetaData=(MetaData.Response)response.getMetaData();
    Assert.assertEquals(200,responseMetaData.getStatus());
  }
 }

{
  final long delay=1000;
  final AtomicBoolean broken=new AtomicBoolean();
  startServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      try {
        Thread.sleep(delay);
        broken.set(true);
      }
 catch (      InterruptedException x) {
        throw new InterruptedIOException();
      }
    }
  }
);
  server.stop();
  ServerConnector connector2=new ServerConnector(server,new HTTP2ServerConnectionFactory(new HttpConfiguration())){
    @Override protected SelectChannelEndPoint newEndPoint(    SocketChannel channel,    ManagedSelector selectSet,    SelectionKey key) throws IOException {
      return new SelectChannelEndPoint(channel,selectSet,key,getScheduler(),getIdleTimeout()){
        @Override public void write(        Callback callback,        ByteBuffer... buffers) throws IllegalStateException {
          if (broken.get())           callback.failed(new IOException("explicitly_thrown_by_test"));
 else           super.write(callback,buffers);
        }
      }
;
    }
  }
;
  server.addConnector(connector2);
  server.start();
  ByteBufferPool.Lease lease=new ByteBufferPool.Lease(byteBufferPool);
  generator.control(lease,new PrefaceFrame());
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  generator.control(lease,new HeadersFrame(1,metaData,null,true));
  try (Socket client=new Socket("localhost",connector2.getLocalPort())){
    OutputStream output=client.getOutputStream();
    for (    ByteBuffer buffer : lease.getByteBuffers())     output.write(BufferUtil.toArray(buffer));
    Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(),4096,8192);
    boolean closed=parseResponse(client,parser,2 * delay);
    Assert.assertTrue(closed);
  }
 }

{
  startServer(new HttpServlet(){
  }
);
  String host="localhost";
  int port=connector.getLocalPort();
  HttpFields fields=new HttpFields();
  MetaData.Request metaData=new MetaData.Request(HttpMethod.GET.asString(),HttpScheme.HTTP,new HostPortHttpField(host + ":" + port),path,HttpVersion.HTTP_2,fields);
  HeadersFrame request=new HeadersFrame(1,metaData,null,true);
  ByteBufferPool.Lease lease=new ByteBufferPool.Lease(byteBufferPool);
  generator.control(lease,request);
  try (Socket client=new Socket(host,port)){
    OutputStream output=client.getOutputStream();
    for (    ByteBuffer buffer : lease.getByteBuffers()) {
      output.write(BufferUtil.toArray(buffer));
    }
    final CountDownLatch latch=new CountDownLatch(1);
    Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
      @Override public boolean onGoAway(      GoAwayFrame frame){
        latch.countDown();
        return false;
      }
    }
,4096,8192);
    parseResponse(client,parser);
    Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  }
 }

{
  final CountDownLatch serverLatch=new CountDownLatch(1);
  startServer(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      if (priorityFrame != null) {
        PriorityFrame priority=frame.getPriority();
        Assert.assertNotNull(priority);
        Assert.assertEquals(priorityFrame.getStreamId(),priority.getStreamId());
        Assert.assertEquals(priorityFrame.getParentStreamId(),priority.getParentStreamId());
        Assert.assertEquals(priorityFrame.getWeight(),priority.getWeight());
        Assert.assertEquals(priorityFrame.isExclusive(),priority.isExclusive());
      }
      serverLatch.countDown();
      MetaData.Response metaData=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),metaData,null,true);
      stream.headers(responseFrame,Callback.NOOP);
      return null;
    }
  }
);
  generator=new Generator(byteBufferPool,4096,4);
  ByteBufferPool.Lease lease=frames.call();
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    for (    ByteBuffer buffer : lease.getByteBuffers())     output.write(BufferUtil.toArray(buffer));
    output.flush();
    Assert.assertTrue(serverLatch.await(5,TimeUnit.SECONDS));
    final CountDownLatch clientLatch=new CountDownLatch(1);
    Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
      @Override public void onHeaders(      HeadersFrame frame){
        if (frame.isEndStream())         clientLatch.countDown();
      }
    }
,4096,8192);
    boolean closed=parseResponse(client,parser);
    Assert.assertTrue(clientLatch.await(5,TimeUnit.SECONDS));
    Assert.assertFalse(closed);
  }
 }

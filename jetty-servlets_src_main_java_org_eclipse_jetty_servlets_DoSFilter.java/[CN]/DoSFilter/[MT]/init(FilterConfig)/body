{
  _context=filterConfig.getServletContext();
  _queue=new Queue[getMaxPriority() + 1];
  _listener=new ContinuationListener[getMaxPriority() + 1];
  for (int p=0; p < _queue.length; p++) {
    _queue[p]=new ConcurrentLinkedQueue<Continuation>();
    final int priority=p;
    _listener[p]=new ContinuationListener(){
      public void onComplete(      Continuation continuation){
      }
      public void onTimeout(      Continuation continuation){
        _queue[priority].remove(continuation);
      }
    }
;
  }
  _rateTrackers.clear();
  int baseRateLimit=__DEFAULT_MAX_REQUESTS_PER_SEC;
  if (filterConfig.getInitParameter(MAX_REQUESTS_PER_S_INIT_PARAM) != null)   baseRateLimit=Integer.parseInt(filterConfig.getInitParameter(MAX_REQUESTS_PER_S_INIT_PARAM));
  _maxRequestsPerSec=baseRateLimit;
  long delay=__DEFAULT_DELAY_MS;
  if (filterConfig.getInitParameter(DELAY_MS_INIT_PARAM) != null)   delay=Integer.parseInt(filterConfig.getInitParameter(DELAY_MS_INIT_PARAM));
  _delayMs=delay;
  _throttledRequests=__DEFAULT_THROTTLE;
  if (filterConfig.getInitParameter(THROTTLED_REQUESTS_INIT_PARAM) != null)   _throttledRequests=Integer.parseInt(filterConfig.getInitParameter(THROTTLED_REQUESTS_INIT_PARAM));
  _passes=new Semaphore(_throttledRequests,true);
  long wait=__DEFAULT_WAIT_MS;
  if (filterConfig.getInitParameter(MAX_WAIT_INIT_PARAM) != null)   wait=Integer.parseInt(filterConfig.getInitParameter(MAX_WAIT_INIT_PARAM));
  _maxWaitMs=wait;
  long suspend=__DEFAULT_THROTTLE_MS;
  if (filterConfig.getInitParameter(THROTTLE_MS_INIT_PARAM) != null)   suspend=Integer.parseInt(filterConfig.getInitParameter(THROTTLE_MS_INIT_PARAM));
  _throttleMs=suspend;
  long maxRequestMs=__DEFAULT_MAX_REQUEST_MS_INIT_PARAM;
  if (filterConfig.getInitParameter(MAX_REQUEST_MS_INIT_PARAM) != null)   maxRequestMs=Long.parseLong(filterConfig.getInitParameter(MAX_REQUEST_MS_INIT_PARAM));
  _maxRequestMs=maxRequestMs;
  long maxIdleTrackerMs=__DEFAULT_MAX_IDLE_TRACKER_MS_INIT_PARAM;
  if (filterConfig.getInitParameter(MAX_IDLE_TRACKER_MS_INIT_PARAM) != null)   maxIdleTrackerMs=Long.parseLong(filterConfig.getInitParameter(MAX_IDLE_TRACKER_MS_INIT_PARAM));
  _maxIdleTrackerMs=maxIdleTrackerMs;
  _whitelistStr="";
  if (filterConfig.getInitParameter(IP_WHITELIST_INIT_PARAM) != null)   _whitelistStr=filterConfig.getInitParameter(IP_WHITELIST_INIT_PARAM);
  initWhitelist();
  String tmp=filterConfig.getInitParameter(INSERT_HEADERS_INIT_PARAM);
  _insertHeaders=tmp == null || Boolean.parseBoolean(tmp);
  tmp=filterConfig.getInitParameter(TRACK_SESSIONS_INIT_PARAM);
  _trackSessions=tmp == null || Boolean.parseBoolean(tmp);
  tmp=filterConfig.getInitParameter(REMOTE_PORT_INIT_PARAM);
  _remotePort=tmp != null && Boolean.parseBoolean(tmp);
  _requestTimeoutQ.setNow();
  _requestTimeoutQ.setDuration(_maxRequestMs);
  _trackerTimeoutQ.setNow();
  _trackerTimeoutQ.setDuration(_maxIdleTrackerMs);
  _running=true;
  _timerThread=(new Thread(){
    public void run(){
      try {
        while (_running) {
          long now;
synchronized (_requestTimeoutQ) {
            now=_requestTimeoutQ.setNow();
            _requestTimeoutQ.tick();
          }
synchronized (_trackerTimeoutQ) {
            _trackerTimeoutQ.setNow(now);
            _trackerTimeoutQ.tick();
          }
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
            Log.ignore(e);
          }
        }
      }
  finally {
        Log.info("DoSFilter timer exited");
      }
    }
  }
);
  _timerThread.start();
}

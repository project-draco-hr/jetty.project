{
  if (!isEnabled()) {
    filterChain.doFilter(request,response);
    return;
  }
  RateTracker tracker=(RateTracker)request.getAttribute(__TRACKER);
  if (tracker == null) {
    if (LOG.isDebugEnabled())     LOG.debug("Filtering {}",request);
    tracker=getRateTracker(request);
    final boolean overRateLimit=tracker.isRateExceeded(System.currentTimeMillis());
    if (!overRateLimit) {
      if (LOG.isDebugEnabled())       LOG.debug("Allowing {}",request);
      doFilterChain(filterChain,request,response);
      return;
    }
    long delayMs=getDelayMs();
    boolean insertHeaders=isInsertHeaders();
switch ((int)delayMs) {
case -1:
{
        LOG.warn("DOS ALERT: Request rejected ip={}, session={}, user={}",request.getRemoteAddr(),request.getRequestedSessionId(),request.getUserPrincipal());
        if (insertHeaders)         response.addHeader("DoSFilter","unavailable");
        response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
        return;
      }
case 0:
{
      LOG.warn("DOS ALERT: Request throttled ip={}, session={}, user={}",request.getRemoteAddr(),request.getRequestedSessionId(),request.getUserPrincipal());
      request.setAttribute(__TRACKER,tracker);
      break;
    }
default :
{
    LOG.warn("DOS ALERT: Request delayed={}ms, ip={}, session={}, user={}",delayMs,request.getRemoteAddr(),request.getRequestedSessionId(),request.getUserPrincipal());
    if (insertHeaders)     response.addHeader("DoSFilter","delayed");
    request.setAttribute(__TRACKER,tracker);
    AsyncContext asyncContext=request.startAsync();
    if (delayMs > 0)     asyncContext.setTimeout(delayMs);
    asyncContext.addListener(new DoSTimeoutAsyncListener());
    return;
  }
}
}
if (LOG.isDebugEnabled()) LOG.debug("Throttling {}",request);
boolean accepted=false;
try {
accepted=_passes.tryAcquire(getMaxWaitMs(),TimeUnit.MILLISECONDS);
if (!accepted) {
Boolean throttled=(Boolean)request.getAttribute(__THROTTLED);
long throttleMs=getThrottleMs();
if (throttled != Boolean.TRUE && throttleMs > 0) {
  int priority=getPriority(request,tracker);
  request.setAttribute(__THROTTLED,Boolean.TRUE);
  if (isInsertHeaders())   response.addHeader("DoSFilter","throttled");
  AsyncContext asyncContext=request.startAsync();
  request.setAttribute(_suspended,Boolean.TRUE);
  if (throttleMs > 0)   asyncContext.setTimeout(throttleMs);
  asyncContext.addListener(_listeners[priority]);
  _queues[priority].add(asyncContext);
  if (LOG.isDebugEnabled())   LOG.debug("Throttled {}, {}ms",request,throttleMs);
  return;
}
Boolean resumed=(Boolean)request.getAttribute(_resumed);
if (resumed == Boolean.TRUE) {
  _passes.acquire();
  accepted=true;
}
}
if (accepted) {
if (LOG.isDebugEnabled()) LOG.debug("Allowing {}",request);
doFilterChain(filterChain,request,response);
}
 else {
if (LOG.isDebugEnabled()) LOG.debug("Rejecting {}",request);
if (isInsertHeaders()) response.addHeader("DoSFilter","unavailable");
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
}
}
 catch (InterruptedException e) {
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
}
 finally {
if (accepted) {
for (int p=_queues.length - 1; p >= 0; --p) {
  AsyncContext asyncContext=_queues[p].poll();
  if (asyncContext != null) {
    ServletRequest candidate=asyncContext.getRequest();
    Boolean suspended=(Boolean)candidate.getAttribute(_suspended);
    if (suspended == Boolean.TRUE) {
      if (LOG.isDebugEnabled())       LOG.debug("Resuming {}",request);
      candidate.setAttribute(_resumed,Boolean.TRUE);
      asyncContext.dispatch();
      break;
    }
  }
}
_passes.release();
}
}
}

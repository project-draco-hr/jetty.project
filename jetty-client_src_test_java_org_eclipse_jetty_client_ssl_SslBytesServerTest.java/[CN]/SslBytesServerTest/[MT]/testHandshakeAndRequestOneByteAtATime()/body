{
  final SSLSocket client=newClient();
  Future<Object> handshake=threadPool.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      client.startHandshake();
      return null;
    }
  }
);
  TLSRecord record=proxy.readFromClient();
  for (  byte b : record.getBytes())   proxy.flushToServer(5,b);
  record=proxy.readFromServer();
  proxy.flushToClient(record);
  record=proxy.readFromClient();
  for (  byte b : record.getBytes())   proxy.flushToServer(5,b);
  record=proxy.readFromClient();
  for (  byte b : record.getBytes())   proxy.flushToServer(5,b);
  record=proxy.readFromClient();
  for (  byte b : record.getBytes())   proxy.flushToServer(5,b);
  record=proxy.readFromServer();
  proxy.flushToClient(record);
  record=proxy.readFromServer();
  proxy.flushToClient(record);
  Assert.assertNull(handshake.get(1,TimeUnit.SECONDS));
  Future<Object> request=threadPool.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      OutputStream clientOutput=client.getOutputStream();
      clientOutput.write(("" + "GET / HTTP/1.1\r\n" + "Host: localhost\r\n"+ "\r\n").getBytes(StandardCharsets.UTF_8));
      clientOutput.flush();
      return null;
    }
  }
);
  record=proxy.readFromClient();
  for (  byte b : record.getBytes())   proxy.flushToServer(5,b);
  Assert.assertNull(request.get(1,TimeUnit.SECONDS));
  record=proxy.readFromServer();
  Assert.assertEquals(TLSRecord.Type.APPLICATION,record.getType());
  proxy.flushToClient(record);
  BufferedReader reader=new BufferedReader(new InputStreamReader(client.getInputStream(),StandardCharsets.UTF_8));
  String line=reader.readLine();
  Assert.assertNotNull(line);
  Assert.assertTrue(line.startsWith("HTTP/1.1 200 "));
  while ((line=reader.readLine()) != null) {
    if (line.trim().length() == 0)     break;
  }
  TimeUnit.MILLISECONDS.sleep(1000);
  Assert.assertThat(sslFills.get(),Matchers.lessThan(1000));
  Assert.assertThat(sslFlushes.get(),Matchers.lessThan(20));
  Assert.assertThat(httpParses.get(),Matchers.lessThan(500));
  client.close();
  record=proxy.readFromClient();
  for (  byte b : record.getBytes())   proxy.flushToServer(5,b);
  record=proxy.readFromClient();
  Assert.assertNull(String.valueOf(record),record);
  proxy.flushToServer(record);
  record=proxy.readFromServer();
  if (record != null) {
    Assert.assertEquals(record.getType(),Type.ALERT);
    record=proxy.readFromServer();
    Assert.assertNull(String.valueOf(record),record);
  }
}

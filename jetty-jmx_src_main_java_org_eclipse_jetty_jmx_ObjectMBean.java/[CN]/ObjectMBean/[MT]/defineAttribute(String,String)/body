{
  String description="";
  boolean writable=true;
  boolean onMBean=false;
  boolean convert=false;
  if (metaData != null) {
    String[] tokens=metaData.split(":",3);
    for (int t=0; t < tokens.length - 1; t++) {
      tokens[t]=tokens[t].trim();
      if ("RO".equals(tokens[t]))       writable=false;
 else {
        onMBean=("MMBean".equalsIgnoreCase(tokens[t]) || "MBean".equalsIgnoreCase(tokens[t]));
        convert=("MMBean".equalsIgnoreCase(tokens[t]) || "MObject".equalsIgnoreCase(tokens[t]));
      }
    }
    description=tokens[tokens.length - 1];
  }
  String uName=name.substring(0,1).toUpperCase() + name.substring(1);
  Class oClass=onMBean ? this.getClass() : _managed.getClass();
  if (Log.isDebugEnabled())   Log.debug("defineAttribute " + name + " "+ onMBean+ ":"+ writable+ ":"+ oClass+ ":"+ description);
  Class type=null;
  Method getter=null;
  Method setter=null;
  Method[] methods=oClass.getMethods();
  for (int m=0; m < methods.length; m++) {
    if ((methods[m].getModifiers() & Modifier.PUBLIC) == 0)     continue;
    if (methods[m].getName().equals("get" + uName) && methods[m].getParameterTypes().length == 0) {
      if (getter != null)       throw new IllegalArgumentException("Multiple getters for attr " + name + " in "+ oClass);
      getter=methods[m];
      if (type != null && !type.equals(methods[m].getReturnType()))       throw new IllegalArgumentException("Type conflict for attr " + name + " in "+ oClass);
      type=methods[m].getReturnType();
    }
    if (methods[m].getName().equals("is" + uName) && methods[m].getParameterTypes().length == 0) {
      if (getter != null)       throw new IllegalArgumentException("Multiple getters for attr " + name + " in "+ oClass);
      getter=methods[m];
      if (type != null && !type.equals(methods[m].getReturnType()))       throw new IllegalArgumentException("Type conflict for attr " + name + " in "+ oClass);
      type=methods[m].getReturnType();
    }
    if (writable && methods[m].getName().equals("set" + uName) && methods[m].getParameterTypes().length == 1) {
      if (setter != null)       throw new IllegalArgumentException("Multiple setters for attr " + name + " in "+ oClass);
      setter=methods[m];
      if (type != null && !type.equals(methods[m].getParameterTypes()[0]))       throw new IllegalArgumentException("Type conflict for attr " + name + " in "+ oClass);
      type=methods[m].getParameterTypes()[0];
    }
  }
  if (convert && type.isPrimitive() && !type.isArray())   throw new IllegalArgumentException("Cannot convert primative " + name);
  if (getter == null && setter == null)   throw new IllegalArgumentException("No getter or setters found for " + name + " in "+ oClass);
  try {
    _getters.put(name,getter);
    _setters.put(name,setter);
    MBeanAttributeInfo info=null;
    if (convert) {
      _convert.add(name);
      if (type.isArray())       info=new MBeanAttributeInfo(name,OBJECT_NAME_ARRAY_CLASS,description,getter != null,setter != null,getter != null && getter.getName().startsWith("is"));
 else       info=new MBeanAttributeInfo(name,OBJECT_NAME_CLASS,description,getter != null,setter != null,getter != null && getter.getName().startsWith("is"));
    }
 else     info=new MBeanAttributeInfo(name,description,getter,setter);
    return info;
  }
 catch (  Exception e) {
    Log.warn(Log.EXCEPTION,e);
    throw new IllegalArgumentException(e.toString());
  }
}

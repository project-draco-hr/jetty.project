{
  String[] tokens=metaData.split(":",3);
  int i=tokens.length - 1;
  String description=tokens[i--];
  String impact_name=i < 0 ? "UNKNOWN" : tokens[i--].trim();
  if (i == 0)   tokens[0]=tokens[0].trim();
  boolean onMBean=i == 0 && ("MBean".equalsIgnoreCase(tokens[0]) || "MMBean".equalsIgnoreCase(tokens[0]));
  boolean convert=i == 0 && ("MObject".equalsIgnoreCase(tokens[0]) || "MMBean".equalsIgnoreCase(tokens[0]));
  if (Log.isDebugEnabled())   Log.debug("defineOperation " + signature + " "+ onMBean+ ":"+ impact_name+ ":"+ description);
  Class oClass=onMBean ? this.getClass() : _managed.getClass();
  try {
    int impact=MBeanOperationInfo.UNKNOWN;
    if (impact_name == null || impact_name.equals("UNKNOWN"))     impact=MBeanOperationInfo.UNKNOWN;
 else     if (impact_name.equals("ACTION"))     impact=MBeanOperationInfo.ACTION;
 else     if (impact_name.equals("INFO"))     impact=MBeanOperationInfo.INFO;
 else     if (impact_name.equals("ACTION_INFO"))     impact=MBeanOperationInfo.ACTION_INFO;
 else     Log.warn("Unknown impact '" + impact_name + "' for "+ signature);
    String[] parts=signature.split("[\\(\\)]");
    String method_name=parts[0];
    String arguments=parts.length == 2 ? parts[1] : null;
    String[] args=arguments == null ? new String[0] : arguments.split(" *, *");
    Class[] types=new Class[args.length];
    MBeanParameterInfo[] pInfo=new MBeanParameterInfo[args.length];
    signature=method_name;
    for (i=0; i < args.length; i++) {
      Class type=TypeUtil.fromName(args[i]);
      if (type == null)       type=Thread.currentThread().getContextClassLoader().loadClass(args[i]);
      types[i]=type;
      args[i]=type.isPrimitive() ? TypeUtil.toName(type) : args[i];
      signature+=(i > 0 ? "," : "(") + args[i];
    }
    signature+=(i > 0 ? ")" : "()");
    for (i=0; i < args.length; i++) {
      String param_desc=bundle.getString(signature + "[" + i+ "]");
      parts=param_desc.split(" *: *",2);
      if (Log.isDebugEnabled())       Log.debug(parts[0] + ": " + parts[1]);
      pInfo[i]=new MBeanParameterInfo(parts[0].trim(),args[i],parts[1].trim());
    }
    Method method=oClass.getMethod(method_name,types);
    Class returnClass=method.getReturnType();
    _methods.put(signature,method);
    if (convert)     _convert.add(signature);
    return new MBeanOperationInfo(method_name,description,pInfo,returnClass.isPrimitive() ? TypeUtil.toName(returnClass) : (returnClass.getName()),impact);
  }
 catch (  Exception e) {
    Log.warn("Operation '" + signature + "'",e);
    throw new IllegalArgumentException(e.toString());
  }
}

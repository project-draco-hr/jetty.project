{
  String name=attributeAnnotation.name();
  if ("".equals(name)) {
    name=toVariableName(method.getName());
  }
  if (_attributes.contains(name)) {
    return null;
  }
  String description=attributeAnnotation.value();
  boolean readonly=attributeAnnotation.readonly();
  boolean onMBean=attributeAnnotation.proxied();
  boolean convert=false;
  Class<?> return_type=method.getReturnType();
  Class<?> component_type=return_type;
  while (component_type.isArray()) {
    component_type=component_type.getComponentType();
  }
  convert=isAnnotationPresent(component_type,ManagedObject.class);
  String uName=name.substring(0,1).toUpperCase(Locale.ENGLISH) + name.substring(1);
  Class<?> oClass=onMBean ? this.getClass() : _managed.getClass();
  LOG.debug("defineAttribute {} {}:{}:{}:{}",name,onMBean,readonly,oClass,description);
  Method setter=null;
  if (!readonly) {
    String declaredSetter=attributeAnnotation.setter();
    LOG.debug("DeclaredSetter: {}",declaredSetter);
    Method[] methods=oClass.getMethods();
    for (int m=0; m < methods.length; m++) {
      if ((methods[m].getModifiers() & Modifier.PUBLIC) == 0)       continue;
      if (!"".equals(declaredSetter)) {
        if (methods[m].getName().equals(declaredSetter) && methods[m].getParameterTypes().length == 1) {
          if (setter != null) {
            LOG.warn("Multiple setters for mbean attr {} in {}",name,oClass);
            continue;
          }
          setter=methods[m];
          if (!component_type.equals(methods[m].getParameterTypes()[0])) {
            LOG.warn("Type conflict for mbean attr {} in {}",name,oClass);
            continue;
          }
          LOG.debug("Declared Setter: " + declaredSetter);
        }
      }
      if (methods[m].getName().equals("set" + uName) && methods[m].getParameterTypes().length == 1) {
        if (setter != null) {
          LOG.warn("Multiple setters for mbean attr {} in {}",name,oClass);
          continue;
        }
        setter=methods[m];
        if (!return_type.equals(methods[m].getParameterTypes()[0])) {
          LOG.warn("Type conflict for mbean attr {} in {}",name,oClass);
          continue;
        }
      }
    }
  }
  if (convert) {
    if (component_type == null) {
      LOG.warn("No mbean type for {} on {}",name,_managed.getClass());
      return null;
    }
    if (component_type.isPrimitive() && !component_type.isArray()) {
      LOG.warn("Cannot convert mbean primative {}",name);
      return null;
    }
    LOG.debug("passed convert checks {} for type {}",name,component_type);
  }
  try {
    _getters.put(name,method);
    _setters.put(name,setter);
    MBeanAttributeInfo info=null;
    if (convert) {
      _convert.add(name);
      if (component_type.isArray()) {
        info=new MBeanAttributeInfo(name,OBJECT_NAME_ARRAY_CLASS,description,true,setter != null,method.getName().startsWith("is"));
      }
 else {
        info=new MBeanAttributeInfo(name,OBJECT_NAME_CLASS,description,true,setter != null,method.getName().startsWith("is"));
      }
    }
 else {
      info=new MBeanAttributeInfo(name,description,method,setter);
    }
    _attributes.add(name);
    return info;
  }
 catch (  Exception e) {
    LOG.warn(e);
    throw new IllegalArgumentException(e.toString());
  }
}

{
  try {
    if (_info == null) {
      String desc=null;
      Object attributes=null;
      Object constructors=null;
      Object operations=null;
      Object notifications=null;
      Class<?> o_class=_managed.getClass();
      Object influences=findInfluences(null,_managed.getClass());
      LOG.debug("Influence Count: " + LazyList.size(influences));
      ManagedObject primary=o_class.getAnnotation(ManagedObject.class);
      desc=primary.value();
      for (int i=0; i < LazyList.size(influences); i++) {
        Class<?> oClass=(Class<?>)LazyList.get(influences,i);
        ManagedObject typeAnnotation=oClass.getAnnotation(ManagedObject.class);
        LOG.debug("Influenced by: " + oClass.getCanonicalName());
        if (typeAnnotation == null) {
          LOG.debug("Annotations not found for: " + oClass.getCanonicalName());
          continue;
        }
        try {
          for (          Field field : oClass.getDeclaredFields()) {
            LOG.debug("Checking: " + field.getName());
            ManagedAttribute fieldAnnotation=field.getAnnotation(ManagedAttribute.class);
            if (fieldAnnotation != null) {
              LOG.debug("Field Annotation found for: " + field.getName());
              attributes=LazyList.add(attributes,defineAttribute(field.getName(),fieldAnnotation));
            }
          }
          for (          Method method : oClass.getDeclaredMethods()) {
            ManagedAttribute methodAttributeAnnotation=method.getAnnotation(ManagedAttribute.class);
            if (methodAttributeAnnotation != null) {
              LOG.debug("Attribute Annotation found for: " + method.getName());
              attributes=LazyList.add(attributes,defineAttribute(method.getName(),methodAttributeAnnotation));
            }
            ManagedOperation methodOperationAnnotation=method.getAnnotation(ManagedOperation.class);
            if (methodOperationAnnotation != null) {
              LOG.debug("Method Annotation found for: " + method.getName());
              operations=LazyList.add(operations,defineOperation(method,methodOperationAnnotation));
            }
          }
        }
 catch (        MissingResourceException e) {
          LOG.ignore(e);
        }
      }
      _info=new MBeanInfo(o_class.getName(),desc,(MBeanAttributeInfo[])LazyList.toArray(attributes,MBeanAttributeInfo.class),(MBeanConstructorInfo[])LazyList.toArray(constructors,MBeanConstructorInfo.class),(MBeanOperationInfo[])LazyList.toArray(operations,MBeanOperationInfo.class),(MBeanNotificationInfo[])LazyList.toArray(notifications,MBeanNotificationInfo.class));
    }
  }
 catch (  RuntimeException e) {
    LOG.warn(e);
    throw e;
  }
  return _info;
}

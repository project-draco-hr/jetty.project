{
  File file=MavenTestingUtils.getTestResourceFile(filename);
  TextFile textFile=new TextFile(file);
  List<String> expectedXmls=new ArrayList<>();
  for (  String line : textFile) {
    if (line.startsWith("XML|")) {
      expectedXmls.add(getValue(line));
    }
  }
  List<String> actualXmls=new ArrayList<>();
  for (  File xml : args.getXmlFiles()) {
    actualXmls.add(baseHome.toShortForm(xml));
  }
  assertOrdered("XML Resolution Order",expectedXmls,actualXmls);
  Set<String> expectedLibs=new HashSet<>();
  for (  String line : textFile) {
    if (line.startsWith("LIB|")) {
      expectedLibs.add(getValue(line));
    }
  }
  Set<String> actualLibs=new HashSet<>();
  for (  File path : args.getClasspath()) {
    actualLibs.add(baseHome.toShortForm(path));
  }
  assertContainsUnordered("Libs",expectedLibs,actualLibs);
  Set<String> expectedProperties=new HashSet<>();
  for (  String line : textFile) {
    if (line.startsWith("PROP|")) {
      expectedProperties.add(getValue(line));
    }
  }
  Set<String> actualProperties=new HashSet<>();
  @SuppressWarnings("unchecked") Enumeration<String> nameEnum=(Enumeration<String>)args.getProperties().propertyNames();
  while (nameEnum.hasMoreElements()) {
    String name=nameEnum.nextElement();
    if ("jetty.home".equals(name) || "jetty.base".equals(name)) {
      continue;
    }
    String value=args.getProperties().getProperty(name);
    actualProperties.add(name + "=" + value);
  }
  assertContainsUnordered("Properties",expectedProperties,actualProperties);
  Set<String> expectedDownloads=new HashSet<>();
  for (  String line : textFile) {
    if (line.startsWith("DOWNLOAD|")) {
      expectedDownloads.add(getValue(line));
    }
  }
  Set<String> actualDownloads=new HashSet<>();
  for (  DownloadArg darg : args.getDownloads()) {
    actualDownloads.add(String.format("%s:%s",darg.uri,darg.location));
  }
  assertContainsUnordered("Downloads",expectedDownloads,actualDownloads);
}

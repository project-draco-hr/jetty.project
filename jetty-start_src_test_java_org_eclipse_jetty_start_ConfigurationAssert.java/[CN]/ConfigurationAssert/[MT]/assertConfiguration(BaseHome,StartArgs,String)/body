{
  File testResourcesDir=MavenTestingUtils.getTestResourcesDir();
  File file=MavenTestingUtils.getTestResourceFile(filename);
  TextFile textFile=new TextFile(file.toPath());
  List<String> expectedXmls=new ArrayList<>();
  for (  String line : textFile) {
    if (line.startsWith("XML|")) {
      expectedXmls.add(FS.separators(getValue(line)));
    }
  }
  List<String> actualXmls=new ArrayList<>();
  for (  Path xml : args.getXmlFiles()) {
    actualXmls.add(shorten(baseHome,xml,testResourcesDir));
  }
  assertOrdered("XML Resolution Order",expectedXmls,actualXmls);
  List<String> expectedLibs=new ArrayList<>();
  for (  String line : textFile) {
    if (line.startsWith("LIB|")) {
      expectedLibs.add(FS.separators(getValue(line)));
    }
  }
  List<String> actualLibs=new ArrayList<>();
  for (  File path : args.getClasspath()) {
    actualLibs.add(shorten(baseHome,path.toPath(),testResourcesDir));
  }
  assertContainsUnordered("Libs",expectedLibs,actualLibs);
  Set<String> expectedProperties=new HashSet<>();
  for (  String line : textFile) {
    if (line.startsWith("PROP|")) {
      expectedProperties.add(getValue(line));
    }
  }
  List<String> actualProperties=new ArrayList<>();
  for (  Prop prop : args.getProperties()) {
    String name=prop.key;
    if ("jetty.home".equals(name) || "jetty.base".equals(name) || "user.dir".equals(name)|| prop.origin.equals(Props.ORIGIN_SYSPROP)) {
      continue;
    }
    actualProperties.add(prop.key + "=" + args.getProperties().expand(prop.value));
  }
  assertContainsUnordered("Properties",expectedProperties,actualProperties);
  List<String> expectedDownloads=new ArrayList<>();
  for (  String line : textFile) {
    if (line.startsWith("DOWNLOAD|")) {
      expectedDownloads.add(getValue(line));
    }
  }
  List<String> actualDownloads=new ArrayList<>();
  for (  FileArg darg : args.getFiles()) {
    if (darg.uri != null) {
      actualDownloads.add(String.format("%s:%s",darg.uri,darg.location));
    }
  }
  assertContainsUnordered("Downloads",expectedDownloads,actualDownloads);
  List<String> expectedFiles=new ArrayList<>();
  for (  String line : textFile) {
    if (line.startsWith("FILE|")) {
      expectedFiles.add(getValue(line));
    }
  }
  List<String> actualFiles=new ArrayList<>();
  for (  FileArg farg : args.getFiles()) {
    if (farg.uri == null) {
      actualFiles.add(farg.location);
    }
  }
  assertContainsUnordered("Files/Dirs",expectedFiles,actualFiles);
}

{
  long timeout=1000;
  start(new TimeoutHandler(2 * timeout));
  client.stop();
  final AtomicBoolean sslIdle=new AtomicBoolean();
  client=new HttpClient(new HttpClientTransportOverHTTP(){
    @Override public HttpDestination newHttpDestination(    Origin origin){
      return new HttpDestinationOverHTTP(getHttpClient(),origin){
        @Override protected ClientConnectionFactory newSslClientConnectionFactory(        ClientConnectionFactory connectionFactory){
          HttpClient client=getHttpClient();
          return new SslClientConnectionFactory(client.getSslContextFactory(),client.getByteBufferPool(),client.getExecutor(),connectionFactory){
            @Override protected SslConnection newSslConnection(            ByteBufferPool byteBufferPool,            Executor executor,            EndPoint endPoint,            SSLEngine engine){
              return new SslConnection(byteBufferPool,executor,endPoint,engine){
                @Override protected boolean onReadTimeout(){
                  sslIdle.set(true);
                  return super.onReadTimeout();
                }
              }
;
            }
          }
;
        }
      }
;
    }
  }
,sslContextFactory);
  client.setIdleTimeout(timeout);
  client.start();
  try {
    client.newRequest("localhost",connector.getLocalPort()).scheme(scheme).send();
    Assert.fail();
  }
 catch (  Exception x) {
    Assert.assertFalse(sslIdle.get());
    Assert.assertThat(x.getCause(),Matchers.instanceOf(TimeoutException.class));
  }
}

{
  super(pojo,method);
  setReturnType(method.getReturnType(),encoders);
  Class<?> paramTypes[]=method.getParameterTypes();
  int len=paramTypes.length;
  for (int i=0; i < len; i++) {
    Class<?> paramType=paramTypes[i];
    String pathParam=getPathParam(paramType);
    if (StringUtil.isNotBlank(pathParam)) {
      ParamRef paramRef=new ParamRef(i,paramType);
      Decoder decoder=decoders.getDecoder(paramType);
      if (!(decoder instanceof Decoder.Text)) {
        throw new WebSocketException("Unable to convert to PathParam with type: " + paramType);
      }
      paramRef.decoder=decoder;
      if (pathParams.containsKey(pathParam)) {
        throw new InvalidSignatureException("WebSocketPathParam of value [" + pathParam + "] is defined more than once");
      }
      pathParams.put(pathParam,paramRef);
      continue;
    }
    if (Session.class.isAssignableFrom(paramType)) {
      if (paramSession != null) {
        throw new InvalidSignatureException("Session cannot appear multiple times as a parameter");
      }
      paramSession=new ParamRef(i,paramType);
      continue;
    }
    if (Boolean.class.isAssignableFrom(paramType)) {
      if (paramIsLast != null) {
        throw new InvalidSignatureException("Boolean isLast cannot appear multiple times as a parameter");
      }
      paramIsLast=new ParamRef(i,paramType);
      continue;
    }
    if (isPongFormat(paramType)) {
      if (paramFormat != null) {
        throw new InvalidSignatureException("Multiple Message Formats cannot appear as a separate parameters");
      }
      paramFormat=new ParamRef(i,paramType);
      continue;
    }
    Decoder decoder=decoders.getDecoder(paramType);
    if (decoder != null) {
      if (paramFormat != null) {
        throw new InvalidSignatureException("Multiple Message Formats cannot appear as a separate parameters");
      }
      paramFormat=new ParamRef(i,paramType);
      paramFormat.decoder=decoder;
      continue;
    }
    throw new InvalidSignatureException("Unknown parameter type: " + paramType);
  }
}

{
  Set<String> candidateIds=getAllCandidateExpiredSessionIds();
  Connection connection=null;
  try {
    if (LOG.isDebugEnabled())     LOG.debug(getWorkerName() + "- Scavenge sweep started at " + System.currentTimeMillis());
    if (_lastScavengeTime > 0) {
      connection=getConnection();
      connection.setAutoCommit(true);
      Set<String> expiredSessionIds=new HashSet<String>();
      long lowerBound=(_lastScavengeTime - _scavengeIntervalMs);
      long upperBound=_lastScavengeTime;
      if (LOG.isDebugEnabled())       LOG.debug(getWorkerName() + "- Pass 1: Searching for sessions expired between " + lowerBound+ " and "+ upperBound);
      try (PreparedStatement statement=connection.prepareStatement(_selectBoundedExpiredSessions)){
        statement.setString(1,getWorkerName());
        statement.setLong(2,lowerBound);
        statement.setLong(3,upperBound);
        try (ResultSet result=statement.executeQuery()){
          while (result.next()) {
            String sessionId=result.getString(_sessionTableSchema.getIdColumn());
            expiredSessionIds.add(sessionId);
            if (LOG.isDebugEnabled())             LOG.debug("Found expired sessionId=" + sessionId);
          }
        }
       }
       scavengeSessions(candidateIds,expiredSessionIds,false);
      try (PreparedStatement selectExpiredSessions=connection.prepareStatement(_selectExpiredSessions)){
        expiredSessionIds.clear();
        upperBound=_lastScavengeTime - (2 * _scavengeIntervalMs);
        if (upperBound > 0) {
          if (LOG.isDebugEnabled())           LOG.debug(getWorkerName() + "- Pass 2: Searching for sessions expired before " + upperBound);
          selectExpiredSessions.setLong(1,upperBound);
          try (ResultSet result=selectExpiredSessions.executeQuery()){
            while (result.next()) {
              String sessionId=result.getString(_sessionTableSchema.getIdColumn());
              String lastNode=result.getString(_sessionTableSchema.getLastNodeColumn());
              if ((getWorkerName() == null && lastNode == null) || (getWorkerName() != null && getWorkerName().equals(lastNode)))               expiredSessionIds.add(sessionId);
              if (LOG.isDebugEnabled())               LOG.debug("Found expired sessionId=" + sessionId + " last managed by "+ getWorkerName());
            }
          }
           scavengeSessions(candidateIds,expiredSessionIds,false);
        }
        upperBound=_lastScavengeTime - (3 * _scavengeIntervalMs);
        expiredSessionIds.clear();
        if (upperBound > 0) {
          if (LOG.isDebugEnabled())           LOG.debug(getWorkerName() + "- Pass 3: searching for sessions expired before " + upperBound);
          selectExpiredSessions.setLong(1,upperBound);
          try (ResultSet result=selectExpiredSessions.executeQuery()){
            while (result.next()) {
              String sessionId=result.getString(_sessionTableSchema.getIdColumn());
              expiredSessionIds.add(sessionId);
              if (LOG.isDebugEnabled())               LOG.debug("Found expired sessionId=" + sessionId);
            }
          }
           scavengeSessions(candidateIds,expiredSessionIds,true);
        }
      }
       scavengeSessions(candidateIds);
    }
  }
 catch (  Exception e) {
    if (isRunning())     LOG.warn("Problem selecting expired sessions",e);
 else     LOG.ignore(e);
  }
 finally {
    _lastScavengeTime=System.currentTimeMillis();
    if (LOG.isDebugEnabled())     LOG.debug(getWorkerName() + "- Scavenge sweep ended at " + _lastScavengeTime);
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        LOG.warn(e);
      }
    }
  }
}

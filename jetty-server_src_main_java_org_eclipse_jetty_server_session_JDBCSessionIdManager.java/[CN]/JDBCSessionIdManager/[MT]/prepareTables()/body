{
  if (_sessionIdTableSchema == null)   throw new IllegalStateException("No SessionIdTableSchema");
  if (_sessionTableSchema == null)   throw new IllegalStateException("No SessionTableSchema");
  try (Connection connection=getConnection();Statement statement=connection.createStatement()){
    connection.setAutoCommit(true);
    DatabaseMetaData metaData=connection.getMetaData();
    _dbAdaptor.adaptTo(metaData);
    _sessionTableSchema.setDatabaseAdaptor(_dbAdaptor);
    _sessionIdTableSchema.setDatabaseAdaptor(_dbAdaptor);
    _createSessionIdTable=_sessionIdTableSchema.getCreateStatementAsString();
    _insertId=_sessionIdTableSchema.getInsertStatementAsString();
    _deleteId=_sessionIdTableSchema.getDeleteStatementAsString();
    _queryId=_sessionIdTableSchema.getSelectStatementAsString();
    String tableName=_dbAdaptor.convertIdentifier(_sessionIdTableSchema.getTableName());
    String schemaName=_sessionIdTableSchema.getSchemaName() != null ? _dbAdaptor.convertIdentifier(_sessionIdTableSchema.getSchemaName()) : null;
    try (ResultSet result=metaData.getTables(null,schemaName,tableName,null)){
      if (!result.next()) {
        statement.executeUpdate(_createSessionIdTable);
      }
    }
     tableName=_dbAdaptor.convertIdentifier(_sessionTableSchema.getTableName());
    schemaName=_sessionTableSchema.getSchemaName() != null ? _dbAdaptor.convertIdentifier(_sessionTableSchema.getSchemaName()) : null;
    try (ResultSet result=metaData.getTables(null,schemaName,tableName,null)){
      if (!result.next()) {
        _createSessionTable=_sessionTableSchema.getCreateStatementAsString();
        statement.executeUpdate(_createSessionTable);
      }
 else {
        ResultSet colResult=null;
        try {
          colResult=metaData.getColumns(null,schemaName,tableName,_dbAdaptor.convertIdentifier(_sessionTableSchema.getMaxIntervalColumn()));
        }
 catch (        SQLException s) {
          LOG.warn("Problem checking if " + _sessionTableSchema.getTableName() + " table contains "+ _sessionTableSchema.getMaxIntervalColumn()+ " column. Ensure table contains column definition: \""+ _sessionTableSchema.getMaxIntervalColumn()+ " long not null default -999\"");
          throw s;
        }
        try {
          if (!colResult.next()) {
            try {
              statement.executeUpdate(_sessionTableSchema.getAlterTableForMaxIntervalAsString());
            }
 catch (            SQLException s) {
              LOG.warn("Problem adding " + _sessionTableSchema.getMaxIntervalColumn() + " column. Ensure table contains column definition: \""+ _sessionTableSchema.getMaxIntervalColumn()+ " long not null default -999\"");
              throw s;
            }
          }
        }
  finally {
          colResult.close();
        }
      }
    }
     String index1="idx_" + _sessionTableSchema.getTableName() + "_expiry";
    String index2="idx_" + _sessionTableSchema.getTableName() + "_session";
    boolean index1Exists=false;
    boolean index2Exists=false;
    try (ResultSet result=metaData.getIndexInfo(null,schemaName,tableName,false,false)){
      while (result.next()) {
        String idxName=result.getString("INDEX_NAME");
        if (index1.equalsIgnoreCase(idxName))         index1Exists=true;
 else         if (index2.equalsIgnoreCase(idxName))         index2Exists=true;
      }
    }
     if (!index1Exists)     statement.executeUpdate(_sessionTableSchema.getCreateIndexOverExpiryStatementAsString(index1));
    if (!index2Exists)     statement.executeUpdate(_sessionTableSchema.getCreateIndexOverSessionStatementAsString(index2));
    _insertSession=_sessionTableSchema.getInsertSessionStatementAsString();
    _deleteSession=_sessionTableSchema.getDeleteSessionStatementAsString();
    _updateSession=_sessionTableSchema.getUpdateSessionStatementAsString();
    _updateSessionNode=_sessionTableSchema.getUpdateSessionNodeStatementAsString();
    _updateSessionAccessTime=_sessionTableSchema.getUpdateSessionAccessTimeStatementAsString();
    _selectBoundedExpiredSessions=_sessionTableSchema.getBoundedExpiredSessionsStatementAsString();
    _selectExpiredSessions=_sessionTableSchema.getSelectExpiredSessionsStatementAsString();
  }
 }

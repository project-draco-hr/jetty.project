{
  Class<?> clazz=pojo;
  EventMethods events=new EventMethods(pojo);
  clazz=pojo;
  while (clazz.getAnnotation(WebSocket.class) != null) {
    for (    Method method : clazz.getDeclaredMethods()) {
      if (method.getAnnotation(OnWebSocketConnect.class) != null) {
        assertValidSignature(method,OnWebSocketConnect.class,validConnectParams);
        assertUnset(events.onConnect,OnWebSocketConnect.class,method);
        events.onConnect=new EventMethod(pojo,method);
        continue;
      }
      if (method.getAnnotation(OnWebSocketMessage.class) != null) {
        if (isSignatureMatch(method,validTextParams)) {
          assertUnset(events.onText,OnWebSocketMessage.class,method);
          events.onText=new EventMethod(pojo,method);
          continue;
        }
        if (isSignatureMatch(method,validBinaryParams)) {
          assertUnset(events.onBinary,OnWebSocketMessage.class,method);
          events.onBinary=new EventMethod(pojo,method);
          continue;
        }
        throw InvalidSignatureException.build(method,OnWebSocketMessage.class,validTextParams,validBinaryParams);
      }
      if (method.getAnnotation(OnWebSocketClose.class) != null) {
        assertValidSignature(method,OnWebSocketClose.class,validCloseParams);
        assertUnset(events.onClose,OnWebSocketClose.class,method);
        events.onClose=new EventMethod(pojo,method);
        continue;
      }
      if (method.getAnnotation(OnWebSocketFrame.class) != null) {
        assertValidSignature(method,OnWebSocketFrame.class,validFrameParams);
        assertUnset(events.onFrame,OnWebSocketFrame.class,method);
        events.onFrame=new EventMethod(pojo,method);
        continue;
      }
    }
    clazz=clazz.getSuperclass();
  }
  return events;
}

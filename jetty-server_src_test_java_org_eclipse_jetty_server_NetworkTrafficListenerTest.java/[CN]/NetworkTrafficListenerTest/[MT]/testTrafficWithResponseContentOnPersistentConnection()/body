{
  final String responseContent="response_content";
  initConnector(new AbstractHandler(){
    public void handle(    String uri,    Request request,    HttpServletRequest servletRequest,    HttpServletResponse servletResponse) throws IOException, ServletException {
      request.setHandled(true);
      ServletOutputStream output=servletResponse.getOutputStream();
      output.write(responseContent.getBytes(StandardCharsets.UTF_8));
      output.write(END_OF_CONTENT);
    }
  }
);
  final AtomicReference<String> incomingData=new AtomicReference<String>();
  final CountDownLatch incomingLatch=new CountDownLatch(1);
  final AtomicReference<String> outgoingData=new AtomicReference<String>("");
  final CountDownLatch outgoingLatch=new CountDownLatch(2);
  connector.addNetworkTrafficListener(new NetworkTrafficListener.Empty(){
    public void incoming(    Socket socket,    ByteBuffer bytes){
      incomingData.set(BufferUtil.toString(bytes,StandardCharsets.UTF_8));
      incomingLatch.countDown();
    }
    public void outgoing(    Socket socket,    ByteBuffer bytes){
      outgoingData.set(outgoingData.get() + BufferUtil.toString(bytes,StandardCharsets.UTF_8));
      outgoingLatch.countDown();
    }
  }
);
  int port=connector.getLocalPort();
  String request="" + "GET / HTTP/1.1\r\n" + "Host: localhost:" + port + "\r\n"+ "\r\n";
  String expectedResponse="" + "HTTP/1.1 200 OK\r\n" + "Content-Length: " + (responseContent.length() + 1) + "\r\n"+ "\r\n"+ ""+ responseContent+ (char)END_OF_CONTENT;
  Socket socket=new Socket("localhost",port);
  OutputStream output=socket.getOutputStream();
  output.write(request.getBytes(StandardCharsets.UTF_8));
  output.flush();
  assertTrue(incomingLatch.await(1,TimeUnit.SECONDS));
  assertEquals(request,incomingData.get());
  assertTrue(outgoingLatch.await(1,TimeUnit.SECONDS));
  assertEquals(expectedResponse,outgoingData.get());
  byte[] responseBytes=readResponse(socket);
  String response=new String(responseBytes,StandardCharsets.UTF_8);
  assertEquals(expectedResponse,response);
  socket.close();
}

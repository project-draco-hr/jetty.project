{
  initConnector(new AbstractHandler(){
    public void handle(    String uri,    Request request,    HttpServletRequest servletRequest,    HttpServletResponse servletResponse) throws IOException, ServletException {
      InputStream input=servletRequest.getInputStream();
      byte[] buffer=new byte[4096];
      while (true) {
        int read=input.read(buffer);
        if (read < 0)         break;
      }
      request.setHandled(true);
    }
  }
);
  final AtomicReference<String> incomingData=new AtomicReference<String>("");
  final AtomicReference<String> outgoingData=new AtomicReference<String>("");
  final CountDownLatch outgoingLatch=new CountDownLatch(1);
  connector.addNetworkTrafficListener(new NetworkTrafficListener.Empty(){
    public void incoming(    Socket socket,    ByteBuffer bytes){
      incomingData.set(incomingData.get() + bytes.toString("UTF-8"));
    }
    public void outgoing(    Socket socket,    ByteBuffer bytes){
      outgoingData.set(outgoingData.get() + bytes.toString("UTF-8"));
      outgoingLatch.countDown();
    }
  }
);
  int port=connector.getLocalPort();
  String requestContent="0123456789ABCDEF";
  for (int i=0; i < 11; ++i)   requestContent+=requestContent;
  String request="" + "POST / HTTP/1.1\r\n" + "Host: localhost:" + port + "\r\n"+ "Content-Type: text/plain\r\n"+ "Content-Length: "+ requestContent.length()+ "\r\n"+ "\r\n"+ requestContent;
  String expectedResponse="" + "HTTP/1.1 200 OK\r\n" + "Content-Length: 0\r\n"+ "\r\n";
  Socket socket=new Socket("localhost",port);
  OutputStream output=socket.getOutputStream();
  output.write(request.getBytes("UTF-8"));
  output.flush();
  assertTrue(outgoingLatch.await(1,TimeUnit.SECONDS));
  assertEquals(expectedResponse,outgoingData.get());
  byte[] responseBytes=readResponse(socket);
  String response=new String(responseBytes,"UTF-8");
  assertEquals(expectedResponse,response);
  assertEquals(request,incomingData.get());
  socket.close();
}

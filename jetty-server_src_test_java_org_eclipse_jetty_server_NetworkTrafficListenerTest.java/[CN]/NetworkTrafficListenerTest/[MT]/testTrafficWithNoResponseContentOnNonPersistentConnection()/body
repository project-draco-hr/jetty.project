{
  initConnector(new AbstractHandler(){
    public void handle(    String uri,    Request request,    HttpServletRequest servletRequest,    HttpServletResponse servletResponse) throws IOException, ServletException {
      request.setHandled(true);
    }
  }
);
  final AtomicReference<String> incomingData=new AtomicReference<String>();
  final CountDownLatch incomingLatch=new CountDownLatch(1);
  final AtomicReference<String> outgoingData=new AtomicReference<String>("");
  final CountDownLatch outgoingLatch=new CountDownLatch(1);
  connector.addNetworkTrafficListener(new NetworkTrafficListener.Empty(){
    @Override public void incoming(    Socket socket,    ByteBuffer bytes){
      incomingData.set(bytes.toString("UTF-8"));
      incomingLatch.countDown();
    }
    @Override public void outgoing(    Socket socket,    ByteBuffer bytes){
      outgoingData.set(outgoingData.get() + bytes.toString("UTF-8"));
      outgoingLatch.countDown();
    }
  }
);
  int port=connector.getLocalPort();
  String request="" + "GET / HTTP/1.1\r\n" + "Host: localhost:" + port + "\r\n"+ "Connection: close\r\n"+ "\r\n";
  String expectedResponse="" + "HTTP/1.1 200 OK\r\n" + "Connection: close\r\n"+ "\r\n";
  Socket socket=new Socket("localhost",port);
  OutputStream output=socket.getOutputStream();
  output.write(request.getBytes("UTF-8"));
  output.flush();
  assertTrue(incomingLatch.await(1,TimeUnit.SECONDS));
  assertEquals(request,incomingData.get());
  assertTrue(outgoingLatch.await(1,TimeUnit.SECONDS));
  assertEquals(expectedResponse,outgoingData.get());
  byte[] responseBytes=readResponse(socket);
  String response=new String(responseBytes,"UTF-8");
  assertEquals(expectedResponse,response);
  socket.close();
}

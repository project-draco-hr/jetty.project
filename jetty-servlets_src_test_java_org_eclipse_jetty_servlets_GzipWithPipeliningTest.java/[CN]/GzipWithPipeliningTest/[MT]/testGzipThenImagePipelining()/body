{
  testingdir.ensureEmpty();
  File outputDir=testingdir.getDir();
  PipelineHelper client=new PipelineHelper(serverUri,encodingHeader);
  try {
    File txtFile=MavenTestingUtils.getTestResourceFile("lots-of-fantasy-names.txt");
    File pngFile=MavenTestingUtils.getTestResourceFile("jetty_logo.png");
    long rawsize=txtFile.length() + pngFile.length();
    assertThat("Ensure that we have sufficient file size to trigger chunking",rawsize,greaterThan(300000L));
    String respHeader;
    client.connect();
    client.issueGET("/lots-of-fantasy-names.txt",true,false);
    respHeader=client.readResponseHeader();
    String expectedEncodingHeader=encodingHeader.equals(GzipFilter.DEFLATE) ? GzipFilter.DEFLATE : GzipFilter.GZIP;
    assertThat("Content-Encoding should be gzipped",respHeader,containsString("Content-Encoding: " + expectedEncodingHeader + "\r\n"));
    assertThat("Transfer-Encoding should be chunked",respHeader,containsString("Transfer-Encoding: chunked\r\n"));
    File rawOutputFile=new File(outputDir,"response-1.gz");
    FileOutputStream rawOutputStream=new FileOutputStream(rawOutputFile);
    long chunkSize=client.readChunkSize();
    int readBytes=client.readBody(rawOutputStream,(int)(chunkSize * 0.20f));
    client.issueGET("/jetty_logo.png",true,false);
    String line;
    chunkSize=chunkSize - readBytes;
    while (chunkSize > 0) {
      readBytes=client.readBody(rawOutputStream,(int)chunkSize);
      line=client.readLine();
      assertThat("Chunk delim should be an empty line with CR+LF",line,is(""));
      chunkSize=client.readChunkSize();
    }
    line=client.readLine();
    assertThat("Inter-pipeline delim should be an empty line with CR+LF",line,is(""));
    MessageDigest digestTxt=MessageDigest.getInstance("SHA1");
    DigestOutputStream digesterTxt=new DigestOutputStream(new NoOpOutputStream(),digestTxt);
    IO.close(rawOutputStream);
    FileInputStream rawInputStream=new FileInputStream(rawOutputFile);
    InputStream uncompressedStream=null;
    if (GzipFilter.DEFLATE.equals(encodingHeader)) {
      uncompressedStream=new InflaterInputStream(rawInputStream,new Inflater(true));
    }
 else {
      uncompressedStream=new GZIPInputStream(rawInputStream);
    }
    IO.copy(uncompressedStream,digesterTxt);
    respHeader=client.readResponseHeader();
    assertThat("Content-Encoding should NOT be gzipped",respHeader,not(containsString("Content-Encoding: gzip\r\n")));
    assertThat("Transfer-Encoding should NOT be chunked",respHeader,not(containsString("Transfer-Encoding: chunked\r\n")));
    MessageDigest digestImg=MessageDigest.getInstance("SHA1");
    DigestOutputStream digesterImg=new DigestOutputStream(new NoOpOutputStream(),digestImg);
    int contentLength=client.getContentLength(respHeader);
    assertThat("Image Content Length",(long)contentLength,is(pngFile.length()));
    client.readBody(digesterImg,contentLength);
    IO.close(rawOutputStream);
    assertChecksum("lots-of-fantasy-names.txt",digestTxt);
    IO.close(digesterImg);
    assertChecksum("jetty_logo.png",digestImg);
  }
  finally {
    client.disconnect();
  }
}

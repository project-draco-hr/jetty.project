{
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  ByteBuffer header=null;
  ByteBuffer chunk=null;
  ByteBuffer content=null;
  HttpVersion httpVersion=null;
  if (version == null) {
    httpVersion=HttpVersion.HTTP_1_1;
  }
 else {
    httpVersion=httpVersion.fromString(version);
  }
  HttpGenerator.RequestInfo info=new HttpGenerator.RequestInfo(httpVersion,fields,0,method,uri);
  HttpGenerator generator=new HttpGenerator();
  loop:   while (!generator.isEnd()) {
    HttpGenerator.Result result=generator.generateRequest(info,header,chunk,content,true);
switch (result) {
case NEED_HEADER:
      header=BufferUtil.allocate(8192);
    continue;
case NEED_CHUNK:
  chunk=BufferUtil.allocate(HttpGenerator.CHUNK_SIZE);
continue;
case NEED_INFO:
throw new IllegalStateException();
case FLUSH:
if (BufferUtil.hasContent(header)) {
out.write(BufferUtil.toArray(header));
BufferUtil.clear(header);
}
if (BufferUtil.hasContent(chunk)) {
out.write(BufferUtil.toArray(chunk));
BufferUtil.clear(chunk);
}
if (BufferUtil.hasContent(content)) {
out.write(BufferUtil.toArray(content));
BufferUtil.clear(content);
}
break;
case SHUTDOWN_OUT:
break loop;
}
}
return out.toString();
}

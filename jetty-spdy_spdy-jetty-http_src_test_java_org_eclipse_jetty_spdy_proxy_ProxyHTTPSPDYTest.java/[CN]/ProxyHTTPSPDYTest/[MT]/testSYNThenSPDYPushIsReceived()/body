{
  final byte[] data="0123456789ABCDEF".getBytes("UTF-8");
  InetSocketAddress proxyAddress=startProxy(startServer(new ServerSessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      Headers responseHeaders=new Headers();
      responseHeaders.put(HTTPSPDYHeader.VERSION.name(version),"HTTP/1.1");
      responseHeaders.put(HTTPSPDYHeader.STATUS.name(version),"200 OK");
      stream.reply(new ReplyInfo(responseHeaders,false));
      Headers pushHeaders=new Headers();
      pushHeaders.put(HTTPSPDYHeader.URI.name(version),"/push");
      stream.syn(new SynInfo(pushHeaders,false),5,TimeUnit.SECONDS,new Callback.Empty<Stream>(){
        @Override public void completed(        Stream pushStream){
          pushStream.data(new BytesDataInfo(data,true));
        }
      }
);
      stream.data(new BytesDataInfo(data,true));
      return null;
    }
  }
));
  proxyConnector.setDefaultConnectionFactory(proxyConnector.getConnectionFactory("spdy/" + version));
  final CountDownLatch pushSynLatch=new CountDownLatch(1);
  final CountDownLatch pushDataLatch=new CountDownLatch(1);
  Session client=factory.newSPDYClient(version).connect(proxyAddress,new SessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      pushSynLatch.countDown();
      return new StreamFrameListener.Adapter(){
        @Override public void onData(        Stream stream,        DataInfo dataInfo){
          dataInfo.consume(dataInfo.length());
          if (dataInfo.isClose())           pushDataLatch.countDown();
        }
      }
;
    }
  }
).get(5,TimeUnit.SECONDS);
  Headers headers=new Headers();
  headers.put(HTTPSPDYHeader.HOST.name(version),"localhost:" + proxyAddress.getPort());
  final CountDownLatch replyLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  client.syn(new SynInfo(headers,true),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      replyLatch.countDown();
    }
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      dataInfo.consume(dataInfo.length());
      if (dataInfo.isClose())       dataLatch.countDown();
    }
  }
);
  Assert.assertTrue(replyLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(pushSynLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(pushDataLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
  client.goAway().get(5,TimeUnit.SECONDS);
}

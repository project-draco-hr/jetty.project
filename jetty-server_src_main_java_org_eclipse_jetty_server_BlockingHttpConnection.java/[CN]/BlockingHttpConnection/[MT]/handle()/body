{
  Connection connection=this;
  boolean more_in_buffer=true;
  try {
    setCurrentConnection(this);
    while (more_in_buffer && _endp.isOpen()) {
      try {
        if (!_parser.isComplete())         _parser.parseAvailable();
        while (_generator.isCommitted() && !_generator.isComplete()) {
          long written=_generator.flushBuffer();
          if (written <= 0)           break;
          if (_endp.isBufferingOutput())           _endp.flush();
        }
        if (_endp.isBufferingOutput())         _endp.flush();
      }
 catch (      HttpException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("uri=" + _uri);
          LOG.debug("fields=" + _requestFields);
          LOG.debug(e);
        }
        _generator.sendError(e.getStatus(),e.getReason(),null,true);
        _parser.reset();
        _endp.close();
      }
 finally {
        more_in_buffer=_parser.isMoreInBuffer() || _endp.isBufferingInput();
        if (_parser.isComplete() && _generator.isComplete() && !_endp.isBufferingOutput()) {
          Connection switched=(_response.getStatus() == HttpStatus.SWITCHING_PROTOCOLS_101) ? (Connection)_request.getAttribute("org.eclipse.jetty.io.Connection") : null;
          if (switched != null) {
            _parser.reset();
            _generator.reset(true);
            connection=switched;
          }
 else {
            if (!_generator.isPersistent() || _endp.isInputShutdown()) {
              _parser.reset();
              more_in_buffer=false;
              _endp.close();
            }
            if (more_in_buffer) {
              reset(false);
              more_in_buffer=_parser.isMoreInBuffer() || _endp.isBufferingInput();
            }
 else             reset(true);
          }
        }
 else         if (_parser.isIdle() && _endp.isInputShutdown()) {
          more_in_buffer=false;
          _endp.close();
        }
        if (_request.isAsyncStarted())         throw new IllegalStateException();
      }
    }
  }
  finally {
    _parser.returnBuffers();
    setCurrentConnection(null);
    _handling=false;
  }
  return connection;
}

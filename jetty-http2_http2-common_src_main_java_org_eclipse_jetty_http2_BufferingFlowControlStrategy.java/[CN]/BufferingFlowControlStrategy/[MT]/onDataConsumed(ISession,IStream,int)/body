{
  if (length <= 0)   return;
  float ratio=bufferRatio;
  WindowUpdateFrame windowFrame=null;
  int level=sessionLevel.addAndGet(length);
  int maxLevel=(int)(maxSessionRecvWindow.get() * ratio);
  if (level > maxLevel) {
    if (sessionLevel.compareAndSet(level,0)) {
      session.updateRecvWindow(level);
      if (LOG.isDebugEnabled())       LOG.debug("Data consumed, {} bytes, updated session recv window by {}/{} for {}",length,level,maxLevel,session);
      windowFrame=new WindowUpdateFrame(0,level);
    }
 else {
      if (LOG.isDebugEnabled())       LOG.debug("Data consumed, {} bytes, concurrent session recv window level {}/{} for {}",length,sessionLevel,maxLevel,session);
    }
  }
 else {
    if (LOG.isDebugEnabled())     LOG.debug("Data consumed, {} bytes, session recv window level {}/{} for {}",length,level,maxLevel,session);
  }
  Frame[] windowFrames=Frame.EMPTY_ARRAY;
  if (stream != null) {
    if (stream.isClosed()) {
      if (LOG.isDebugEnabled())       LOG.debug("Data consumed, {} bytes, ignoring update stream recv window for closed {}",length,stream);
    }
 else {
      AtomicInteger streamLevel=streamLevels.get(stream);
      if (streamLevel != null) {
        level=streamLevel.addAndGet(length);
        maxLevel=(int)(getInitialStreamRecvWindow() * ratio);
        if (level > maxLevel) {
          level=streamLevel.getAndSet(0);
          stream.updateRecvWindow(level);
          if (LOG.isDebugEnabled())           LOG.debug("Data consumed, {} bytes, updated stream recv window by {}/{} for {}",length,level,maxLevel,stream);
          WindowUpdateFrame frame=new WindowUpdateFrame(stream.getId(),level);
          if (windowFrame == null)           windowFrame=frame;
 else           windowFrames=new Frame[]{frame};
        }
 else {
          if (LOG.isDebugEnabled())           LOG.debug("Data consumed, {} bytes, stream recv window level {}/{} for {}",length,level,maxLevel,stream);
        }
      }
    }
  }
  if (windowFrame != null)   session.frames(stream,Callback.NOOP,windowFrame,windowFrames);
}

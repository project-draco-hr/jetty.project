{
  LOG.info("onTextMessage({})",message);
  int idx=message.indexOf(':');
  if (idx > 0) {
    String key=message.substring(0,idx).toLowerCase(Locale.ENGLISH);
    String val=message.substring(idx + 1);
switch (key) {
case "info":
{
        if (StringUtil.isBlank(userAgent)) {
          writeMessage("Client has no User-Agent");
        }
 else {
          writeMessage("Client User-Agent: " + this.userAgent);
        }
        if (StringUtil.isBlank(requestedExtensions)) {
          writeMessage("Client requested no Sec-WebSocket-Extensions");
        }
 else {
          writeMessage("Client Sec-WebSocket-Extensions: " + this.requestedExtensions);
        }
        break;
      }
case "many":
{
      String parts[]=val.split(",");
      int size=Integer.parseInt(parts[0]);
      int count=Integer.parseInt(parts[1]);
      writeManyAsync(size,count);
      break;
    }
case "manythreads":
{
    String parts[]=val.split(",");
    int threadCount=Integer.parseInt(parts[0]);
    int size=Integer.parseInt(parts[1]);
    int count=Integer.parseInt(parts[2]);
    Thread threads[]=new Thread[threadCount];
    for (int n=0; n < threadCount; n++) {
      threads[n]=new Thread(new WriteMany(session.getRemote(),size,count),"WriteMany[" + n + "]");
    }
    for (    Thread thread : threads) {
      thread.start();
    }
    break;
  }
case "time":
{
  Calendar now=Calendar.getInstance();
  DateFormat sdf=SimpleDateFormat.getDateTimeInstance(SimpleDateFormat.FULL,SimpleDateFormat.FULL);
  writeMessage("Server time: %s",sdf.format(now.getTime()));
  break;
}
default :
{
writeMessage("key[%s] val[%s]",key,val);
}
}
}
 else {
writeMessage(message);
}
}

{
  LOG.info("onTextMessage({})",message);
  int idx=message.indexOf(':');
  if (idx > 0) {
    String key=message.substring(0,idx).toLowerCase(Locale.ENGLISH);
    String val=message.substring(idx + 1);
switch (key) {
case "info":
{
        if (StringUtil.isBlank(userAgent)) {
          writeMessage("Client has no User-Agent");
        }
 else {
          writeMessage("Client User-Agent: " + this.userAgent);
        }
        if (StringUtil.isBlank(requestedExtensions)) {
          writeMessage("Client requested no Sec-WebSocket-Extensions");
        }
 else {
          writeMessage("Client Sec-WebSocket-Extensions: " + this.requestedExtensions);
        }
        break;
      }
case "many":
{
      String parts[]=val.split(",");
      int size=Integer.parseInt(parts[0]);
      int count=Integer.parseInt(parts[1]);
      char letters[]="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-|{}[]():".toCharArray();
      int lettersLen=letters.length;
      char randomText[]=new char[size];
      Random rand=new Random();
      for (int n=0; n < count; n++) {
        for (int i=0; i < size; i++) {
          randomText[i]=letters[rand.nextInt(lettersLen)];
        }
        writeMessage("Many [%s]",String.valueOf(randomText));
      }
      break;
    }
case "time":
{
    Calendar now=Calendar.getInstance();
    DateFormat sdf=SimpleDateFormat.getDateTimeInstance(SimpleDateFormat.FULL,SimpleDateFormat.FULL);
    writeMessage("Server time: %s",sdf.format(now.getTime()));
    break;
  }
default :
{
  writeMessage("key[%s] val[%s]",key,val);
}
}
}
 else {
writeMessage(message);
}
}

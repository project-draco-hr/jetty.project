{
  start(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      try {
        Thread.sleep(1000);
        throw new IllegalStateException();
      }
 catch (      InterruptedException e) {
        throw new InterruptedIOException();
      }
    }
  }
);
  Session client=newClient(new Session.Listener.Adapter());
  MetaData.Request request=newRequest("GET",new HttpFields());
  HeadersFrame frame=new HeadersFrame(request,null,false);
  FuturePromise<Stream> promise=new FuturePromise<>();
  client.newStream(frame,promise,new Stream.Listener.Adapter());
  Stream stream=promise.get(5,TimeUnit.SECONDS);
  ByteBuffer data=ByteBuffer.allocate(FlowControlStrategy.DEFAULT_WINDOW_SIZE);
  CountDownLatch dataLatch=new CountDownLatch(1);
  stream.data(new DataFrame(stream.getId(),data,false),new Callback(){
    @Override public void succeeded(){
      dataLatch.countDown();
    }
  }
);
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
  Assert.assertEquals(0,((ISession)client).updateSendWindow(0));
  Thread.sleep(2000);
  Assert.assertThat(((ISession)client).updateSendWindow(0),Matchers.greaterThan(0));
}

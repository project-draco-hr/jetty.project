{
  final CountDownLatch serverResetLatch=new CountDownLatch(1);
  final CountDownLatch serverDataLatch=new CountDownLatch(1);
  startServer(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame requestFrame){
      MetaData.Response response=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
      HeadersFrame responseFrame=new HeadersFrame(stream.getId(),response,null,false);
      stream.headers(responseFrame,Callback.Adapter.INSTANCE);
      return new Stream.Listener.Adapter(){
        @Override public void onData(        Stream stream,        DataFrame frame,        Callback callback){
          callback.succeeded();
          stream.data(new DataFrame(stream.getId(),ByteBuffer.allocate(16),true),Callback.Adapter.INSTANCE);
          serverDataLatch.countDown();
        }
      }
;
    }
    @Override public void onReset(    Session session,    ResetFrame frame){
      Stream stream=session.getStream(frame.getStreamId());
      stream.data(new DataFrame(stream.getId(),ByteBuffer.allocate(16),true),new Callback.Adapter(){
        @Override public void failed(        Throwable x){
          serverResetLatch.countDown();
        }
      }
);
    }
  }
);
  Session client=newClient(new Session.Listener.Adapter());
  MetaData.Request request1=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame1=new HeadersFrame(0,request1,null,false);
  FuturePromise<Stream> promise1=new FuturePromise<>();
  final CountDownLatch stream1HeadersLatch=new CountDownLatch(1);
  final CountDownLatch stream1DataLatch=new CountDownLatch(1);
  client.newStream(requestFrame1,promise1,new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      stream1HeadersLatch.countDown();
    }
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      stream1DataLatch.countDown();
    }
  }
);
  Stream stream1=promise1.get(5,TimeUnit.SECONDS);
  Assert.assertTrue(stream1HeadersLatch.await(5,TimeUnit.SECONDS));
  MetaData.Request request2=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame2=new HeadersFrame(0,request2,null,false);
  FuturePromise<Stream> promise2=new FuturePromise<>();
  final CountDownLatch stream2DataLatch=new CountDownLatch(1);
  client.newStream(requestFrame2,promise2,new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      stream2DataLatch.countDown();
    }
  }
);
  Stream stream2=promise2.get(5,TimeUnit.SECONDS);
  ResetFrame resetFrame=new ResetFrame(stream1.getId(),ErrorCodes.CANCEL_STREAM_ERROR);
  stream1.reset(resetFrame,Callback.Adapter.INSTANCE);
  Assert.assertTrue(serverResetLatch.await(5,TimeUnit.SECONDS));
  Assert.assertFalse(stream1DataLatch.await(1,TimeUnit.SECONDS));
  stream2.data(new DataFrame(stream2.getId(),ByteBuffer.allocate(16),true),Callback.Adapter.INSTANCE);
  Assert.assertTrue(serverDataLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(stream2DataLatch.await(5,TimeUnit.SECONDS));
}

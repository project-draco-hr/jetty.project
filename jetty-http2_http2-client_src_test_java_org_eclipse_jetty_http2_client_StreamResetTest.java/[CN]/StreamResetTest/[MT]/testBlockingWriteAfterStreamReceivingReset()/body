{
  final CountDownLatch resetLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  start(new HttpServlet(){
    @Override protected void doGet(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      Charset charset=StandardCharsets.UTF_8;
      byte[] data="AFTER RESET".getBytes(charset);
      response.setStatus(200);
      response.setContentType("text/plain;charset=" + charset.name());
      response.setContentLength(data.length * 10);
      response.flushBuffer();
      try {
        Assert.assertTrue(resetLatch.await(5,TimeUnit.SECONDS));
      }
 catch (      InterruptedException x) {
        throw new InterruptedIOException();
      }
      try {
        for (int i=0; i < 10; i++) {
          Thread.sleep(500);
          response.getOutputStream().write(data);
          response.flushBuffer();
        }
      }
 catch (      InterruptedException x) {
      }
catch (      IOException x) {
        dataLatch.countDown();
      }
    }
  }
);
  Session client=newClient(new Session.Listener.Adapter());
  MetaData.Request request=newRequest("GET",new HttpFields());
  HeadersFrame frame=new HeadersFrame(request,null,true);
  client.newStream(frame,new FuturePromise<>(),new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      stream.reset(new ResetFrame(stream.getId(),ErrorCode.CANCEL_STREAM_ERROR.code),Callback.NOOP);
      resetLatch.countDown();
    }
  }
);
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
}

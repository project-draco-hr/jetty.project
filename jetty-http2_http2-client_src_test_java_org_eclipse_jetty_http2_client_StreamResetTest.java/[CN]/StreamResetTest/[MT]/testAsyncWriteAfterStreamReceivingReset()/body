{
  final CountDownLatch resetLatch=new CountDownLatch(1);
  final CountDownLatch dataLatch=new CountDownLatch(1);
  start(new HttpServlet(){
    @Override protected void doGet(    HttpServletRequest request,    final HttpServletResponse response) throws ServletException, IOException {
      Charset charset=StandardCharsets.UTF_8;
      final ByteBuffer data=ByteBuffer.wrap("AFTER RESET".getBytes(charset));
      response.setStatus(200);
      response.setContentType("text/plain;charset=" + charset.name());
      response.setContentLength(data.remaining());
      response.flushBuffer();
      try {
        Assert.assertTrue(resetLatch.await(5,TimeUnit.SECONDS));
        Thread.sleep(1000);
      }
 catch (      InterruptedException x) {
        throw new InterruptedIOException();
      }
      final AsyncContext context=request.startAsync();
      new Thread(){
        @Override public void run(){
          try {
            Thread.sleep(1000);
            HttpOutput output=(HttpOutput)response.getOutputStream();
            output.sendContent(data,new Callback.Adapter(){
              @Override public void failed(              Throwable x){
                context.complete();
                dataLatch.countDown();
              }
            }
);
          }
 catch (          Throwable x) {
            x.printStackTrace();
          }
        }
      }
.start();
    }
  }
);
  Session client=newClient(new Session.Listener.Adapter());
  MetaData.Request request=newRequest("GET",new HttpFields());
  HeadersFrame frame=new HeadersFrame(0,request,null,true);
  client.newStream(frame,new FuturePromise<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      stream.reset(new ResetFrame(stream.getId(),ErrorCode.CANCEL_STREAM_ERROR.code),Callback.Adapter.INSTANCE);
      resetLatch.countDown();
    }
  }
);
  Assert.assertTrue(dataLatch.await(5,TimeUnit.SECONDS));
}

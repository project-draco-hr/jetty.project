{
  final AtomicReference<Stream> streamRef=new AtomicReference<>();
  final CountDownLatch resetLatch=new CountDownLatch(1);
  startServer(new ServerSessionListener.Adapter(){
    @Override public void onReset(    Session session,    ResetFrame frame){
      Stream stream=session.getStream(frame.getStreamId());
      Assert.assertNotNull(stream);
      Assert.assertTrue(stream.isReset());
      streamRef.set(stream);
      resetLatch.countDown();
    }
  }
);
  Session client=newClient(new Session.Listener.Adapter());
  MetaData.Request request=newRequest("GET",new HttpFields());
  HeadersFrame requestFrame=new HeadersFrame(0,request,null,false);
  FuturePromise<Stream> promise=new FuturePromise<>();
  client.newStream(requestFrame,promise,new Stream.Listener.Adapter());
  Stream stream=promise.get(5,TimeUnit.SECONDS);
  ResetFrame resetFrame=new ResetFrame(stream.getId(),ErrorCodes.CANCEL_STREAM_ERROR);
  stream.reset(resetFrame,Callback.Adapter.INSTANCE);
  Assert.assertTrue(resetLatch.await(5,TimeUnit.SECONDS));
  Thread.sleep(1000);
  Stream serverStream=streamRef.get();
  Assert.assertEquals(0,serverStream.getSession().getStreams().size());
}

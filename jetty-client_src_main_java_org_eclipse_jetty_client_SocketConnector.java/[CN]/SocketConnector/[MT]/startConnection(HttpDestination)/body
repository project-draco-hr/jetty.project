{
  Socket socket=null;
  if (destination.isSecure()) {
    SSLContext sslContext=_httpClient.getSSLContext();
    socket=sslContext.getSocketFactory().createSocket();
  }
 else {
    LOG.debug("Using Regular Socket");
    socket=SocketFactory.getDefault().createSocket();
  }
  socket.setSoTimeout(0);
  socket.setTcpNoDelay(true);
  Address address=destination.isProxied() ? destination.getProxy() : destination.getAddress();
  socket.connect(address.toSocketAddress(),_httpClient.getConnectTimeout());
  EndPoint endpoint=new SocketEndPoint(socket);
  final HttpConnection connection=new HttpConnection(_httpClient.getRequestBuffers(),_httpClient.getResponseBuffers(),endpoint);
  connection.setDestination(destination);
  destination.onNewConnection(connection);
  _httpClient.getThreadPool().dispatch(new Runnable(){
    public void run(){
      try {
        Connection con=connection;
        while (true) {
          final Connection next=con.handle();
          if (next != con) {
            con=next;
            continue;
          }
          break;
        }
      }
 catch (      IOException e) {
        if (e instanceof InterruptedIOException)         LOG.ignore(e);
 else {
          LOG.debug(e);
          destination.onException(e);
        }
      }
 finally {
        try {
          destination.returnConnection(connection,true);
        }
 catch (        IOException e) {
          LOG.debug(e);
        }
      }
    }
  }
);
}

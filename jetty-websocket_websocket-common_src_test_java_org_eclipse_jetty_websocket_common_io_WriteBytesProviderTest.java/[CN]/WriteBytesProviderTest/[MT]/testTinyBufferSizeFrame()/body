{
  UnitGenerator generator=new UnitGenerator();
  TrackingCallback flushCallback=new TrackingCallback();
  bytesProvider=new WriteBytesProvider(generator,flushCallback);
  int bufferSize=30;
  bytesProvider.setBufferSize(bufferSize);
  TrackingCallback binCallback=new TrackingCallback();
  TrackingCallback closeCallback=new TrackingCallback();
  int binPayloadSize=50;
  byte bin[]=new byte[binPayloadSize];
  Arrays.fill(bin,(byte)0x00);
  BinaryFrame binFrame=new BinaryFrame().setPayload(bin);
  byte maskingKey[]=Hex.asByteArray("11223344");
  binFrame.setMask(maskingKey);
  bytesProvider.enqueue(binFrame,binCallback);
  bytesProvider.enqueue(new CloseInfo().asFrame(),closeCallback);
  List<ByteBuffer> bytes=bytesProvider.getByteBuffers();
  Assert.assertThat("Number of buffers",bytes.size(),is(5));
  assertBufferLengths(bytes,6,bufferSize,binPayloadSize - bufferSize,2,0);
  StringBuilder expected=new StringBuilder();
  expected.append("82B2").append("11223344");
  byte masked[]=new byte[binPayloadSize];
  Arrays.fill(masked,(byte)0x00);
  for (int i=0; i < binPayloadSize; i++) {
    masked[i]^=maskingKey[i % 4];
  }
  expected.append(Hex.asHex(masked));
  expected.append("8800");
  assertExpectedBytes(bytes,expected.toString());
  bytesProvider.succeeded();
  assertCallbackSuccessCount(flushCallback,1);
  assertCallbackSuccessCount(binCallback,1);
  assertCallbackSuccessCount(closeCallback,1);
}

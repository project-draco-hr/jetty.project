{
  while (buffer.hasRemaining()) {
switch (state) {
case COUNT:
{
        if (buffer.remaining() >= 4) {
          count=buffer.getInt();
          state=State.KEY;
        }
 else {
          state=State.COUNT_BYTES;
          cursor=4;
        }
        break;
      }
case COUNT_BYTES:
{
      byte currByte=buffer.get();
      --cursor;
      count+=(currByte & 0xFF) << 8 * cursor;
      if (cursor == 0) {
        state=State.KEY;
      }
      break;
    }
case KEY:
{
    if (buffer.remaining() >= 4) {
      key=new SettingsInfo.Key(buffer.getInt());
      state=State.VALUE;
    }
 else {
      state=State.KEY_BYTES;
      cursor=4;
    }
    break;
  }
case KEY_BYTES:
{
  byte currByte=buffer.get();
  --cursor;
  value+=(currByte & 0xFF) << 8 * cursor;
  if (cursor == 0) {
    key=new SettingsInfo.Key(value);
    state=State.VALUE;
  }
  break;
}
case VALUE:
{
if (buffer.remaining() >= 4) {
  value=buffer.getInt();
  if (onPair())   return true;
}
 else {
  state=State.VALUE_BYTES;
  cursor=4;
  value=0;
}
break;
}
case VALUE_BYTES:
{
byte currByte=buffer.get();
--cursor;
value+=(currByte & 0xFF) << 8 * cursor;
if (cursor == 0) {
if (onPair()) return true;
}
break;
}
default :
{
throw new IllegalStateException();
}
}
}
return false;
}

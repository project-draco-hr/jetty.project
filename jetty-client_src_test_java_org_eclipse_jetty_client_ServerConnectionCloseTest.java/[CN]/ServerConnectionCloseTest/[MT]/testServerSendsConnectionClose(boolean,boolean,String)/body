{
  ServerSocket server=new ServerSocket(0);
  int port=server.getLocalPort();
  startClient();
  Request request=client.newRequest("localhost",port).path("/ctx/path");
  FutureResponseListener listener=new FutureResponseListener(request);
  request.send(listener);
  Socket socket=server.accept();
  InputStream input=socket.getInputStream();
  consumeRequest(input);
  OutputStream output=socket.getOutputStream();
  String serverResponse="" + "HTTP/1.1 200 OK\r\n" + "Connection: close\r\n";
  if (chunked) {
    serverResponse+="" + "Transfer-Encoding: chunked\r\n" + "\r\n";
    for (int i=0; i < 2; ++i) {
      serverResponse+=Integer.toHexString(content.length()) + "\r\n" + content+ "\r\n";
    }
    serverResponse+="" + "0\r\n" + "\r\n";
  }
 else {
    serverResponse+="Content-Length: " + content.length() + "\r\n";
    serverResponse+="\r\n";
    serverResponse+=content;
  }
  output.write(serverResponse.getBytes("UTF-8"));
  output.flush();
  if (shutdownOutput)   socket.shutdownOutput();
  ContentResponse response=listener.get(5,TimeUnit.SECONDS);
  Assert.assertEquals(HttpStatus.OK_200,response.getStatus());
  Thread.sleep(1000);
  HttpDestinationOverHTTP destination=(HttpDestinationOverHTTP)client.getDestination("http","localhost",port);
  DuplexConnectionPool connectionPool=destination.getConnectionPool();
  Assert.assertEquals(0,connectionPool.getConnectionCount());
  Assert.assertEquals(0,connectionPool.getIdleConnectionCount());
  Assert.assertEquals(0,connectionPool.getActiveConnectionCount());
}

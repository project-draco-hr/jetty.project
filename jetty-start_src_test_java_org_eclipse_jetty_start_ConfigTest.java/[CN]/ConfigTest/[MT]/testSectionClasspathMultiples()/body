{
  StringBuffer buf=new StringBuffer();
  buf.append("# default\n");
  buf.append("$(jetty.home)/lib/spec.zip\n");
  buf.append("\n");
  buf.append("[*]\n");
  buf.append("$(jetty.home)/lib/io.jar\n");
  buf.append("$(jetty.home)/lib/util.jar\n");
  buf.append("\n");
  buf.append("[All,server,default]\n");
  buf.append("$(jetty.home)/lib/core.jar\n");
  buf.append("$(jetty.home)/lib/server.jar\n");
  buf.append("$(jetty.home)/lib/http.jar\n");
  buf.append("\n");
  buf.append("[All,xml,default]\n");
  buf.append("$(jetty.home)/lib/xml.jar\n");
  buf.append("\n");
  buf.append("[All,logging]\n");
  buf.append("$(jetty.home)/lib/LOGGING.JAR\n");
  String jettyHome=getTestableJettyHome();
  Config cfg=new Config();
  cfg.setProperty("jetty.home",jettyHome);
  cfg.parse(buf);
  Classpath defaultClasspath=cfg.getClasspath();
  Assert.assertNotNull("Default Classpath should not be null",defaultClasspath);
  Classpath foocp=cfg.getSectionClasspath("Foo");
  Assert.assertNull("Foo Classpath should not exist",foocp);
  Set<String> sections=cfg.getSectionIds();
  Set<String> expected=new HashSet<String>();
  expected.add(Config.DEFAULT_SECTION);
  expected.add("*");
  expected.add("All");
  expected.add("server");
  expected.add("default");
  expected.add("xml");
  expected.add("logging");
  assertEquals("Multiple Section IDs",expected,sections);
  Classpath cpAll=cfg.getSectionClasspath("All");
  Assert.assertNotNull("Classpath section 'All' should exist",cpAll);
  File lib=new File(getJettyHomeDir(),"lib");
  Classpath expectedAll=new Classpath();
  expectedAll.addComponent(new File(lib,"core.jar"));
  expectedAll.addComponent(new File(lib,"server.jar"));
  expectedAll.addComponent(new File(lib,"http.jar"));
  expectedAll.addComponent(new File(lib,"xml.jar"));
  expectedAll.addComponent(new File(lib,"LOGGING.JAR"));
  assertEquals("Classpath 'All' Section",expectedAll,cpAll);
  List<String> activated=new ArrayList<String>();
  activated.add("server");
  activated.add("logging");
  Classpath cpCombined=cfg.getCombinedClasspath(activated);
  Classpath expectedCombined=new Classpath();
  expectedCombined.addComponent(new File(lib,"spec.zip"));
  expectedCombined.addComponent(new File(lib,"core.jar"));
  expectedCombined.addComponent(new File(lib,"server.jar"));
  expectedCombined.addComponent(new File(lib,"http.jar"));
  expectedCombined.addComponent(new File(lib,"LOGGING.JAR"));
  expectedCombined.addComponent(new File(lib,"io.jar"));
  expectedCombined.addComponent(new File(lib,"util.jar"));
  assertEquals("Classpath combined 'server,logging'",expectedCombined,cpCombined);
}

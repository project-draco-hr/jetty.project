{
  InetSocketAddress address=startHTTPServer(version(),new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      String url=request.getRequestURI();
      PrintWriter output=response.getWriter();
      if (url.endsWith(".html"))       output.print("<html><head/><body>HELLO</body></html>");
 else       if (url.endsWith(".css"))       output.print("body { background: #FFF; }");
 else       if (url.endsWith(".gif"))       output.print("\u0000");
      baseRequest.setHandled(true);
    }
  }
);
  Session session1=startClient(version(),address,null);
  final CountDownLatch mainResourceLatch=new CountDownLatch(1);
  Headers mainRequestHeaders=new Headers();
  mainRequestHeaders.put(HTTPSPDYHeader.METHOD.name(version()),"GET");
  String mainResource="/index.html";
  mainRequestHeaders.put(HTTPSPDYHeader.URI.name(version()),mainResource);
  mainRequestHeaders.put(HTTPSPDYHeader.VERSION.name(version()),"HTTP/1.1");
  mainRequestHeaders.put(HTTPSPDYHeader.SCHEME.name(version()),"http");
  mainRequestHeaders.put(HTTPSPDYHeader.HOST.name(version()),"localhost:" + connector.getLocalPort());
  session1.syn(new SynInfo(mainRequestHeaders,true),new StreamFrameListener.Adapter(){
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      dataInfo.consume(dataInfo.length());
      if (dataInfo.isClose())       mainResourceLatch.countDown();
    }
  }
);
  Assert.assertTrue(mainResourceLatch.await(5,TimeUnit.SECONDS));
  final CountDownLatch associatedResourceLatch=new CountDownLatch(1);
  Headers associatedRequestHeaders=new Headers();
  associatedRequestHeaders.put(HTTPSPDYHeader.METHOD.name(version()),"GET");
  String associatedResource="/style.css";
  associatedRequestHeaders.put(HTTPSPDYHeader.URI.name(version()),associatedResource);
  associatedRequestHeaders.put(HTTPSPDYHeader.VERSION.name(version()),"HTTP/1.1");
  associatedRequestHeaders.put(HTTPSPDYHeader.SCHEME.name(version()),"http");
  associatedRequestHeaders.put(HTTPSPDYHeader.HOST.name(version()),"localhost:" + connector.getLocalPort());
  associatedRequestHeaders.put("referer","http://localhost:" + connector.getLocalPort() + mainResource);
  session1.syn(new SynInfo(associatedRequestHeaders,true),new StreamFrameListener.Adapter(){
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      dataInfo.consume(dataInfo.length());
      if (dataInfo.isClose())       associatedResourceLatch.countDown();
    }
  }
);
  Assert.assertTrue(associatedResourceLatch.await(5,TimeUnit.SECONDS));
  final CountDownLatch nestedResourceLatch=new CountDownLatch(1);
  Headers nestedRequestHeaders=new Headers();
  nestedRequestHeaders.put(HTTPSPDYHeader.METHOD.name(version()),"GET");
  nestedRequestHeaders.put(HTTPSPDYHeader.URI.name(version()),"/image.gif");
  nestedRequestHeaders.put(HTTPSPDYHeader.VERSION.name(version()),"HTTP/1.1");
  nestedRequestHeaders.put(HTTPSPDYHeader.SCHEME.name(version()),"http");
  nestedRequestHeaders.put(HTTPSPDYHeader.HOST.name(version()),"localhost:" + connector.getLocalPort());
  nestedRequestHeaders.put("referer","http://localhost:" + connector.getLocalPort() + associatedResource);
  session1.syn(new SynInfo(nestedRequestHeaders,true),new StreamFrameListener.Adapter(){
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      dataInfo.consume(dataInfo.length());
      if (dataInfo.isClose())       nestedResourceLatch.countDown();
    }
  }
);
  Assert.assertTrue(nestedResourceLatch.await(5,TimeUnit.SECONDS));
  final CountDownLatch mainStreamLatch=new CountDownLatch(2);
  final CountDownLatch pushDataLatch=new CountDownLatch(2);
  Session session2=startClient(version(),address,new SessionFrameListener.Adapter(){
    @Override public StreamFrameListener onSyn(    Stream stream,    SynInfo synInfo){
      Assert.assertTrue(stream.isUnidirectional());
      return new StreamFrameListener.Adapter(){
        @Override public void onData(        Stream stream,        DataInfo dataInfo){
          dataInfo.consume(dataInfo.length());
          if (dataInfo.isClose())           pushDataLatch.countDown();
        }
      }
;
    }
  }
);
  session2.syn(new SynInfo(mainRequestHeaders,true),new StreamFrameListener.Adapter(){
    @Override public void onReply(    Stream stream,    ReplyInfo replyInfo){
      Assert.assertFalse(replyInfo.isClose());
      mainStreamLatch.countDown();
    }
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      dataInfo.consume(dataInfo.length());
      if (dataInfo.isClose())       mainStreamLatch.countDown();
    }
  }
);
  Assert.assertTrue(mainStreamLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(pushDataLatch.await(5,TimeUnit.SECONDS));
}

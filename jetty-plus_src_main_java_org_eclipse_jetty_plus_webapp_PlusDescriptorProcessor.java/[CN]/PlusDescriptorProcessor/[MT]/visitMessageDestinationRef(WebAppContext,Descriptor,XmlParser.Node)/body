{
  String jndiName=node.getString("message-destination-ref-name",false,true);
  String type=node.getString("message-destination-type",false,true);
  String usage=node.getString("message-destination-usage",false,true);
  Origin o=context.getMetaData().getOrigin("message-destination-ref." + jndiName);
switch (o) {
case NotSet:
{
      Class<?> typeClass=TypeUtil.fromName(type);
      if (typeClass == null)       typeClass=context.loadClass(type);
      addInjections(context,descriptor,node,jndiName,typeClass);
      bindMessageDestinationRef(context,jndiName,typeClass);
      context.getMetaData().setOrigin("message-destination-ref." + jndiName,descriptor);
      break;
    }
case WebXml:
case WebDefaults:
case WebOverride:
{
    if (!(descriptor instanceof FragmentDescriptor)) {
      Class<?> typeClass=TypeUtil.fromName(type);
      if (typeClass == null)       typeClass=context.loadClass(type);
      addInjections(context,descriptor,node,jndiName,typeClass);
      bindMessageDestinationRef(context,jndiName,typeClass);
      context.getMetaData().setOrigin("message-destination-ref." + jndiName,descriptor);
    }
 else {
      Descriptor d=context.getMetaData().getOriginDescriptor("message-destination-ref." + jndiName + ".injection");
      if (d == null || d instanceof FragmentDescriptor) {
        Class<?> typeClass=TypeUtil.fromName(type);
        if (typeClass == null)         typeClass=context.loadClass(type);
        addInjections(context,descriptor,node,jndiName,typeClass);
      }
    }
    break;
  }
case WebFragment:
{
  Descriptor otherFragment=context.getMetaData().getOriginDescriptor("message-destination-ref." + jndiName);
  XmlParser.Node otherFragmentRoot=otherFragment.getRoot();
  Iterator<Object> iter=otherFragmentRoot.iterator();
  XmlParser.Node otherNode=null;
  while (iter.hasNext() && otherNode == null) {
    Object obj=iter.next();
    if (!(obj instanceof XmlParser.Node))     continue;
    XmlParser.Node n=(XmlParser.Node)obj;
    if ("message-destination-ref".equals(n.getTag()) && jndiName.equals(n.getString("message-destination-ref-name",false,true)))     otherNode=n;
  }
  if (otherNode != null) {
    String otherType=node.getString("message-destination-type",false,true);
    String otherUsage=node.getString("message-destination-usage",false,true);
    type=(type == null ? "" : type);
    usage=(usage == null ? "" : usage);
    if (!type.equals(otherType) || !usage.equalsIgnoreCase(otherUsage))     throw new IllegalStateException("Conflicting message-destination-ref " + jndiName + " in "+ descriptor.getResource());
    addInjections(context,descriptor,node,jndiName,TypeUtil.fromName(type));
  }
 else   throw new IllegalStateException("message-destination-ref." + jndiName + " not found in declaring descriptor "+ otherFragment);
}
}
}

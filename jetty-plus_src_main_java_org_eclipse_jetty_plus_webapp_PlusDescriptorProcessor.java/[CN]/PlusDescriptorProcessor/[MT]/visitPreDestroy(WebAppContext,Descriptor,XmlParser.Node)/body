{
  String className=node.getString("lifecycle-callback-class",false,true);
  String methodName=node.getString("lifecycle-callback-method",false,true);
  if (className == null || className.equals("")) {
    Log.warn("No lifecycle-callback-class specified for pre-destroy");
    return;
  }
  if (methodName == null || methodName.equals("")) {
    Log.warn("No lifecycle-callback-method specified for pre-destroy class " + className);
    return;
  }
  Origin o=context.getMetaData().getOrigin("pre-destroy");
switch (o) {
case NotSet:
{
      context.getMetaData().setOrigin("pre-destroy",descriptor);
      try {
        Class<?> clazz=context.loadClass(className);
        LifeCycleCallback callback=new PreDestroyCallback();
        callback.setTarget(clazz,methodName);
        ((LifeCycleCallbackCollection)context.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION)).add(callback);
      }
 catch (      ClassNotFoundException e) {
        Log.warn("Couldn't load pre-destory target class " + className);
      }
      break;
    }
case WebXml:
case WebDefaults:
case WebOverride:
{
    if (!(descriptor instanceof FragmentDescriptor)) {
      try {
        Class<?> clazz=context.loadClass(className);
        LifeCycleCallback callback=new PreDestroyCallback();
        callback.setTarget(clazz,methodName);
        ((LifeCycleCallbackCollection)context.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION)).add(callback);
      }
 catch (      ClassNotFoundException e) {
        Log.warn("Couldn't load pre-destory target class " + className);
      }
    }
    break;
  }
case WebFragment:
{
  try {
    Class<?> clazz=context.loadClass(className);
    LifeCycleCallback callback=new PreDestroyCallback();
    callback.setTarget(clazz,methodName);
    ((LifeCycleCallbackCollection)context.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION)).add(callback);
  }
 catch (  ClassNotFoundException e) {
    Log.warn("Couldn't load pre-destory target class " + className);
  }
  break;
}
}
}

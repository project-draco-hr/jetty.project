{
  int port=_connector.getLocalPort();
  try (Socket client=newSocket("localhost",port)){
    client.setSoTimeout(5000);
    client.setTcpNoDelay(true);
    client.setSoLinger(true,1);
    OutputStream out=client.getOutputStream();
    StringBuilder buffer=new StringBuilder();
    buffer.append("GET ").append(uri).append(" HTTP/1.1\r\n");
    buffer.append("Host: localhost:").append(port).append("\r\n");
    buffer.append("Connection: close\r\n");
    flush(out,buffer,delayMs,delayInFrame,true);
    boolean chunked=contentLength < 0;
    if (chunked)     buffer.append("Transfer-Encoding: chunked\r\n");
 else     buffer.append("Content-Length: ").append(contentLength).append("\r\n");
    if (contentLength > 0)     buffer.append("Content-Type: text/plain\r\n");
    buffer.append("\r\n");
    flush(out,buffer,delayMs,delayInFrame,false);
    for (    String c : content) {
      if (chunked) {
        buffer.append("\r\n").append(Integer.toHexString(c.length())).append("\r\n");
        flush(out,buffer,delayMs,delayInFrame,true);
      }
      buffer.append(c.substring(0,1));
      flush(out,buffer,delayMs,delayInFrame,true);
      buffer.append(c.substring(1));
      flush(out,buffer,delayMs,delayInFrame,false);
    }
    if (chunked) {
      buffer.append("\r\n0");
      flush(out,buffer,delayMs,delayInFrame,true);
      buffer.append("\r\n\r\n");
    }
    flush(out,buffer);
    return IO.toString(client.getInputStream());
  }
 }

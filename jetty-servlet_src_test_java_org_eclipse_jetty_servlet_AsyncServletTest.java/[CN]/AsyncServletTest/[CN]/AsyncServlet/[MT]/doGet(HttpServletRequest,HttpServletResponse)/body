{
  try {
    request.getAsyncContext();
    throw new IllegalStateException();
  }
 catch (  IllegalStateException e) {
  }
  response.addHeader("history",request.getDispatcherType() + " " + request.getRequestURI());
  if (request instanceof ServletRequestWrapper || response instanceof ServletResponseWrapper)   response.addHeader("history","wrapped" + ((request instanceof ServletRequestWrapper) ? " REQ" : "") + ((response instanceof ServletResponseWrapper) ? " RSP" : ""));
  boolean wrap="true".equals(request.getParameter("wrap"));
  int read_before=0;
  long sleep_for=-1;
  long start_for=-1;
  long start2_for=-1;
  long dispatch_after=-1;
  long dispatch2_after=-1;
  long complete_after=-1;
  long complete2_after=-1;
  if (request.getParameter("read") != null)   read_before=Integer.parseInt(request.getParameter("read"));
  if (request.getParameter("sleep") != null)   sleep_for=Integer.parseInt(request.getParameter("sleep"));
  if (request.getParameter("start") != null)   start_for=Integer.parseInt(request.getParameter("start"));
  if (request.getParameter("start2") != null)   start2_for=Integer.parseInt(request.getParameter("start2"));
  if (request.getParameter("dispatch") != null)   dispatch_after=Integer.parseInt(request.getParameter("dispatch"));
  final String path=request.getParameter("path");
  if (request.getParameter("dispatch2") != null)   dispatch2_after=Integer.parseInt(request.getParameter("dispatch2"));
  if (request.getParameter("complete") != null)   complete_after=Integer.parseInt(request.getParameter("complete"));
  if (request.getParameter("complete2") != null)   complete2_after=Integer.parseInt(request.getParameter("complete2"));
  if (request.getAttribute("State") == null) {
    request.setAttribute("State",new Integer(1));
    response.addHeader("history","initial");
    if (read_before > 0) {
      byte[] buf=new byte[read_before];
      request.getInputStream().read(buf);
    }
 else     if (read_before < 0) {
      InputStream in=request.getInputStream();
      int b=in.read();
      while (b != -1)       b=in.read();
    }
 else     if (request.getContentLength() > 0) {
      new Thread(){
        @Override public void run(){
          int c=0;
          try {
            InputStream in=request.getInputStream();
            int b=0;
            while (b != -1)             if ((b=in.read()) >= 0)             c++;
            response.addHeader("history","async-read=" + c);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
.start();
    }
    if (start_for >= 0) {
      final AsyncContext async=wrap ? request.startAsync(new HttpServletRequestWrapper(request),new HttpServletResponseWrapper(response)) : request.startAsync();
      if (start_for > 0)       async.setTimeout(start_for);
      async.addListener(__listener);
      response.addHeader("history","start");
      if ("1".equals(request.getParameter("throw")))       throw new QuietServletException(new Exception("test throw in async 1"));
      if (complete_after > 0) {
        TimerTask complete=new TimerTask(){
          @Override public void run(){
            try {
              response.setStatus(200);
              response.getOutputStream().println("COMPLETED\n");
              response.addHeader("history","complete");
              async.complete();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
;
synchronized (_timer) {
          _timer.schedule(complete,complete_after);
        }
      }
 else       if (complete_after == 0) {
        response.setStatus(200);
        response.getOutputStream().println("COMPLETED\n");
        response.addHeader("history","complete");
        async.complete();
      }
 else       if (dispatch_after > 0) {
        TimerTask dispatch=new TimerTask(){
          @Override public void run(){
            ((HttpServletResponse)async.getResponse()).addHeader("history","dispatch");
            if (path != null) {
              int q=path.indexOf('?');
              String uriInContext=(q >= 0) ? URIUtil.encodePath(path.substring(0,q)) + path.substring(q) : URIUtil.encodePath(path);
              async.dispatch(uriInContext);
            }
 else             async.dispatch();
          }
        }
;
synchronized (_timer) {
          _timer.schedule(dispatch,dispatch_after);
        }
      }
 else       if (dispatch_after == 0) {
        ((HttpServletResponse)async.getResponse()).addHeader("history","dispatch");
        if (path != null)         async.dispatch(path);
 else         async.dispatch();
      }
    }
 else     if (sleep_for >= 0) {
      try {
        Thread.sleep(sleep_for);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      response.setStatus(200);
      response.getOutputStream().println("SLEPT\n");
    }
 else {
      response.setStatus(200);
      response.getOutputStream().println("NORMAL\n");
    }
  }
 else {
    response.addHeader("history","!initial");
    if (start2_for >= 0 && request.getAttribute("2nd") == null) {
      final AsyncContext async=wrap ? request.startAsync(new HttpServletRequestWrapper(request),new HttpServletResponseWrapper(response)) : request.startAsync();
      async.addListener(__listener);
      request.setAttribute("2nd","cycle");
      if (start2_for > 0) {
        async.setTimeout(start2_for);
      }
      response.addHeader("history","start");
      if ("2".equals(request.getParameter("throw")))       throw new QuietServletException(new Exception("test throw in async 2"));
      if (complete2_after > 0) {
        TimerTask complete=new TimerTask(){
          @Override public void run(){
            try {
              response.setStatus(200);
              response.getOutputStream().println("COMPLETED\n");
              response.addHeader("history","complete");
              async.complete();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
;
synchronized (_timer) {
          _timer.schedule(complete,complete2_after);
        }
      }
 else       if (complete2_after == 0) {
        response.setStatus(200);
        response.getOutputStream().println("COMPLETED\n");
        response.addHeader("history","complete");
        async.complete();
      }
 else       if (dispatch2_after > 0) {
        TimerTask dispatch=new TimerTask(){
          @Override public void run(){
            response.addHeader("history","dispatch");
            async.dispatch();
          }
        }
;
synchronized (_timer) {
          _timer.schedule(dispatch,dispatch2_after);
        }
      }
 else       if (dispatch2_after == 0) {
        response.addHeader("history","dispatch");
        async.dispatch();
      }
    }
 else     if (request.getDispatcherType() == DispatcherType.ERROR) {
      response.getOutputStream().println("ERROR DISPATCH: " + request.getContextPath() + request.getServletPath()+ request.getPathInfo());
    }
 else {
      response.setStatus(200);
      response.getOutputStream().println("DISPATCHED");
    }
  }
}

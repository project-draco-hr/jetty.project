{
  if (request.method() == null)   request.method(HttpMethod.GET);
  if (request.version() == null)   request.version(HttpVersion.HTTP_1_1);
  if (request.agent() == null)   request.agent(client.getUserAgent());
  if (request.idleTimeout() <= 0)   request.idleTimeout(client.getIdleTimeout());
  HttpVersion version=request.version();
  HttpFields headers=request.headers();
  ContentProvider content=request.content();
  String path=request.path();
  if (path.matches("\\s*"))   request.path("/");
  if (content != null) {
    long contentLength=content.length();
    if (contentLength >= 0) {
      if (!headers.containsKey(HttpHeader.CONTENT_LENGTH.asString()))       headers.put(HttpHeader.CONTENT_LENGTH,String.valueOf(contentLength));
    }
 else {
      if (!headers.containsKey(HttpHeader.TRANSFER_ENCODING.asString()))       headers.put(HttpHeader.TRANSFER_ENCODING,"chunked");
    }
  }
  List<HttpCookie> cookies=client.getCookieStore().findCookies(getDestination(),request.path());
  StringBuilder cookieString=null;
  for (int i=0; i < cookies.size(); ++i) {
    if (cookieString == null)     cookieString=new StringBuilder();
    if (i > 0)     cookieString.append("; ");
    HttpCookie cookie=cookies.get(i);
    cookieString.append(cookie.getName()).append("=").append(cookie.getValue());
  }
  if (cookieString != null)   request.header(HttpHeader.COOKIE.asString(),cookieString.toString());
  Authentication.Result authnResult=client.getAuthenticationStore().findAuthenticationResult(request.uri());
  if (authnResult != null)   authnResult.apply(request);
  if (version.getVersion() > 10) {
    if (!headers.containsKey(HttpHeader.HOST.asString())) {
      String value=request.host();
      int port=request.port();
      if (port > 0)       value+=":" + port;
      headers.put(HttpHeader.HOST,value);
    }
  }
}

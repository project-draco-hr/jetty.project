{
  if (request.getMethod() == null)   request.method(HttpMethod.GET);
  if (request.getVersion() == null)   request.version(HttpVersion.HTTP_1_1);
  if (request.getIdleTimeout() <= 0)   request.idleTimeout(client.getIdleTimeout(),TimeUnit.MILLISECONDS);
  HttpMethod method=request.getMethod();
  HttpVersion version=request.getVersion();
  HttpFields headers=request.getHeaders();
  ContentProvider content=request.getContent();
  if (request.getAgent() == null)   headers.put(client.getUserAgentField());
  String path=request.getPath();
  if (path.trim().length() == 0) {
    path="/";
    request.path(path);
  }
  if (destination.isProxied() && HttpMethod.CONNECT != method) {
    path=request.getURI().toString();
    request.path(path);
  }
  if (version.getVersion() > 10) {
    if (!headers.containsKey(HttpHeader.HOST.asString()))     headers.put(getHttpDestination().getHostField());
  }
  if (content != null) {
    long contentLength=content.getLength();
    if (contentLength >= 0) {
      if (!headers.containsKey(HttpHeader.CONTENT_LENGTH.asString()))       headers.put(HttpHeader.CONTENT_LENGTH,String.valueOf(contentLength));
    }
 else {
      if (!headers.containsKey(HttpHeader.TRANSFER_ENCODING.asString()))       headers.put(CHUNKED_FIELD);
    }
  }
  List<HttpCookie> cookies=client.getCookieStore().get(request.getURI());
  StringBuilder cookieString=null;
  for (int i=0; i < cookies.size(); ++i) {
    if (cookieString == null)     cookieString=new StringBuilder();
    if (i > 0)     cookieString.append("; ");
    HttpCookie cookie=cookies.get(i);
    cookieString.append(cookie.getName()).append("=").append(cookie.getValue());
  }
  if (cookieString != null)   request.header(HttpHeader.COOKIE.asString(),cookieString.toString());
  URI authenticationURI=destination.isProxied() ? destination.getProxyURI() : request.getURI();
  Authentication.Result authnResult=client.getAuthenticationStore().findAuthenticationResult(authenticationURI);
  if (authnResult != null)   authnResult.apply(request);
  if (!headers.containsKey(HttpHeader.ACCEPT_ENCODING.asString())) {
    HttpField acceptEncodingField=client.getAcceptEncodingField();
    if (acceptEncodingField != null)     headers.put(acceptEncodingField);
  }
}

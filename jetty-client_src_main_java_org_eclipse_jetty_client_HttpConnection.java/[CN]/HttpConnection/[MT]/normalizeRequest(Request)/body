{
  if (request.getMethod() == null)   request.method(HttpMethod.GET);
  if (request.getVersion() == null)   request.version(HttpVersion.HTTP_1_1);
  if (request.getAgent() == null)   request.agent(client.getUserAgent());
  if (request.getIdleTimeout() <= 0)   request.idleTimeout(client.getIdleTimeout(),TimeUnit.MILLISECONDS);
  HttpMethod method=request.getMethod();
  HttpVersion version=request.getVersion();
  HttpFields headers=request.getHeaders();
  ContentProvider content=request.getContent();
  String path=request.getPath();
  if (path.matches("\\s*")) {
    path="/";
    request.path(path);
  }
  if (destination.isProxied() && HttpMethod.CONNECT != request.getMethod()) {
    path=request.getURI();
    request.path(path);
  }
  Fields fields=request.getParams();
  if (!fields.isEmpty()) {
    StringBuilder params=new StringBuilder();
    for (Iterator<Fields.Field> fieldIterator=fields.iterator(); fieldIterator.hasNext(); ) {
      Fields.Field field=fieldIterator.next();
      String[] values=field.values();
      for (int i=0; i < values.length; ++i) {
        if (i > 0)         params.append("&");
        params.append(field.name()).append("=");
        params.append(urlEncode(values[i]));
      }
      if (fieldIterator.hasNext())       params.append("&");
    }
    if (method == HttpMethod.POST && request.getContent() != null)     method=HttpMethod.GET;
switch (method) {
case GET:
{
        path+="?";
        path+=params.toString();
        request.path(path);
        break;
      }
case POST:
{
      request.header(HttpHeader.CONTENT_TYPE.asString(),MimeTypes.Type.FORM_ENCODED.asString());
      request.content(new StringContentProvider(params.toString()));
      break;
    }
}
}
if (version.getVersion() > 10) {
if (!headers.containsKey(HttpHeader.HOST.asString())) {
  String value=request.getHost();
  int port=request.getPort();
  if (port > 0)   value+=":" + port;
  headers.put(HttpHeader.HOST,value);
}
}
if (content != null) {
long contentLength=content.getLength();
if (contentLength >= 0) {
  if (!headers.containsKey(HttpHeader.CONTENT_LENGTH.asString()))   headers.put(HttpHeader.CONTENT_LENGTH,String.valueOf(contentLength));
}
 else {
  if (!headers.containsKey(HttpHeader.TRANSFER_ENCODING.asString()))   headers.put(HttpHeader.TRANSFER_ENCODING,"chunked");
}
}
List<HttpCookie> cookies=client.getCookieStore().get(URI.create(request.getURI()));
StringBuilder cookieString=null;
for (int i=0; i < cookies.size(); ++i) {
if (cookieString == null) cookieString=new StringBuilder();
if (i > 0) cookieString.append("; ");
HttpCookie cookie=cookies.get(i);
cookieString.append(cookie.getName()).append("=").append(cookie.getValue());
}
if (cookieString != null) request.header(HttpHeader.COOKIE.asString(),cookieString.toString());
Authentication.Result authnResult=client.getAuthenticationStore().findAuthenticationResult(request.getURI());
if (authnResult != null) authnResult.apply(request);
if (!headers.containsKey(HttpHeader.ACCEPT_ENCODING.asString())) {
Set<ContentDecoder.Factory> decoderFactories=client.getContentDecoderFactories();
if (!decoderFactories.isEmpty()) {
  StringBuilder value=new StringBuilder();
  for (Iterator<ContentDecoder.Factory> iterator=decoderFactories.iterator(); iterator.hasNext(); ) {
    ContentDecoder.Factory decoderFactory=iterator.next();
    value.append(decoderFactory.getEncoding());
    if (iterator.hasNext())     value.append(",");
  }
  headers.put(HttpHeader.ACCEPT_ENCODING,value.toString());
}
}
}

{
synchronized (this) {
    if (_exchange.getStatus() != HttpExchange.STATUS_WAITING_FOR_COMMIT)     throw new IllegalStateException();
    _exchange.setStatus(HttpExchange.STATUS_SENDING_REQUEST);
    _generator.setVersion(_exchange.getVersion());
    String uri=_exchange.getURI();
    if (_destination.isProxied() && uri.startsWith("/")) {
      uri=(_destination.isSecure() ? HttpSchemes.HTTPS : HttpSchemes.HTTP) + "://" + _destination.getAddress().getHost()+ ":"+ _destination.getAddress().getPort()+ uri;
      Authentication auth=_destination.getProxyAuthentication();
      if (auth != null)       auth.setCredentials(_exchange);
    }
    String method=_exchange.getMethod();
    _generator.setRequest(method,uri);
    _parser.setHeadResponse(HttpMethods.HEAD.equalsIgnoreCase(method));
    HttpFields requestHeaders=_exchange.getRequestFields();
    if (_exchange.getVersion() >= HttpVersions.HTTP_1_1_ORDINAL) {
      if (!requestHeaders.containsKey(HttpHeaders.HOST_BUFFER))       requestHeaders.add(HttpHeaders.HOST_BUFFER,_destination.getHostHeader());
    }
    Buffer requestContent=_exchange.getRequestContent();
    if (requestContent != null) {
      requestHeaders.putLongField(HttpHeaders.CONTENT_LENGTH,requestContent.length());
      _generator.completeHeader(requestHeaders,false);
      _generator.addContent(requestContent,true);
    }
 else {
      InputStream requestContentStream=_exchange.getRequestContentSource();
      if (requestContentStream != null) {
        _generator.completeHeader(requestHeaders,false);
        int available=requestContentStream.available();
        if (available > 0) {
          byte[] buf=new byte[available];
          int length=requestContentStream.read(buf);
          _generator.addContent(new ByteArrayBuffer(buf,0,length),false);
        }
      }
 else {
        requestHeaders.remove(HttpHeaders.CONTENT_LENGTH);
        _generator.completeHeader(requestHeaders,true);
      }
    }
    _exchange.setStatus(HttpExchange.STATUS_WAITING_FOR_RESPONSE);
  }
}

{
  this.statusCode=StatusCode.NO_CODE;
  if ((payload == null) || (payload.remaining() == 0)) {
    return;
  }
  ByteBuffer data=payload.slice();
  if ((data.remaining() == 1) && (validate)) {
    throw new ProtocolException("Invalid 1 byte payload");
  }
  if (data.remaining() >= 2) {
    statusCode=0;
    statusCode|=(data.get() & 0xFF) << 8;
    statusCode|=(data.get() & 0xFF);
    if (validate) {
      if ((statusCode < StatusCode.NORMAL) || (statusCode == StatusCode.UNDEFINED) || (statusCode == StatusCode.NO_CLOSE)|| (statusCode == StatusCode.NO_CODE)|| ((statusCode > 1011) && (statusCode <= 2999))|| (statusCode >= 5000)) {
        throw new ProtocolException("Invalid close code: " + statusCode);
      }
    }
    if (data.remaining() > 0) {
      int len=Math.min(data.remaining(),CloseStatus.MAX_REASON_PHRASE);
      reasonBytes=new byte[len];
      data.get(reasonBytes,0,len);
      if (validate) {
        try {
          Utf8StringBuilder utf=new Utf8StringBuilder();
          utf.append(reasonBytes,0,reasonBytes.length);
        }
 catch (        NotUtf8Exception e) {
          throw new BadPayloadException("Invalid Close Reason",e);
        }
      }
    }
  }
}

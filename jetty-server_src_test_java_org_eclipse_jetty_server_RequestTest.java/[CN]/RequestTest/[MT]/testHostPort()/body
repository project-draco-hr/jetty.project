{
  final ArrayList<String> results=new ArrayList<>();
  _handler._checker=new RequestTester(){
    @Override public boolean check(    HttpServletRequest request,    HttpServletResponse response){
      results.add(request.getRequestURL().toString());
      results.add(request.getRemoteAddr());
      results.add(request.getServerName());
      results.add(String.valueOf(request.getServerPort()));
      return true;
    }
  }
;
  results.clear();
  String response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: myhost\n" + "Connection: close\n"+ "\n");
  int i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://myhost/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("myhost",results.get(i++));
  assertEquals("80",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: myhost:8888\n" + "Connection: close\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://myhost:8888/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("myhost",results.get(i++));
  assertEquals("8888",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET http://myhost:8888/ HTTP/1.0\n" + "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://myhost:8888/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("myhost",results.get(i++));
  assertEquals("8888",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET http://myhost:8888/ HTTP/1.1\n" + "Host: wrong:666\n" + "Connection: close\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://myhost:8888/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("myhost",results.get(i++));
  assertEquals("8888",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: 1.2.3.4\n" + "Connection: close\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://1.2.3.4/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("1.2.3.4",results.get(i++));
  assertEquals("80",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: 1.2.3.4:8888\n" + "Connection: close\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://1.2.3.4:8888/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("1.2.3.4",results.get(i++));
  assertEquals("8888",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: [::1]\n" + "Connection: close\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://[::1]/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("::1",results.get(i++));
  assertEquals("80",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: [::1]:8888\n" + "Connection: close\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("http://[::1]:8888/",results.get(i++));
  assertEquals("0.0.0.0",results.get(i++));
  assertEquals("::1",results.get(i++));
  assertEquals("8888",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: [::1]\n" + "x-forwarded-for: remote\n"+ "x-forwarded-proto: https\n"+ "Connection: close\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("https://[::1]/",results.get(i++));
  assertEquals("remote",results.get(i++));
  assertEquals("::1",results.get(i++));
  assertEquals("443",results.get(i++));
  results.clear();
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: [::1]:8888\n" + "Connection: close\n"+ "x-forwarded-for: remote\n"+ "x-forwarded-proto: https\n"+ "\n");
  i=0;
  assertThat(response,Matchers.containsString("200 OK"));
  assertEquals("https://[::1]:8888/",results.get(i++));
  assertEquals("remote",results.get(i++));
  assertEquals("::1",results.get(i++));
  assertEquals("8888",results.get(i++));
}

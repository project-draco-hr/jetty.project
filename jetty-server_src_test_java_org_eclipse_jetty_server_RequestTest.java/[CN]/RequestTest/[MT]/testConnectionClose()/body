{
  String response;
  _handler._checker=new RequestTester(){
    @Override public boolean check(    HttpServletRequest request,    HttpServletResponse response) throws IOException {
      response.getOutputStream().println("Hello World");
      return true;
    }
  }
;
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: whatever\n" + "\n",200,TimeUnit.MILLISECONDS);
  assertThat(response,Matchers.containsString("200"));
  assertThat(response,Matchers.not(Matchers.containsString("Connection: close")));
  assertThat(response,Matchers.containsString("Hello World"));
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: whatever\n" + "Connection: close\n"+ "\n");
  assertThat(response,Matchers.containsString("200"));
  assertThat(response,Matchers.containsString("Connection: close"));
  assertThat(response,Matchers.containsString("Hello World"));
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: whatever\n" + "Connection: Other, close\n"+ "\n");
  assertThat(response,Matchers.containsString("200"));
  assertThat(response,Matchers.containsString("Connection: close"));
  assertThat(response,Matchers.containsString("Hello World"));
  response=_connector.getResponses("GET / HTTP/1.0\n" + "Host: whatever\n" + "\n");
  assertThat(response,Matchers.containsString("200"));
  assertThat(response,Matchers.not(Matchers.containsString("Connection: close")));
  assertThat(response,Matchers.containsString("Hello World"));
  response=_connector.getResponses("GET / HTTP/1.0\n" + "Host: whatever\n" + "Connection: Other, close\n"+ "\n");
  assertThat(response,Matchers.containsString("200"));
  assertThat(response,Matchers.containsString("Hello World"));
  response=_connector.getResponses("GET / HTTP/1.0\n" + "Host: whatever\n" + "Connection: Other,,keep-alive\n"+ "\n",200,TimeUnit.MILLISECONDS);
  assertThat(response,Matchers.containsString("200"));
  assertThat(response,Matchers.containsString("Connection: keep-alive"));
  assertThat(response,Matchers.containsString("Hello World"));
  _handler._checker=new RequestTester(){
    @Override public boolean check(    HttpServletRequest request,    HttpServletResponse response) throws IOException {
      response.setHeader("Connection","TE");
      response.addHeader("Connection","Other");
      response.getOutputStream().println("Hello World");
      return true;
    }
  }
;
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: whatever\n" + "\n",200,TimeUnit.MILLISECONDS);
  assertThat(response,Matchers.containsString("200"));
  assertThat(response,Matchers.containsString("Connection: TE,Other"));
  assertThat(response,Matchers.containsString("Hello World"));
  response=_connector.getResponses("GET / HTTP/1.1\n" + "Host: whatever\n" + "Connection: close\n"+ "\n");
  assertThat(response,Matchers.containsString("200 OK"));
  assertThat(response,Matchers.containsString("Connection: close"));
  assertThat(response,Matchers.containsString("Hello World"));
}

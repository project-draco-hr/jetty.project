{
  _handler._checker=new RequestTester(){
    @Override public boolean check(    HttpServletRequest request,    HttpServletResponse response){
      try {
        Part foo=request.getPart("stuff");
        assertNotNull(foo);
        String value=request.getParameter("stuff");
        byte[] expected="000000000000000000000000000000000000000000000000000".getBytes("ISO-8859-1");
        return value.equals(new String(expected,"ISO-8859-1"));
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
  }
;
  String multipart="--AaB03x\r\n" + "content-disposition: form-data; name=\"field1\"\r\n" + "\r\n"+ "Joe Blow\r\n"+ "--AaB03x\r\n"+ "content-disposition: form-data; name=\"stuff\"\r\n"+ "Content-Type: text/plain;charset=ISO-8859-1\r\n"+ "\r\n"+ "000000000000000000000000000000000000000000000000000\r\n"+ "--AaB03x--\r\n";
  String request="GET / HTTP/1.1\r\n" + "Host: whatever\r\n" + "Content-Type: multipart/form-data; boundary=\"AaB03x\"\r\n"+ "Content-Length: " + multipart.getBytes().length + "\r\n"+ "\r\n"+ multipart;
  String responses=_connector.getResponses(request);
  assertTrue(responses.startsWith("HTTP/1.1 200"));
}

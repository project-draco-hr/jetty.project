{
  try {
    _logger=logger;
    Class<?> lc=logger.getClass();
    _debugMT=lc.getMethod("debug",new Class[]{String.class,Throwable.class});
    _debugMAA=lc.getMethod("debug",new Class[]{String.class,Object.class,Object.class});
    _infoMAA=lc.getMethod("info",new Class[]{String.class,Object.class,Object.class});
    _warnMT=lc.getMethod("warn",new Class[]{String.class,Throwable.class});
    _warnMAA=lc.getMethod("warn",new Class[]{String.class,Object.class,Object.class});
    _isDebugEnabled=lc.getMethod("isDebugEnabled",new Class[]{});
    _setDebugEnabledE=lc.getMethod("setDebugEnabled",new Class[]{Boolean.TYPE});
    _getLoggerN=lc.getMethod("getLogger",new Class[]{String.class});
    _debug=((Boolean)_isDebugEnabled.invoke(_logger,(Object[])null)).booleanValue();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IllegalStateException(e);
  }
}

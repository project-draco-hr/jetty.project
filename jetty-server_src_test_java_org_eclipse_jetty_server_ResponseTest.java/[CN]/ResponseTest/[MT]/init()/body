{
  _server=new Server();
  _connector=new LocalHttpConnector();
  _server.addConnector(_connector);
  _server.setHandler(new DumpHandler());
  _server.start();
  _timer=new ScheduledThreadPoolExecutor(1);
  AsyncByteArrayEndPoint endp=new AsyncByteArrayEndPoint(_timer,5000);
  HttpInput input=new HttpInput();
  AsyncConnection connection=new AbstractAsyncConnection(endp,new Executor(){
    @Override public void execute(    Runnable command){
      command.run();
    }
  }
){
    @Override public void onFillable(){
    }
  }
;
  _channel=new HttpChannel(_server,connection,input){
    @Override protected int write(    ByteBuffer content) throws IOException {
      int length=content.remaining();
      content.clear();
      return length;
    }
    @Override protected void resetBuffer(){
    }
    @Override protected void increaseContentBufferSize(    int size){
    }
    @Override public ScheduledExecutorService getScheduler(){
      return null;
    }
    @Override public HttpConnector getHttpConnector(){
      return null;
    }
    @Override protected int getContentBufferSize(){
      return 0;
    }
    @Override protected void flushResponse() throws IOException {
      if (!_channel.getResponse().isCommitted())       _channel.getResponse().commit();
    }
    @Override protected void execute(    Runnable task){
    }
    @Override protected void completed(){
    }
    @Override protected void completeResponse() throws IOException {
    }
    @Override protected void commitResponse(    ResponseInfo info,    ByteBuffer content) throws IOException {
    }
  }
;
}

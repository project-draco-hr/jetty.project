{
  _server=new Server();
  _connector=new LocalConnector(_server);
  _server.addConnector(_connector);
  _server.setHandler(new DumpHandler());
  _server.start();
  _timer=new ScheduledThreadPoolExecutor(1);
  AbstractEndPoint endp=new ByteArrayEndPoint(_timer,5000);
  HttpInput input=new HttpInput();
  Connection connection=new AbstractConnection(endp,new Executor(){
    @Override public void execute(    Runnable command){
      command.run();
    }
  }
){
    @Override public void onOpen(){
      super.onOpen();
      fillInterested();
    }
    @Override public void onFillable(){
    }
  }
;
  _channel=new HttpChannel(_connector,null,endp,null,null){
    protected void flush(    ByteBuffer content,    boolean last) throws IOException {
      content.clear();
    }
    protected FutureCallback<Void> write(    ResponseInfo info,    ByteBuffer content) throws IOException {
      content.clear();
      FutureCallback<Void> fcb=new FutureCallback<>();
      fcb.completed(null);
      return fcb;
    }
    @Override public ScheduledExecutorService getScheduler(){
      return null;
    }
    @Override public HttpConfiguration getHttpConfiguration(){
      return null;
    }
    @Override protected void execute(    Runnable task){
    }
    @Override public Connector getConnector(){
      return null;
    }
  }
;
}

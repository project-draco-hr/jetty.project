{
  try {
    while (buffer.hasRemaining()) {
      byte currByte=buffer.get();
switch (state) {
case INITIAL:
{
          buffer.position(buffer.position() - 1);
          state=State.ID;
          break;
        }
case ID:
{
        value+=(currByte & 0xFF) << 8 * size;
        ++size;
        if (size == 2) {
          if (value != 0x8B1F)           throw new ZipException("Invalid gzip bytes");
          state=State.CM;
        }
        break;
      }
case CM:
{
      if ((currByte & 0xFF) != 0x08)       throw new ZipException("Invalid gzip compression method");
      state=State.FLG;
      break;
    }
case FLG:
{
    flags=currByte;
    state=State.MTIME;
    size=0;
    value=0;
    break;
  }
case MTIME:
{
  ++size;
  if (size == 4)   state=State.XFL;
  break;
}
case XFL:
{
state=State.OS;
break;
}
case OS:
{
state=State.FLAGS;
break;
}
case FLAGS:
{
buffer.position(buffer.position() - 1);
if ((flags & 0x04) == 0x04) {
state=State.EXTRA_LENGTH;
size=0;
value=0;
}
 else if ((flags & 0x08) == 0x08) state=State.NAME;
 else if ((flags & 0x10) == 0x10) state=State.COMMENT;
 else if ((flags & 0x2) == 0x2) {
state=State.HCRC;
size=0;
value=0;
}
 else state=State.DATA;
break;
}
case EXTRA_LENGTH:
{
value+=(currByte & 0xFF) << 8 * size;
++size;
if (size == 2) state=State.EXTRA;
break;
}
case EXTRA:
{
--value;
if (value == 0) {
flags&=~0x04;
state=State.FLAGS;
}
break;
}
case NAME:
{
if (currByte == 0) {
flags&=~0x08;
state=State.FLAGS;
}
break;
}
case COMMENT:
{
if (currByte == 0) {
flags&=~0x10;
state=State.FLAGS;
}
break;
}
case HCRC:
{
++size;
if (size == 2) {
flags&=~0x02;
state=State.FLAGS;
}
break;
}
case DATA:
{
buffer.position(buffer.position() - 1);
while (true) {
int decoded=inflate(bytes);
if (decoded == 0) {
if (inflater.needsInput()) {
if (buffer.hasRemaining()) {
byte[] input=new byte[buffer.remaining()];
buffer.get(input);
inflater.setInput(input);
}
 else {
if (output != null) {
ByteBuffer result=ByteBuffer.wrap(output);
output=null;
return result;
}
break;
}
}
 else if (inflater.finished()) {
int remaining=inflater.getRemaining();
buffer.position(buffer.limit() - remaining);
state=State.CRC;
size=0;
value=0;
break;
}
 else {
throw new ZipException("Invalid inflater state");
}
}
 else {
if (output == null) {
output=new byte[decoded];
System.arraycopy(bytes,0,output,0,decoded);
}
 else {
byte[] newOutput=new byte[output.length + decoded];
System.arraycopy(output,0,newOutput,0,output.length);
System.arraycopy(bytes,0,newOutput,output.length,decoded);
output=newOutput;
}
}
}
break;
}
case CRC:
{
value+=(currByte & 0xFF) << 8 * size;
++size;
if (size == 4) {
state=State.ISIZE;
size=0;
value=0;
}
break;
}
case ISIZE:
{
value+=(currByte & 0xFF) << 8 * size;
++size;
if (size == 4) {
if (value != inflater.getBytesWritten()) throw new ZipException("Invalid input size");
ByteBuffer result=output == null ? BufferUtil.EMPTY_BUFFER : ByteBuffer.wrap(output);
reset();
return result;
}
break;
}
default :
throw new ZipException();
}
}
return BufferUtil.EMPTY_BUFFER;
}
 catch (ZipException x) {
throw new RuntimeException(x);
}
}

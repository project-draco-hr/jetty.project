{
  EndPoint _endp=getEndPoint();
  try {
    _last=System.currentTimeMillis();
    boolean progress=true;
    while (progress) {
      progress=false;
      if (BufferUtil.isFull(_in))       throw new IllegalStateException("FULL " + BufferUtil.toDetailString(_in));
      int filled=_endp.fill(_in);
      if (filled > 0)       progress=true;
      while (_blockAt > 0 && _endp.isOpen() && _in.remaining() < _blockAt) {
        FutureCallback<Void> blockingRead=new FutureCallback<>();
        _endp.fillInterested(null,blockingRead);
        blockingRead.get();
        filled=_endp.fill(_in);
        progress|=filled > 0;
      }
      if (BufferUtil.hasContent(_in) && BufferUtil.append(_in,_out) > 0)       progress=true;
      if (BufferUtil.hasContent(_out)) {
        ByteBuffer out=_out.duplicate();
        BufferUtil.clear(_out);
        for (int i=0; i < _writeCount; i++) {
          FutureCallback<Void> blockingWrite=new FutureCallback<>();
          _endp.write(null,blockingWrite,out.asReadOnlyBuffer());
          blockingWrite.get();
        }
        progress=true;
      }
      if (_endp.isInputShutdown())       _endp.shutdownOutput();
    }
  }
 catch (  ExecutionException e) {
    try {
      FutureCallback<Void> blockingWrite=new FutureCallback<>();
      _endp.write(null,blockingWrite,BufferUtil.toBuffer("EE: " + BufferUtil.toString(_in)));
      blockingWrite.get();
      _endp.shutdownOutput();
    }
 catch (    Exception e2) {
    }
  }
catch (  InterruptedException|EofException e) {
    SelectChannelEndPoint.LOG.ignore(e);
  }
catch (  Exception e) {
    SelectChannelEndPoint.LOG.warn(e);
  }
 finally {
    if (_endp.isOpen())     fillInterested();
  }
}

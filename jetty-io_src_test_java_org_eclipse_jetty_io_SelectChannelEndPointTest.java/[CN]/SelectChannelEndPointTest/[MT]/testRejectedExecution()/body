{
  _manager.stop();
  _threadPool.stop();
  final CountDownLatch latch=new CountDownLatch(1);
  BlockingQueue<Runnable> q=new ArrayBlockingQueue<>(4);
  _threadPool=new QueuedThreadPool(4,4,60000,q);
  _manager=new SelectorManager(_threadPool,_scheduler,1){
    @Override public Connection newConnection(    SocketChannel channel,    EndPoint endpoint,    Object attachment){
      return new TestConnection(endpoint,latch);
    }
    @Override protected SelectChannelEndPoint newEndPoint(    SocketChannel channel,    ManagedSelector selectSet,    SelectionKey selectionKey) throws IOException {
      SelectChannelEndPoint endp=new SelectChannelEndPoint(channel,selectSet,selectionKey,getScheduler(),60000);
      _lastEndPoint=endp;
      _lastEndPointLatch.countDown();
      return endp;
    }
  }
;
  _threadPool.start();
  _manager.start();
  AtomicInteger timeout=new AtomicInteger();
  AtomicInteger rejections=new AtomicInteger();
  AtomicInteger echoed=new AtomicInteger();
  CountDownLatch closed=new CountDownLatch(20);
  for (int i=0; i < 20; i++) {
    new Thread(){
      public void run(){
        try (Socket client=newClient()){
          client.setSoTimeout(5000);
          SocketChannel server=_connector.accept();
          server.configureBlocking(false);
          _manager.accept(server);
          client.getOutputStream().write("HelloWorld".getBytes(StandardCharsets.UTF_8));
          client.getOutputStream().flush();
          client.shutdownOutput();
          for (          char c : "HelloWorld".toCharArray()) {
            int b=client.getInputStream().read();
            assertTrue(b > 0);
            assertEquals(c,(char)b);
          }
          assertEquals(-1,client.getInputStream().read());
          echoed.incrementAndGet();
        }
 catch (        SocketTimeoutException x) {
          x.printStackTrace();
          timeout.incrementAndGet();
        }
catch (        Throwable x) {
          rejections.incrementAndGet();
        }
 finally {
          closed.countDown();
        }
      }
    }
.start();
  }
  latch.countDown();
  closed.await();
  Assert.assertThat(rejections.get(),Matchers.greaterThan(0));
  Assert.assertThat(rejections.get(),Matchers.lessThan(20));
  Assert.assertThat(timeout.get(),Matchers.equalTo(0));
  Assert.assertThat(echoed.get(),Matchers.equalTo(20 - rejections.get()));
  try (Socket client=newClient()){
    client.setSoTimeout(5000);
    SocketChannel server=_connector.accept();
    server.configureBlocking(false);
    _manager.accept(server);
    client.getOutputStream().write("HelloWorld".getBytes(StandardCharsets.UTF_8));
    client.getOutputStream().flush();
    client.shutdownOutput();
    for (    char c : "HelloWorld".toCharArray()) {
      int b=client.getInputStream().read();
      assertTrue(b > 0);
      assertEquals(c,(char)b);
    }
    assertEquals(-1,client.getInputStream().read());
  }
 }

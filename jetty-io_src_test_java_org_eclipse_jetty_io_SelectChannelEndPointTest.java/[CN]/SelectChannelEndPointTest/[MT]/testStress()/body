{
  Socket client=newClient();
  client.setSoTimeout(60000);
  SocketChannel server=_connector.accept();
  server.configureBlocking(false);
  _manager.accept(server);
  int writes=100000;
  final byte[] bytes="HelloWorld-".getBytes(StringUtil.__UTF8_CHARSET);
  byte[] count="0\n".getBytes(StringUtil.__UTF8_CHARSET);
  BufferedOutputStream out=new BufferedOutputStream(client.getOutputStream());
  final CountDownLatch latch=new CountDownLatch(writes);
  final InputStream in=new BufferedInputStream(client.getInputStream());
  final long start=System.currentTimeMillis();
  out.write(bytes);
  out.write(count);
  out.flush();
  while (_lastEndp == null)   Thread.sleep(10);
  _lastEndp.setMaxIdleTime(5000);
  new Thread(){
    public void run(){
      Thread.currentThread().setPriority(MAX_PRIORITY);
      long last=-1;
      int count=-1;
      try {
        while (latch.getCount() > 0) {
          for (          byte b0 : bytes) {
            int b=in.read();
            Assert.assertThat(b,greaterThan(0));
            assertEquals(0xff & b0,b);
          }
          count=0;
          int b=in.read();
          while (b > 0 && b != '\n') {
            count=count * 10 + (b - '0');
            b=in.read();
          }
          last=System.currentTimeMillis();
          latch.countDown();
        }
      }
 catch (      Throwable e) {
        long now=System.currentTimeMillis();
        System.err.println("count=" + count);
        System.err.println("latch=" + latch.getCount());
        System.err.println("time=" + (now - start));
        System.err.println("last=" + (now - last));
        System.err.println("endp=" + _lastEndp);
        e.printStackTrace();
      }
    }
  }
.start();
  for (int i=1; i < writes; i++) {
    out.write(bytes);
    out.write(Integer.toString(i).getBytes(StringUtil.__ISO_8859_1_CHARSET));
    out.write('\n');
    if (i % 100 == 0)     out.flush();
    Thread.yield();
  }
  out.flush();
  assertTrue(latch.await(100,TimeUnit.SECONDS));
}

{
  if (_deflater.needsInput()) {
    if (BufferUtil.isEmpty(_content)) {
      if (_deflater.finished()) {
        _factory.recycle(_deflater);
        _deflater=null;
        getHttpChannel().getByteBufferPool().release(_buffer);
        _buffer=null;
        return Action.SUCCEEDED;
      }
      if (!_last) {
        return Action.SUCCEEDED;
      }
    }
 else {
      BufferUtil.clearToFill(_input);
      int took=BufferUtil.put(_content,_input);
      BufferUtil.flipToFlush(_input,0);
      if (took == 0)       throw new IllegalStateException();
      byte[] array=_input.array();
      int off=_input.arrayOffset() + _input.position();
      int len=_input.remaining();
      _crc.update(array,off,len);
      _deflater.setInput(array,off,len);
      if (_last && BufferUtil.isEmpty(_content))       _deflater.finish();
    }
  }
  BufferUtil.compact(_buffer);
  int off=_buffer.arrayOffset() + _buffer.limit();
  int len=_buffer.capacity() - _buffer.limit() - (_last ? 8 : 0);
  int produced=_deflater.deflate(_buffer.array(),off,len,Deflater.NO_FLUSH);
  if (produced == 0) {
    LOG.warn(String.format("AsyncGzipFilter NO PROGRESS!!!! content=%s, input=%s, last=%b, deflater=%s finished=%b",BufferUtil.toDetailString(_content),BufferUtil.toDetailString(_input),_last,_deflater,_deflater.finished()));
  }
  _buffer.limit(_buffer.limit() + produced);
  boolean finished=_deflater.finished();
  if (finished)   addTrailer();
  superWrite(_buffer,finished,this);
  return Action.SCHEDULED;
}

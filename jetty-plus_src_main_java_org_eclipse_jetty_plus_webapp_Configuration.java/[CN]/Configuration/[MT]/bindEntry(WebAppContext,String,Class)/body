{
  String nameInEnvironment=name;
  boolean bound=false;
  Object scope=context;
  NamingEntry ne=NamingEntryUtil.lookupNamingEntry(scope,name);
  if (ne != null && (ne instanceof Link)) {
    nameInEnvironment=(String)((Link)ne).getObjectToBind();
    Link l=(Link)ne;
    System.err.println("Link, with nameInEnvironment=" + nameInEnvironment);
  }
  System.err.println("Trying to find " + nameInEnvironment + " in webapp scope");
  scope=context;
  bound=NamingEntryUtil.bindToENC(scope,name,nameInEnvironment);
  if (bound)   return;
  System.err.println("Trying to find " + nameInEnvironment + " in server scope");
  scope=context.getServer();
  bound=NamingEntryUtil.bindToENC(scope,name,nameInEnvironment);
  if (bound)   return;
  System.err.println("Trying to find " + nameInEnvironment + " in jvm scope");
  bound=NamingEntryUtil.bindToENC(null,name,nameInEnvironment);
  if (bound)   return;
  System.err.println("Didn't find " + nameInEnvironment + " anywhere - looking for "+ typeClass.getName()+ "/default in server or jvm scope");
  nameInEnvironment=typeClass.getName() + "/default";
  NamingEntry defaultNE=NamingEntryUtil.lookupNamingEntry(context.getServer(),nameInEnvironment);
  if (defaultNE == null)   defaultNE=NamingEntryUtil.lookupNamingEntry(null,nameInEnvironment);
  if (defaultNE != null)   defaultNE.bindToENC(name);
 else   throw new IllegalStateException("Nothing to bind for name " + nameInEnvironment);
}

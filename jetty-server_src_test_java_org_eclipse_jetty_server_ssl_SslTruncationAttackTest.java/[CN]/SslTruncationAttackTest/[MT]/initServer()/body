{
  handleCount=new AtomicLong();
  endPointClosed=new AtomicBoolean();
  server=new Server();
  connector=new SslSelectChannelConnector(){
    @Override protected SelectChannelEndPoint newEndPoint(    SocketChannel channel,    SelectorManager.SelectSet selectSet,    SelectionKey key) throws IOException {
      return new SslSelectChannelEndPoint(getSslBuffers(),channel,selectSet,key,createSSLEngine(channel),channel.socket().getSoTimeout()){
        @Override public void close() throws IOException {
          endPointClosed.compareAndSet(false,true);
          super.close();
        }
      }
;
    }
    @Override protected AsyncConnection newConnection(    SocketChannel channel,    SelectChannelEndPoint endpoint){
      AsyncHttpConnection connection=new AsyncHttpConnection(this,endpoint,server){
        @Override public Connection handle() throws IOException {
          handleCount.incrementAndGet();
          return super.handle();
        }
      }
;
      ((HttpParser)connection.getParser()).setForceContentBuffer(true);
      return connection;
    }
  }
;
  server.addConnector(connector);
  String keystorePath=System.getProperty("basedir",".") + "/src/test/resources/keystore";
  SslContextFactory sslContextFactory=connector.getSslContextFactory();
  sslContextFactory.setKeyStorePath(keystorePath);
  sslContextFactory.setKeyStorePassword("storepwd");
  sslContextFactory.setKeyManagerPassword("keypwd");
  sslContextFactory.setTrustStore(keystorePath);
  sslContextFactory.setTrustStorePassword("storepwd");
  server.setHandler(new EmptyHandler());
  server.start();
  sslContext=sslContextFactory.getSslContext();
}

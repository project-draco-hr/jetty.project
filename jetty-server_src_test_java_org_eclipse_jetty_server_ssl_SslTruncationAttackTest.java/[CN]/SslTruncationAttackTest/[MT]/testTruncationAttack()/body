{
  Socket socket=new Socket("localhost",connector.getLocalPort());
  SSLSocket sslSocket=(SSLSocket)sslContext.getSocketFactory().createSocket(socket,socket.getInetAddress().getHostName(),socket.getPort(),true);
  sslSocket.setUseClientMode(true);
  final CountDownLatch handshakeLatch=new CountDownLatch(1);
  sslSocket.addHandshakeCompletedListener(new HandshakeCompletedListener(){
    public void handshakeCompleted(    HandshakeCompletedEvent handshakeCompletedEvent){
      handshakeLatch.countDown();
    }
  }
);
  sslSocket.startHandshake();
  Assert.assertTrue(handshakeLatch.await(1,TimeUnit.SECONDS));
  String request="" + "GET / HTTP/1.1\r\n" + "Host: localhost:" + connector.getLocalPort() + "\r\n"+ "\r\n";
  sslSocket.getOutputStream().write(request.getBytes("UTF-8"));
  byte[] buffer=new byte[1024];
  StringBuilder response=new StringBuilder();
  sslSocket.setSoTimeout(1000);
  while (true) {
    int read=sslSocket.getInputStream().read(buffer);
    response.append(new String(buffer,0,read,"UTF-8"));
    if (response.indexOf("\r\n\r\n") >= 0)     break;
  }
  handleCount.set(0);
  socket.close();
  TimeUnit.SECONDS.sleep(1);
  Assert.assertEquals("handle() invocations",1,handleCount.get());
  Assert.assertTrue("endpoint closed",endPointClosed.get());
}

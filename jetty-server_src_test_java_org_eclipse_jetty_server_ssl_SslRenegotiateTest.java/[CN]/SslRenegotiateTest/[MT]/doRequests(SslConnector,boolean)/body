{
  Server server=new Server();
  try {
    String keystore=MavenTestingUtils.getTestResourceFile("keystore").getAbsolutePath();
    connector.setPort(0);
    SslContextFactory cf=connector.getSslContextFactory();
    cf.setKeyStore(keystore);
    cf.setKeyStorePassword("storepwd");
    cf.setKeyManagerPassword("keypwd");
    cf.setAllowRenegotiate(reneg);
    server.setConnectors(new Connector[]{connector});
    server.setHandler(new HelloWorldHandler());
    server.start();
    SocketAddress addr=new InetSocketAddress("localhost",connector.getLocalPort());
    _socket=SocketChannel.open(addr);
    _socket.configureBlocking(true);
    SSLContext context=SSLContext.getInstance("SSL");
    context.init(null,trustAllCerts,new java.security.SecureRandom());
    _engine=context.createSSLEngine();
    _engine.setUseClientMode(true);
    SSLSession session=_engine.getSession();
    _outAppB=ByteBuffer.allocate(session.getApplicationBufferSize());
    _outPacketB=ByteBuffer.allocate(session.getPacketBufferSize());
    _inAppB=ByteBuffer.allocate(session.getApplicationBufferSize());
    _inPacketB=ByteBuffer.allocate(session.getPacketBufferSize());
    _outAppB.put("GET /1 HTTP/1.1\r\nHost: localhost\r\n\r\n".getBytes(StringUtil.__ISO_8859_1));
    _outAppB.flip();
    _engine.beginHandshake();
    runHandshake();
    doWrap();
    doUnwrap();
    _inAppB.flip();
    String response=new IndirectNIOBuffer(_inAppB,true).toString();
    assertTrue(response.startsWith("HTTP/1.1 200 OK"));
    if (response.indexOf("HELLO WORLD") < 0) {
      _inAppB.clear();
      doUnwrap();
      _inAppB.flip();
      response=new IndirectNIOBuffer(_inAppB,true).toString();
    }
    assertTrue(response.indexOf("HELLO WORLD") >= 0);
    _inAppB.clear();
    _outAppB.clear();
    _outAppB.put("GET /2 HTTP/1.1\r\nHost: localhost\r\n\r\n".getBytes(StringUtil.__ISO_8859_1));
    _outAppB.flip();
    try {
      session.invalidate();
      _engine.beginHandshake();
      runHandshake();
      doWrap();
      doUnwrap();
      _inAppB.flip();
      response=new IndirectNIOBuffer(_inAppB,true).toString();
      assertTrue(response.startsWith("HTTP/1.1 200 OK"));
      assertTrue(response.indexOf("HELLO WORLD") > 0);
      assertTrue(reneg);
    }
 catch (    IOException e) {
      if (!(e instanceof SSLProtocolException)) {
        if (reneg)         Log.warn(e);
        assertFalse(reneg);
      }
    }
  }
  finally {
    server.stop();
    server.join();
  }
}

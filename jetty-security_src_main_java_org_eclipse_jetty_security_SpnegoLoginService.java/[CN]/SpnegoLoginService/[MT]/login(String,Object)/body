{
  String encodedAuthToken=(String)credentials;
  byte[] authToken=B64Code.decode(encodedAuthToken);
  GSSManager manager=GSSManager.getInstance();
  try {
    Oid krb5Oid=new Oid("1.3.6.1.5.5.2");
    GSSName gssName=manager.createName(_targetName,null);
    GSSCredential serverCreds=manager.createCredential(gssName,GSSCredential.INDEFINITE_LIFETIME,krb5Oid,GSSCredential.ACCEPT_ONLY);
    GSSContext gContext=manager.createContext(serverCreds);
    if (gContext == null) {
      Log.debug("SpnegoUserRealm: failed to establish GSSContext");
    }
 else {
      while (!gContext.isEstablished()) {
        authToken=gContext.acceptSecContext(authToken,0,authToken.length);
      }
      if (gContext.isEstablished()) {
        String clientName=gContext.getSrcName().toString();
        String role=clientName.substring(clientName.indexOf('@') + 1);
        Log.debug("SpnegoUserRealm: established a security context");
        Log.debug("Client Principal is: " + gContext.getSrcName());
        Log.debug("Server Principal is: " + gContext.getTargName());
        Log.debug("Client Default Role: " + role);
        SpnegoUserPrincipal user=new SpnegoUserPrincipal(clientName,authToken);
        Subject subject=new Subject();
        subject.getPrincipals().add(user);
        return _identityService.newUserIdentity(subject,user,new String[]{role});
      }
    }
  }
 catch (  GSSException gsse) {
    Log.warn(gsse);
  }
  return null;
}

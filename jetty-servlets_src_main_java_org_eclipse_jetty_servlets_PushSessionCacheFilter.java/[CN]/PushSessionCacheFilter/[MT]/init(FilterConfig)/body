{
  if (config.getInitParameter("associateDelay") != null)   _associateDelay=Long.valueOf(config.getInitParameter("associateDelay"));
  config.getServletContext().addListener(new ServletRequestListener(){
    @Override public void requestDestroyed(    ServletRequestEvent sre){
      Request request=Request.getBaseRequest(sre.getServletRequest());
      Target target=(Target)request.getAttribute(TARGET_ATTR);
      if (target == null)       return;
      Response response=request.getResponse();
      target._etag=response.getHttpFields().get(HttpHeader.ETAG);
      target._lastModified=response.getHttpFields().get(HttpHeader.LAST_MODIFIED);
      if (request.isPush()) {
        if (LOG.isDebugEnabled())         LOG.debug("Pushed {} for {}",request.getResponse().getStatus(),request.getRequestURI());
        return;
      }
 else       if (LOG.isDebugEnabled())       LOG.debug("Served {} for {}",request.getResponse().getStatus(),request.getRequestURI());
      String referer=request.getHttpFields().get(HttpHeader.REFERER);
      if (referer != null) {
        HttpURI referer_uri=new HttpURI(referer);
        if (request.getServerName().equals(referer_uri.getHost())) {
          Target referer_target=_cache.get(referer_uri.getPath());
          if (referer_target != null) {
            HttpSession session=request.getSession();
            ConcurrentHashMap<String,Long> timestamps=(ConcurrentHashMap<String,Long>)session.getAttribute(TIMESTAMP_ATTR);
            Long last=timestamps.get(referer_target._path);
            if (last != null && (System.currentTimeMillis() - last) < _associateDelay) {
              if (referer_target._associated.putIfAbsent(target._path,target) == null) {
                if (LOG.isDebugEnabled())                 LOG.debug("ASSOCIATE {}->{}",referer_target._path,target._path);
              }
            }
          }
        }
      }
    }
    @Override public void requestInitialized(    ServletRequestEvent sre){
    }
  }
);
}

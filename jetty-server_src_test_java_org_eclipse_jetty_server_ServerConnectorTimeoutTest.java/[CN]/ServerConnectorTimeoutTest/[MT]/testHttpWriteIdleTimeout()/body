{
  _httpConfiguration.setBlockingTimeout(500);
  configureServer(new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      IO.copy(request.getInputStream(),response.getOutputStream());
    }
  }
);
  Socket client=newSocket(_serverURI.getHost(),_serverURI.getPort());
  client.setSoTimeout(10000);
  Assert.assertFalse(client.isClosed());
  OutputStream os=client.getOutputStream();
  InputStream is=client.getInputStream();
  try (StacklessLogging scope=new StacklessLogging(HttpChannel.class)){
    os.write(("POST /echo HTTP/1.0\r\n" + "host: " + _serverURI.getHost() + ":"+ _serverURI.getPort()+ "\r\n"+ "content-type: text/plain; charset=utf-8\r\n"+ "content-length: 20\r\n"+ "\r\n").getBytes("utf-8"));
    os.flush();
    os.write("123456789\n".getBytes("utf-8"));
    os.flush();
    Thread.sleep(1000);
    os.write("=========\n".getBytes("utf-8"));
    os.flush();
    Thread.sleep(2000);
    String response=IO.toString(is);
    Assert.assertThat(response,containsString(" 500 "));
    Assert.assertThat(response,Matchers.not(containsString("=========")));
  }
 }

{
  final String user="foo";
  final String password="bar";
  final String credentials=B64Code.encode(user + ":" + password,"ISO-8859-1");
  final String serverHost="server";
  final String realm="test_realm";
  final int status=HttpStatus.NO_CONTENT_204;
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      String authorization=request.getHeader(HttpHeader.PROXY_AUTHORIZATION.asString());
      if (authorization == null) {
        response.setStatus(HttpStatus.PROXY_AUTHENTICATION_REQUIRED_407);
        response.setHeader(HttpHeader.PROXY_AUTHENTICATE.asString(),"Basic realm=\"" + realm + "\"");
      }
 else {
        String prefix="Basic ";
        if (authorization.startsWith(prefix)) {
          String attempt=authorization.substring(prefix.length());
          if (credentials.equals(attempt))           response.setStatus(status);
        }
      }
    }
  }
);
  String proxyHost="localhost";
  int proxyPort=connector.getLocalPort();
  int serverPort=proxyPort + 1;
  client.setProxyConfiguration(new ProxyConfiguration(proxyHost,proxyPort));
  ContentResponse response1=client.newRequest(serverHost,serverPort).scheme(scheme).timeout(5,TimeUnit.SECONDS).send();
  Assert.assertEquals(HttpStatus.PROXY_AUTHENTICATION_REQUIRED_407,response1.getStatus());
  URI uri=URI.create(scheme + "://" + proxyHost+ ":"+ proxyPort);
  client.getAuthenticationStore().addAuthentication(new BasicAuthentication(uri,realm,user,password));
  final AtomicInteger requests=new AtomicInteger();
  client.getRequestListeners().add(new Request.Listener.Empty(){
    @Override public void onSuccess(    Request request){
      requests.incrementAndGet();
    }
  }
);
  ContentResponse response2=client.newRequest(serverHost,serverPort).scheme(scheme).timeout(5,TimeUnit.SECONDS).send();
  Assert.assertEquals(status,response2.getStatus());
  Assert.assertEquals(2,requests.get());
  requests.set(0);
  ContentResponse response3=client.newRequest(serverHost,serverPort).scheme(scheme).timeout(5,TimeUnit.SECONDS).send();
  Assert.assertEquals(status,response3.getStatus());
  Assert.assertEquals(1,requests.get());
}

{
  try {
    HttpClient client=connection.getHttpClient();
    EndPoint endPoint=connection.getEndPoint();
    HttpExchange exchange=connection.getExchange();
    ByteBufferPool byteBufferPool=client.getByteBufferPool();
    final Request request=exchange.request();
    HttpGenerator.RequestInfo info=null;
    ByteBuffer content=contentChunks.hasNext() ? contentChunks.next() : BufferUtil.EMPTY_BUFFER;
    boolean lastContent=!contentChunks.hasNext();
    while (true) {
      HttpGenerator.Result result=generator.generateRequest(info,header,chunk,content,lastContent);
switch (result) {
case NEED_INFO:
{
          info=new HttpGenerator.RequestInfo(request.version(),request.headers(),contentLength,request.method().asString(),request.path());
          break;
        }
case NEED_HEADER:
{
        header=byteBufferPool.acquire(client.getRequestBufferSize(),false);
        break;
      }
case NEED_CHUNK:
{
      chunk=byteBufferPool.acquire(HttpGenerator.CHUNK_SIZE,false);
      break;
    }
case FLUSH:
{
    if (request.aborted()) {
      fail(new HttpRequestException("Request aborted",request));
    }
 else {
      StatefulExecutorCallback callback=new StatefulExecutorCallback(client.getExecutor()){
        @Override protected void pendingCompleted(){
          if (!committed)           committed(request);
          send();
        }
        @Override protected void failed(        Throwable x){
          fail(x);
        }
      }
;
      if (header == null)       header=BufferUtil.EMPTY_BUFFER;
      if (chunk == null)       chunk=BufferUtil.EMPTY_BUFFER;
      endPoint.write(null,callback,header,chunk,content);
      if (callback.pending())       return;
      if (callback.completed()) {
        if (!committed)         committed(request);
        releaseBuffers();
        content=contentChunks.hasNext() ? contentChunks.next() : BufferUtil.EMPTY_BUFFER;
        lastContent=!contentChunks.hasNext();
      }
    }
    break;
  }
case SHUTDOWN_OUT:
{
  endPoint.shutdownOutput();
  break;
}
case CONTINUE:
{
break;
}
case DONE:
{
if (generator.isEnd() && !failed) success();
return;
}
default :
{
throw new IllegalStateException("Unknown result " + result);
}
}
}
}
 catch (Exception x) {
LOG.debug(x);
fail(x);
}
 finally {
releaseBuffers();
}
}

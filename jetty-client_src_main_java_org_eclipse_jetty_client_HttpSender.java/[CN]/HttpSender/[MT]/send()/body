{
  HttpClient client=connection.getHttpClient();
  ByteBufferPool bufferPool=client.getByteBufferPool();
  ByteBuffer header=null;
  ByteBuffer chunk=null;
  try {
    EndPoint endPoint=connection.getEndPoint();
    HttpExchange exchange=connection.getExchange();
    final Request request=exchange.request();
    HttpConversation conversation=client.getConversation(request.conversation());
    HttpGenerator.RequestInfo requestInfo=null;
    boolean expect100=request.headers().contains(HttpHeader.EXPECT,HttpHeaderValue.CONTINUE.asString());
    expect100&=conversation.getAttribute(EXPECT_100_ATTRIBUTE) == null;
    if (expect100)     conversation.setAttribute(EXPECT_100_ATTRIBUTE,Boolean.TRUE);
    ContentInfo contentInfo=this.expectedContent;
    if (contentInfo == null)     contentInfo=new ContentInfo(contentIterator);
 else     expect100=false;
    this.expectedContent=null;
    while (true) {
      HttpGenerator.Result result=generator.generateRequest(requestInfo,header,chunk,contentInfo.content,contentInfo.lastContent);
switch (result) {
case NEED_INFO:
{
          ContentProvider content=request.content();
          long contentLength=content == null ? -1 : content.length();
          requestInfo=new HttpGenerator.RequestInfo(request.version(),request.headers(),contentLength,request.method().asString(),request.path());
          break;
        }
case NEED_HEADER:
{
        header=bufferPool.acquire(client.getRequestBufferSize(),false);
        break;
      }
case NEED_CHUNK:
{
      chunk=bufferPool.acquire(HttpGenerator.CHUNK_SIZE,false);
      break;
    }
case FLUSH:
{
    if (request.aborted()) {
      fail(new HttpRequestException("Request aborted",request));
    }
 else {
      StatefulExecutorCallback callback=new StatefulExecutorCallback(client.getExecutor()){
        @Override protected void pendingCompleted(){
          LOG.debug("Write completed for {}",request);
          if (!committed)           committed(request);
          if (expectedContent == null) {
            send();
          }
 else {
            LOG.debug("Expecting 100 Continue for {}",request);
            expectedContent.ready();
          }
        }
        @Override protected void failed(        Throwable x){
          fail(x);
        }
      }
;
      if (expect100) {
        expectedContent=contentInfo;
      }
      write(callback,header,chunk,expect100 ? null : contentInfo.content);
      if (callback.pending()) {
        LOG.debug("Write pending for {}",request);
        return;
      }
      if (callback.completed()) {
        if (!committed)         committed(request);
        if (expect100) {
          LOG.debug("Expecting 100 Continue for {}",request);
          expectedContent.ready();
          return;
        }
 else {
          contentInfo=new ContentInfo(contentIterator);
        }
      }
    }
    break;
  }
case SHUTDOWN_OUT:
{
  endPoint.shutdownOutput();
  break;
}
case CONTINUE:
{
break;
}
case DONE:
{
if (generator.isEnd() && !failed) success();
return;
}
default :
{
throw new IllegalStateException("Unknown result " + result);
}
}
}
}
 catch (Exception x) {
LOG.debug(x);
fail(x);
}
 finally {
releaseBuffers(bufferPool,header,chunk);
}
}

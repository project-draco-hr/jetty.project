{
  HttpClient client=connection.getHttpClient();
  ByteBufferPool bufferPool=client.getByteBufferPool();
  ByteBuffer header=null;
  ByteBuffer chunk=null;
  try {
    HttpExchange exchange=connection.getExchange();
    if (exchange == null)     return;
    final Request request=exchange.getRequest();
    HttpConversation conversation=exchange.getConversation();
    HttpGenerator.RequestInfo requestInfo=null;
    boolean expect100=request.getHeaders().contains(HttpHeader.EXPECT,HttpHeaderValue.CONTINUE.asString());
    expect100&=conversation.getAttribute(EXPECT_100_ATTRIBUTE) == null;
    if (expect100)     conversation.setAttribute(EXPECT_100_ATTRIBUTE,Boolean.TRUE);
    ContentInfo contentInfo=this.expectedContent;
    this.expectedContent=null;
    if (contentInfo == null)     contentInfo=new ContentInfo(contentIterator);
 else     expect100=false;
    while (true) {
      HttpGenerator.Result result=generator.generateRequest(requestInfo,header,chunk,contentInfo.content,contentInfo.lastContent);
switch (result) {
case NEED_INFO:
{
          ContentProvider content=request.getContent();
          long contentLength=content == null ? -1 : content.getLength();
          requestInfo=new HttpGenerator.RequestInfo(request.getVersion(),request.getHeaders(),contentLength,request.getMethod().asString(),request.getPath());
          break;
        }
case NEED_HEADER:
{
        header=bufferPool.acquire(client.getRequestBufferSize(),false);
        break;
      }
case NEED_CHUNK:
{
      chunk=bufferPool.acquire(HttpGenerator.CHUNK_SIZE,false);
      break;
    }
case FLUSH:
{
switch (state.get()) {
case SEND:
case COMMIT:
      break;
default :
    return;
}
StatefulExecutorCallback callback=new StatefulExecutorCallback(client.getExecutor()){
  @Override protected void onSucceeded(){
    LOG.debug("Write succeeded for {}",request);
    if (!commit(request))     return;
    if (expectedContent == null) {
      send();
    }
 else {
      LOG.debug("Expecting 100 Continue for {}",request);
      expectedContent.ready();
    }
  }
  @Override protected void onFailed(  Throwable x){
    fail(x);
  }
}
;
if (expect100) {
  expectedContent=contentInfo;
}
write(callback,header,chunk,expect100 ? null : contentInfo.content);
if (callback.process()) {
  LOG.debug("Write pending for {}",request);
  return;
}
if (callback.isSucceeded()) {
  if (!commit(request))   return;
  if (expect100) {
    LOG.debug("Expecting 100 Continue for {}",request);
    expectedContent.ready();
    return;
  }
 else {
    contentInfo=new ContentInfo(contentIterator);
  }
}
break;
}
case SHUTDOWN_OUT:
{
EndPoint endPoint=connection.getEndPoint();
endPoint.shutdownOutput();
break;
}
case CONTINUE:
{
break;
}
case DONE:
{
if (generator.isEnd()) success();
return;
}
default :
{
throw new IllegalStateException("Unknown result " + result);
}
}
}
}
 catch (Exception x) {
LOG.debug(x);
fail(x);
}
 finally {
releaseBuffers(bufferPool,header,chunk);
}
}

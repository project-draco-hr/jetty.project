{
  HttpExchange exchange=getHttpExchange();
  if (exchange == null)   return;
  while (true) {
    SenderState current=senderState.get();
switch (current) {
case IDLE:
{
        SenderState newSenderState=SenderState.SENDING;
        if (updateSenderState(current,newSenderState)) {
          if (LOG.isDebugEnabled())           LOG.debug("Deferred content available, {} -> {}",current,newSenderState);
          contentCallback.iterate();
          return;
        }
        break;
      }
case SENDING:
{
      SenderState newSenderState=SenderState.SENDING_WITH_CONTENT;
      if (updateSenderState(current,newSenderState)) {
        if (LOG.isDebugEnabled())         LOG.debug("Deferred content available, {} -> {}",current,newSenderState);
        return;
      }
      break;
    }
case EXPECTING:
{
    SenderState newSenderState=SenderState.EXPECTING_WITH_CONTENT;
    if (updateSenderState(current,newSenderState)) {
      if (LOG.isDebugEnabled())       LOG.debug("Deferred content available, {} -> {}",current,newSenderState);
      return;
    }
    break;
  }
case PROCEEDING:
{
  SenderState newSenderState=SenderState.PROCEEDING_WITH_CONTENT;
  if (updateSenderState(current,newSenderState)) {
    if (LOG.isDebugEnabled())     LOG.debug("Deferred content available, {} -> {}",current,newSenderState);
    return;
  }
  break;
}
case SENDING_WITH_CONTENT:
case EXPECTING_WITH_CONTENT:
case PROCEEDING_WITH_CONTENT:
case WAITING:
case COMPLETED:
case FAILED:
{
if (LOG.isDebugEnabled()) LOG.debug("Deferred content available, {}",current);
return;
}
default :
{
illegalSenderState(current);
return;
}
}
}
}

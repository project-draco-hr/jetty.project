{
  HttpExchange exchange=getHttpExchange();
  if (exchange == null)   return;
  while (true) {
    SenderState current=senderState.get();
switch (current) {
case IDLE:
{
        if (updateSenderState(current,SenderState.SENDING)) {
          LOG.debug("Deferred content available, idle -> sending");
          content.advance();
          sendContent(exchange,new ContentCallback(content));
          return;
        }
        break;
      }
case SENDING:
{
      if (updateSenderState(current,SenderState.SCHEDULED)) {
        LOG.debug("Deferred content available, sending -> scheduled");
        return;
      }
      break;
    }
case EXPECTING:
{
    if (updateSenderState(current,SenderState.SCHEDULED)) {
      LOG.debug("Deferred content available, expecting -> scheduled");
      return;
    }
    break;
  }
case WAITING:
{
  LOG.debug("Deferred content available, waiting");
  return;
}
case SCHEDULED:
{
LOG.debug("Deferred content available, scheduled");
return;
}
default :
{
throw new IllegalStateException();
}
}
}
}

{
  HttpExchange exchange=getHttpExchange();
  if (exchange == null)   return Action.IDLE;
  Request request=exchange.getRequest();
  HttpContent content=HttpSender.this.content;
  ByteBuffer contentBuffer=content.getContent();
  if (contentBuffer != null) {
    if (!someToContent(request,contentBuffer))     return Action.IDLE;
  }
  while (true) {
    boolean advanced=content.advance();
    boolean consumed=content.isConsumed();
    SenderState current=senderState.get();
switch (current) {
case SENDING:
{
        if (advanced) {
          sendContent(exchange,content,this);
          return Action.SCHEDULED;
        }
 else         if (consumed) {
          sendContent(exchange,content,lastCallback);
          return Action.IDLE;
        }
 else {
          if (updateSenderState(current,SenderState.IDLE)) {
            LOG.debug("Waiting for deferred content for {}",request);
            return Action.IDLE;
          }
          break;
        }
      }
case SENDING_WITH_CONTENT:
{
      if (updateSenderState(current,SenderState.SENDING)) {
        LOG.debug("Deferred content available for {}",request);
        if (advanced) {
          sendContent(exchange,content,this);
          return Action.SCHEDULED;
        }
      }
      throw new IllegalStateException();
    }
default :
{
    throw new IllegalStateException();
  }
}
}
}

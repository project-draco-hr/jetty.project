{
  HttpExchange exchange=getHttpExchange();
  if (exchange == null)   return Action.IDLE;
  HttpContent content=HttpSender.this.content;
  if (content == null)   return Action.IDLE;
  while (true) {
    boolean advanced=content.advance();
    boolean consumed=content.isConsumed();
    if (LOG.isDebugEnabled())     LOG.debug("Content {} consumed {} for {}",advanced,consumed,exchange.getRequest());
    if (advanced) {
      sendContent(exchange,content,this);
      return Action.SCHEDULED;
    }
    if (consumed) {
      sendContent(exchange,content,lastCallback);
      return Action.IDLE;
    }
    SenderState current=senderState.get();
switch (current) {
case SENDING:
{
        if (updateSenderState(current,SenderState.IDLE)) {
          if (LOG.isDebugEnabled())           LOG.debug("Content is deferred for {}",exchange.getRequest());
          return Action.IDLE;
        }
        break;
      }
case SENDING_WITH_CONTENT:
{
      updateSenderState(current,SenderState.SENDING);
      break;
    }
default :
{
    illegalSenderState(current);
    return Action.IDLE;
  }
}
}
}

{
  HttpExchange exchange=getHttpExchange();
  if (exchange == null)   return Action.IDLE;
  Request request=exchange.getRequest();
  HttpContent content=HttpSender.this.content;
  ByteBuffer contentBuffer=content.getContent();
  if (contentBuffer != null) {
    if (!someToContent(request,contentBuffer))     return Action.IDLE;
  }
  if (content.advance()) {
    sendContent(exchange,content,this);
    return Action.EXECUTING;
  }
  if (content.isConsumed()) {
    sendContent(exchange,content,lastCallback);
    return Action.EXECUTING;
  }
  while (true) {
    SenderState current=senderState.get();
switch (current) {
case SENDING:
{
        if (updateSenderState(current,SenderState.IDLE)) {
          LOG.debug("Waiting for deferred content for {}",request);
          return Action.IDLE;
        }
        break;
      }
case SCHEDULED:
{
      if (updateSenderState(current,SenderState.SENDING)) {
        LOG.debug("Deferred content available for {}",request);
        sendContent(exchange,content,this);
        return Action.EXECUTING;
      }
      break;
    }
default :
{
    throw new IllegalStateException();
  }
}
}
}

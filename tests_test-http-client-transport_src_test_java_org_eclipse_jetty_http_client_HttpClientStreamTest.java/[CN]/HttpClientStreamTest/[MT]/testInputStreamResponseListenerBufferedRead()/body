{
  AtomicReference<AsyncContext> asyncContextRef=new AtomicReference<>();
  CountDownLatch latch=new CountDownLatch(1);
  start(new AbstractHandler(){
    @Override public void handle(    String target,    org.eclipse.jetty.server.Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      asyncContextRef.set(request.startAsync());
      latch.countDown();
    }
  }
);
  InputStreamResponseListener listener=new InputStreamResponseListener();
  client.newRequest("localhost",connector.getLocalPort()).scheme(getScheme()).timeout(5,TimeUnit.SECONDS).send(listener);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  AsyncContext asyncContext=asyncContextRef.get();
  Assert.assertNotNull(asyncContext);
  Random random=new Random();
  byte[] chunk=new byte[64];
  random.nextBytes(chunk);
  ServletOutputStream output=asyncContext.getResponse().getOutputStream();
  output.write(chunk);
  output.flush();
  byte[] buffer=new byte[2 * chunk.length];
  InputStream stream=listener.getInputStream();
  int totalRead=0;
  while (totalRead < chunk.length) {
    int read=stream.read(buffer);
    Assert.assertTrue(read > 0);
    totalRead+=read;
  }
  asyncContext.complete();
  Response response=listener.get(5,TimeUnit.SECONDS);
  Assert.assertEquals(200,response.getStatus());
}

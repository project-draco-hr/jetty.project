{
  for (  Class<? extends Decoder> decoder : getDecoders().getList()) {
    if (Decoder.Text.class.isAssignableFrom(decoder)) {
      Class<?> type=ReflectUtils.findGenericClassFor(decoder,Decoder.Text.class);
      params.add(new JsrParamIdTextDecoder(decoder,type));
      continue;
    }
    if (Decoder.TextStream.class.isAssignableFrom(decoder)) {
      Class<?> type=ReflectUtils.findGenericClassFor(decoder,Decoder.TextStream.class);
      params.add(new JsrParamIdTextDecoder(decoder,type));
      continue;
    }
    if (Decoder.Binary.class.isAssignableFrom(decoder)) {
      Class<?> type=ReflectUtils.findGenericClassFor(decoder,Decoder.Binary.class);
      params.add(new JsrParamIdBinaryDecoder(decoder,type));
      continue;
    }
    if (Decoder.BinaryStream.class.isAssignableFrom(decoder)) {
      Class<?> type=ReflectUtils.findGenericClassFor(decoder,Decoder.BinaryStream.class);
      params.add(new JsrParamIdBinaryDecoder(decoder,type));
      continue;
    }
    throw new IllegalStateException("Invalid Decoder: " + decoder);
  }
}

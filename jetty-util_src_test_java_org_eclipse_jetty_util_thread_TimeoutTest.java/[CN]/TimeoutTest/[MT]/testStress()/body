{
  final int LOOP=250;
  final AtomicBoolean running=new AtomicBoolean(true);
  final AtomicIntegerArray count=new AtomicIntegerArray(4);
  timeout.setNow(System.currentTimeMillis());
  timeout.setDuration(500);
  Thread ticker=new Thread(){
    @Override public void run(){
      while (running.get()) {
        try {
synchronized (lock) {
            lock.wait(30);
          }
          Thread.sleep(30);
          timeout.tick(System.currentTimeMillis());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  ticker.start();
  for (int i=0; i < LOOP; i++) {
    Thread th=new Thread(){
      @Override public void run(){
        count.incrementAndGet(0);
        Timeout.Task task=new Timeout.Task(){
          @Override public void expired(){
            count.incrementAndGet(2);
          }
        }
;
        int once=(int)(10 + (System.currentTimeMillis() % 50));
        int loop=0;
        while (running.get()) {
          try {
            long delay=1000;
            long wait=100 - once;
            if (loop++ == once) {
              count.incrementAndGet(1);
              delay=200;
              wait=1000;
            }
            timeout.schedule(task,delay);
            Thread.sleep(wait);
            task.cancel();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        count.incrementAndGet(3);
      }
    }
;
    th.start();
  }
  long start=System.currentTimeMillis();
  while (count.get(0) < LOOP && (System.currentTimeMillis() - start) < 20000)   Thread.sleep(50);
  while (count.get(1) < LOOP && (System.currentTimeMillis() - start) < 20000)   Thread.sleep(50);
  while (count.get(2) < LOOP && (System.currentTimeMillis() - start) < 20000)   Thread.sleep(50);
  running.set(false);
  while (count.get(3) < LOOP && (System.currentTimeMillis() - start) < 20000)   Thread.sleep(50);
  assertEquals("count threads",LOOP,count.get(0));
  assertEquals("count once waits",LOOP,count.get(1));
  assertEquals("count expires",LOOP,count.get(2));
  assertEquals("done",LOOP,count.get(3));
}

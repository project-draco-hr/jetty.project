{
  Resource web_app=context.getBaseResource();
  _preUnpackBaseResource=context.getBaseResource();
  if (web_app == null) {
    String war=context.getWar();
    if (war != null && war.length() > 0)     web_app=context.newResource(war);
 else     web_app=context.getBaseResource();
    if (web_app.getAlias() != null) {
      LOG.debug(web_app + " anti-aliased to " + web_app.getAlias());
      web_app=context.newResource(web_app.getAlias());
    }
    if (LOG.isDebugEnabled())     LOG.debug("Try webapp=" + web_app + ", exists="+ web_app.exists()+ ", directory="+ web_app.isDirectory()+ " file="+ (web_app.getFile()));
    if (web_app.exists() && !web_app.isDirectory() && !web_app.toString().startsWith("jar:")) {
      Resource jarWebApp=JarResource.newJarResource(web_app);
      if (jarWebApp.exists() && jarWebApp.isDirectory())       web_app=jarWebApp;
    }
    if (web_app.exists() && ((context.isCopyWebDir() && web_app.getFile() != null && web_app.getFile().isDirectory()) || (context.isExtractWAR() && web_app.getFile() != null && !web_app.getFile().isDirectory()) || (context.isExtractWAR() && web_app.getFile() == null)|| !web_app.isDirectory())) {
      File extractedWebAppDir=null;
      if (war != null) {
        File warfile=Resource.newResource(war).getFile();
        if (warfile != null && warfile.getName().toLowerCase().endsWith(".war")) {
          File sibling=new File(warfile.getParent(),warfile.getName().substring(0,warfile.getName().length() - 4));
          if (sibling.exists() && sibling.isDirectory() && sibling.canWrite())           extractedWebAppDir=sibling;
        }
      }
      if (extractedWebAppDir == null)       extractedWebAppDir=new File(context.getTempDirectory(),"webapp");
      if (web_app.getFile() != null && web_app.getFile().isDirectory()) {
        LOG.info("Copy " + web_app + " to "+ extractedWebAppDir);
        web_app.copyTo(extractedWebAppDir);
      }
 else {
        File extractionLock=new File(context.getTempDirectory(),".extract_lock");
        if (!extractedWebAppDir.exists()) {
          extractionLock.createNewFile();
          extractedWebAppDir.mkdir();
          LOG.info("Extract " + web_app + " to "+ extractedWebAppDir);
          Resource jar_web_app=JarResource.newJarResource(web_app);
          jar_web_app.copyTo(extractedWebAppDir);
          extractionLock.delete();
        }
 else {
          if (web_app.lastModified() > extractedWebAppDir.lastModified() || extractionLock.exists()) {
            extractionLock.createNewFile();
            IO.delete(extractedWebAppDir);
            extractedWebAppDir.mkdir();
            LOG.info("Extract " + web_app + " to "+ extractedWebAppDir);
            Resource jar_web_app=JarResource.newJarResource(web_app);
            jar_web_app.copyTo(extractedWebAppDir);
            extractionLock.delete();
          }
        }
      }
      web_app=Resource.newResource(extractedWebAppDir.getCanonicalPath());
    }
    if (!web_app.exists() || !web_app.isDirectory()) {
      LOG.warn("Web application not found " + war);
      throw new java.io.FileNotFoundException(war);
    }
    context.setBaseResource(web_app);
    if (LOG.isDebugEnabled())     LOG.debug("webapp=" + web_app);
  }
  if (context.isCopyWebInf() && !context.isCopyWebDir()) {
    Resource web_inf=web_app.addPath("WEB-INF/");
    File extractedWebInfDir=new File(context.getTempDirectory(),"webinf");
    if (extractedWebInfDir.exists())     IO.delete(extractedWebInfDir);
    extractedWebInfDir.mkdir();
    Resource web_inf_lib=web_inf.addPath("lib/");
    File webInfDir=new File(extractedWebInfDir,"WEB-INF");
    webInfDir.mkdir();
    if (web_inf_lib.exists()) {
      File webInfLibDir=new File(webInfDir,"lib");
      if (webInfLibDir.exists())       IO.delete(webInfLibDir);
      webInfLibDir.mkdir();
      LOG.info("Copying WEB-INF/lib " + web_inf_lib + " to "+ webInfLibDir);
      web_inf_lib.copyTo(webInfLibDir);
    }
    Resource web_inf_classes=web_inf.addPath("classes/");
    if (web_inf_classes.exists()) {
      File webInfClassesDir=new File(webInfDir,"classes");
      if (webInfClassesDir.exists())       IO.delete(webInfClassesDir);
      webInfClassesDir.mkdir();
      LOG.info("Copying WEB-INF/classes from " + web_inf_classes + " to "+ webInfClassesDir.getAbsolutePath());
      web_inf_classes.copyTo(webInfClassesDir);
    }
    web_inf=Resource.newResource(extractedWebInfDir.getCanonicalPath());
    ResourceCollection rc=new ResourceCollection(web_inf,web_app);
    if (LOG.isDebugEnabled())     LOG.debug("context.resourcebase = " + rc);
    context.setBaseResource(rc);
  }
}

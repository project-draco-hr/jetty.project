{
  try {
    HttpGenerator generator=new HttpGenerator();
    MetaData info=getInfo();
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    ByteBuffer header=null;
    ByteBuffer chunk=null;
    ByteBuffer content=_content == null ? null : ByteBuffer.wrap(_content.toByteArray());
    loop:     while (!generator.isEnd()) {
      HttpGenerator.Result result=info instanceof MetaData.Request ? generator.generateRequest((MetaData.Request)info,header,chunk,content,true) : generator.generateResponse((MetaData.Response)info,false,header,chunk,content,true);
switch (result) {
case NEED_HEADER:
        header=BufferUtil.allocate(8192);
      continue;
case NEED_CHUNK:
    chunk=BufferUtil.allocate(HttpGenerator.CHUNK_SIZE);
  continue;
case NEED_INFO:
throw new IllegalStateException();
case FLUSH:
if (BufferUtil.hasContent(header)) {
out.write(BufferUtil.toArray(header));
BufferUtil.clear(header);
}
if (BufferUtil.hasContent(chunk)) {
out.write(BufferUtil.toArray(chunk));
BufferUtil.clear(chunk);
}
if (BufferUtil.hasContent(content)) {
out.write(BufferUtil.toArray(content));
BufferUtil.clear(content);
}
break;
case SHUTDOWN_OUT:
break loop;
}
}
return ByteBuffer.wrap(out.toByteArray());
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}

{
  if (streamId < 0)   throw new IllegalArgumentException("Invalid stream id: " + streamId);
  int flags=Flags.NONE;
  if (priority != null)   flags=Flags.PRIORITY;
  int maxFrameSize=getMaxFrameSize();
  ByteBuffer hpacked=lease.acquire(maxFrameSize,false);
  BufferUtil.clearToFill(hpacked);
  encoder.encode(hpacked,metaData);
  int hpackedLength=hpacked.position();
  BufferUtil.flipToFlush(hpacked,0);
  if (maxHeaderBlockFragment > 0 && hpackedLength > maxHeaderBlockFragment) {
    if (endStream)     flags|=Flags.END_STREAM;
    int length=maxHeaderBlockFragment;
    if (priority != null)     length+=PriorityFrame.PRIORITY_LENGTH;
    ByteBuffer header=generateHeader(lease,FrameType.HEADERS,length,flags,streamId);
    generatePriority(header,priority);
    BufferUtil.flipToFlush(header,0);
    lease.append(header,true);
    hpacked.limit(maxHeaderBlockFragment);
    lease.append(hpacked.slice(),false);
    int totalLength=Frame.HEADER_LENGTH + length;
    int position=maxHeaderBlockFragment;
    int limit=position + maxHeaderBlockFragment;
    while (limit < hpackedLength) {
      hpacked.position(position).limit(limit);
      header=generateHeader(lease,FrameType.CONTINUATION,maxHeaderBlockFragment,Flags.NONE,streamId);
      BufferUtil.flipToFlush(header,0);
      lease.append(header,true);
      lease.append(hpacked.slice(),false);
      position+=maxHeaderBlockFragment;
      limit+=maxHeaderBlockFragment;
      totalLength+=Frame.HEADER_LENGTH + maxHeaderBlockFragment;
    }
    hpacked.position(position).limit(hpackedLength);
    header=generateHeader(lease,FrameType.CONTINUATION,hpacked.remaining(),Flags.END_HEADERS,streamId);
    BufferUtil.flipToFlush(header,0);
    lease.append(header,true);
    lease.append(hpacked,true);
    totalLength+=Frame.HEADER_LENGTH + hpacked.remaining();
    return totalLength;
  }
 else {
    flags|=Flags.END_HEADERS;
    if (endStream)     flags|=Flags.END_STREAM;
    int length=hpackedLength;
    if (priority != null)     length+=PriorityFrame.PRIORITY_LENGTH;
    ByteBuffer header=generateHeader(lease,FrameType.HEADERS,length,flags,streamId);
    generatePriority(header,priority);
    BufferUtil.flipToFlush(header,0);
    lease.append(header,true);
    lease.append(hpacked,true);
    return Frame.HEADER_LENGTH + length;
  }
}

{
  final CountDownLatch closeLatch=new CountDownLatch(1);
  final AtomicReference<Session> sessionRef=new AtomicReference<>();
  startServer(new ServerSessionListener.Adapter(){
    @Override public Stream.Listener onNewStream(    Stream stream,    HeadersFrame frame){
      try {
        sessionRef.set(stream.getSession());
        MetaData.Response response=new MetaData.Response(HttpVersion.HTTP_2,200,new HttpFields());
        stream.headers(new HeadersFrame(stream.getId(),response,null,true),Callback.NOOP);
        closeLatch.await(5,TimeUnit.SECONDS);
        return null;
      }
 catch (      InterruptedException x) {
        return null;
      }
    }
  }
);
  ByteBufferPool.Lease lease=new ByteBufferPool.Lease(byteBufferPool);
  generator.control(lease,new PrefaceFrame());
  generator.control(lease,new SettingsFrame(new HashMap<>(),false));
  MetaData.Request metaData=newRequest("GET",new HttpFields());
  generator.control(lease,new HeadersFrame(1,metaData,null,true));
  try (Socket client=new Socket("localhost",connector.getLocalPort())){
    OutputStream output=client.getOutputStream();
    for (    ByteBuffer buffer : lease.getByteBuffers()) {
      output.write(BufferUtil.toArray(buffer));
    }
    Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
      @Override public void onHeaders(      HeadersFrame frame){
        try {
          client.close();
          closeLatch.countDown();
        }
 catch (        IOException x) {
          throw new RuntimeIOException(x);
        }
      }
    }
,4096,8192);
    parseResponse(client,parser);
    Thread.sleep(1000);
    Session session=sessionRef.get();
    Assert.assertTrue(session.isClosed());
    Assert.assertTrue(((HTTP2Session)session).isDisconnected());
  }
 }

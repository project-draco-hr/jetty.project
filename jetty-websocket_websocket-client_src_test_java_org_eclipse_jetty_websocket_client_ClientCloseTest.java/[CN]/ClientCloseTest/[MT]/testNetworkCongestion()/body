{
  final int timeout=1000;
  client.setMaxIdleTimeout(timeout);
  CloseTrackingSocket clientSocket=new CloseTrackingSocket();
  Future<Session> clientConnectFuture=client.connect(clientSocket,server.getWsUri());
  ServerConnection serverConn=server.accept();
  serverConn.upgrade();
  confirmConnection(clientSocket,clientConnectFuture,serverConn);
  EndPoint endp=clientSocket.getEndPoint();
  Assert.assertThat("EndPoint is testable",endp,instanceOf(TestEndPoint.class));
  TestEndPoint testendp=(TestEndPoint)endp;
  char msg[]=new char[10240];
  int writeCount=0;
  long writeSize=0;
  int i=0;
  while (!testendp.congestedFlush.get()) {
    int z=i - ((i / 26) * 26);
    char c=(char)('a' + z);
    Arrays.fill(msg,c);
    clientSocket.getRemote().sendStringByFuture(String.valueOf(msg));
    writeCount++;
    writeSize+=msg.length;
  }
  LOG.debug("Wrote {} frames totalling {} bytes of payload before congestion kicked in",writeCount,writeSize);
  Assert.assertThat("Error events",clientSocket.errorQueue,empty());
  clientSocket.assertReceivedCloseEvent(timeout,anyOf(is(StatusCode.SHUTDOWN),is(StatusCode.ABNORMAL)),anyOf(containsString("Timeout"),containsString("timeout"),containsString("Write")));
}

{
  if (_stress) {
    String contextPath="";
    String servletMapping="/server";
    AbstractTestServer server1=createServer(0);
    server1.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
    try {
      server1.start();
      int port1=server1.getPort();
      HttpClient client=new HttpClient();
      client.start();
      try {
        String url="http://localhost:" + port1 + contextPath+ servletMapping;
        ContentResponse response1=client.GET(url + "?action=init");
        assertEquals(HttpServletResponse.SC_OK,response1.getStatus());
        String sessionCookie=response1.getHeaders().getStringField("Set-Cookie");
        assertTrue(sessionCookie != null);
        sessionCookie=sessionCookie.replaceFirst("(\\W)(P|p)ath=","$1\\$Path=");
        ExecutorService executor=Executors.newCachedThreadPool();
        int clientsCount=10;
        CyclicBarrier barrier=new CyclicBarrier(clientsCount + 1);
        int requestsCount=100;
        Worker[] workers=new Worker[clientsCount];
        for (int i=0; i < clientsCount; ++i) {
          workers[i]=new Worker(barrier,client,requestsCount,sessionCookie,url);
          executor.execute(workers[i]);
        }
        barrier.await();
        long start=System.nanoTime();
        barrier.await();
        long end=System.nanoTime();
        long elapsed=TimeUnit.NANOSECONDS.toMillis(end - start);
        System.out.println("elapsed ms: " + elapsed);
        executor.shutdownNow();
        Request request=client.newRequest(url + "?action=result");
        request.header("Cookie",sessionCookie);
        ContentResponse response2=request.send();
        assertEquals(HttpServletResponse.SC_OK,response2.getStatus());
        String response=response2.getContentAsString();
        System.out.println("get = " + response);
        assertEquals(response.trim(),String.valueOf(clientsCount * requestsCount));
      }
  finally {
        client.stop();
      }
    }
  finally {
      server1.stop();
    }
  }
}

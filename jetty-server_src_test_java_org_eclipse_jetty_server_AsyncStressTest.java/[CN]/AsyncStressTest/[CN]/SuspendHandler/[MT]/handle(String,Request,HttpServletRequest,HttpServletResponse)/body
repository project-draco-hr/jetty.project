{
  int read_before=0;
  long sleep_for=-1;
  long suspend_for=-1;
  long resume_after=-1;
  long complete_after=-1;
  if (request.getParameter("read") != null)   read_before=Integer.parseInt(request.getParameter("read"));
  if (request.getParameter("sleep") != null)   sleep_for=Integer.parseInt(request.getParameter("sleep"));
  if (request.getParameter("suspend") != null)   suspend_for=Integer.parseInt(request.getParameter("suspend"));
  if (request.getParameter("resume") != null)   resume_after=Integer.parseInt(request.getParameter("resume"));
  if (request.getParameter("complete") != null)   complete_after=Integer.parseInt(request.getParameter("complete"));
  if (DispatcherType.REQUEST.equals(baseRequest.getDispatcherType())) {
    if (read_before > 0) {
      byte[] buf=new byte[read_before];
      request.getInputStream().read(buf);
    }
 else     if (read_before < 0) {
      InputStream in=request.getInputStream();
      int b=in.read();
      while (b != -1)       b=in.read();
    }
    if (suspend_for >= 0) {
      if (suspend_for > 0)       baseRequest.setAsyncTimeout(suspend_for);
      baseRequest.addEventListener(__asyncListener);
      baseRequest.startAsync();
    }
 else     if (sleep_for >= 0) {
      try {
        Thread.sleep(sleep_for);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      response.setStatus(200);
      response.getOutputStream().print("SLEPT");
      baseRequest.setHandled(true);
      return;
    }
 else {
      response.setStatus(200);
      response.getOutputStream().print("NORMAL");
      baseRequest.setHandled(true);
      return;
    }
    final AsyncContext asyncContext=baseRequest.getAsyncContext();
    if (complete_after > 0) {
      TimerTask complete=new TimerTask(){
        public void run(){
          try {
            response.setStatus(200);
            response.getOutputStream().print("COMPLETED");
            baseRequest.setHandled(true);
            asyncContext.complete();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
;
synchronized (_timer) {
        _timer.schedule(complete,complete_after);
      }
    }
 else     if (complete_after == 0) {
      response.setStatus(200);
      response.getOutputStream().print("COMPLETED");
      baseRequest.setHandled(true);
      asyncContext.complete();
    }
    if (resume_after > 0) {
      TimerTask resume=new TimerTask(){
        public void run(){
          asyncContext.dispatch();
        }
      }
;
synchronized (_timer) {
        _timer.schedule(resume,resume_after);
      }
    }
 else     if (resume_after == 0) {
      asyncContext.dispatch();
    }
  }
 else   if (request.getAttribute("TIMEOUT") != null) {
    response.setStatus(200);
    response.getOutputStream().print("TIMEOUT");
    baseRequest.setHandled(true);
  }
 else {
    response.setStatus(200);
    response.getOutputStream().print("RESUMED");
    baseRequest.setHandled(true);
  }
}

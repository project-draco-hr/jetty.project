{
  int read_before=0;
  long sleep_for=-1;
  long suspend_for=-1;
  long resume_after=-1;
  long complete_after=-1;
  final String uri=baseRequest.getUri().toString();
  if (request.getParameter("read") != null)   read_before=Integer.parseInt(request.getParameter("read"));
  if (request.getParameter("sleep") != null)   sleep_for=Integer.parseInt(request.getParameter("sleep"));
  if (request.getParameter("suspend") != null)   suspend_for=Integer.parseInt(request.getParameter("suspend"));
  if (request.getParameter("resume") != null)   resume_after=Integer.parseInt(request.getParameter("resume"));
  if (request.getParameter("complete") != null)   complete_after=Integer.parseInt(request.getParameter("complete"));
  if (DispatcherType.REQUEST.equals(baseRequest.getDispatcherType())) {
    if (read_before > 0) {
      byte[] buf=new byte[read_before];
      request.getInputStream().read(buf);
    }
 else     if (read_before < 0) {
      InputStream in=request.getInputStream();
      int b=in.read();
      while (b != -1)       b=in.read();
    }
    if (suspend_for >= 0) {
      final AsyncContext asyncContext=baseRequest.startAsync();
      asyncContext.addListener(__asyncListener);
      if (suspend_for > 0)       asyncContext.setTimeout(suspend_for);
      if (complete_after > 0) {
        TimerTask complete=new TimerTask(){
          @Override public void run(){
            try {
              response.setStatus(200);
              response.getOutputStream().println("COMPLETED " + request.getHeader("result"));
              baseRequest.setHandled(true);
              asyncContext.complete();
            }
 catch (            Exception e) {
              Request br=(Request)asyncContext.getRequest();
              System.err.println("\n" + e.toString());
              System.err.println(baseRequest + "==" + br);
              System.err.println(uri + "==" + br.getUri());
              System.err.println(asyncContext + "==" + br.getHttpChannelState());
              LOG.warn(e);
              System.exit(1);
            }
          }
        }
;
synchronized (_timer) {
          _timer.schedule(complete,complete_after);
        }
      }
 else       if (complete_after == 0) {
        response.setStatus(200);
        response.getOutputStream().println("COMPLETED " + request.getHeader("result"));
        baseRequest.setHandled(true);
        asyncContext.complete();
      }
 else       if (resume_after > 0) {
        TimerTask resume=new TimerTask(){
          @Override public void run(){
            asyncContext.dispatch();
          }
        }
;
synchronized (_timer) {
          _timer.schedule(resume,resume_after);
        }
      }
 else       if (resume_after == 0) {
        asyncContext.dispatch();
      }
    }
 else     if (sleep_for >= 0) {
      try {
        Thread.sleep(sleep_for);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      response.setStatus(200);
      response.getOutputStream().println("SLEPT " + request.getHeader("result"));
      baseRequest.setHandled(true);
    }
 else {
      response.setStatus(200);
      response.getOutputStream().println("NORMAL " + request.getHeader("result"));
      baseRequest.setHandled(true);
    }
  }
 else   if (request.getAttribute("TIMEOUT") != null) {
    response.setStatus(200);
    response.getOutputStream().println("TIMEOUT " + request.getHeader("result"));
    baseRequest.setHandled(true);
  }
 else {
    response.setStatus(200);
    response.getOutputStream().println("RESUMED " + request.getHeader("result"));
    baseRequest.setHandled(true);
  }
}

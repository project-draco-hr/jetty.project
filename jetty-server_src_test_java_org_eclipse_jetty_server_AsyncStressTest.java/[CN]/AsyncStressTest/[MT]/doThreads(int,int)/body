{
  final Throwable[] throwable=new Throwable[threads];
  final Thread[] thread=new Thread[threads];
  for (int i=0; i < threads; i++) {
    final int id=i;
    final String name="T" + i;
    thread[i]=new Thread(){
      public void run(){
        try {
          doLoops(id,name,loops);
        }
 catch (        Throwable th) {
          th.printStackTrace();
          throwable[id]=th;
        }
 finally {
        }
      }
    }
;
  }
  _loops=new int[threads];
  for (int i=0; i < threads; i++)   thread[i].start();
  while (true) {
    Thread.sleep(1000L);
    int finished=0;
    int errors=0;
    int min=loops;
    int max=0;
    int total=0;
    for (int i=0; i < threads; i++) {
      int l=_loops[i];
      if (l < 0) {
        errors++;
        total-=l;
      }
 else {
        if (l < min)         min=l;
        if (l > max)         max=l;
        total+=l;
        if (l == loops)         finished++;
      }
    }
    Log.info("min/ave/max/target=" + min + "/"+ (total / threads)+ "/"+ max+ "/"+ loops+ " errors/finished/loops="+ errors+ "/"+ finished+ "/"+ threads+ " idle/threads="+ (_threads.getIdleThreads() + _connector.getAcceptors())+ "/"+ _threads.getThreads());
    if ((finished + errors) == threads)     break;
  }
  for (int i=0; i < threads; i++)   thread[i].join();
  for (int i=0; i < threads; i++)   if (throwable[i] != null)   throw throwable[i];
}

{
  SocketChannel client=SocketChannel.open(_connector.socket().getLocalSocketAddress());
  client.socket().setSoTimeout(500);
  SocketChannel server=_connector.accept();
  server.configureBlocking(false);
  _manager.register(server);
  SSLEngine engine=__sslCtxFactory.newSslEngine();
  engine.setUseClientMode(true);
  engine.beginHandshake();
  ByteBuffer appOut=ByteBuffer.allocate(engine.getSession().getApplicationBufferSize());
  ByteBuffer sslOut=ByteBuffer.allocate(engine.getSession().getPacketBufferSize());
  ByteBuffer appIn=ByteBuffer.allocate(engine.getSession().getApplicationBufferSize());
  ByteBuffer sslIn=ByteBuffer.allocate(engine.getSession().getPacketBufferSize());
  appOut.put("HelloWorld".getBytes("UTF-8"));
  appOut.flip();
  System.err.println(engine.getHandshakeStatus());
  while (engine.getHandshakeStatus() != HandshakeStatus.NOT_HANDSHAKING) {
    if (engine.getHandshakeStatus() == HandshakeStatus.NEED_WRAP) {
      SSLEngineResult result=engine.wrap(appOut,sslOut);
      System.err.println(result);
      sslOut.flip();
      int flushed=client.write(sslOut);
      System.err.println("out=" + flushed);
      sslOut.clear();
    }
    if (engine.getHandshakeStatus() == HandshakeStatus.NEED_UNWRAP) {
      int filled=client.read(sslIn);
      System.err.println("in=" + filled);
      sslIn.flip();
      SSLEngineResult result=engine.unwrap(sslIn,appIn);
      sslIn.flip();
      sslIn.compact();
      System.err.println(result);
    }
    if (engine.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {
      Runnable task;
      while ((task=engine.getDelegatedTask()) != null)       task.run();
      System.err.println(engine.getHandshakeStatus());
    }
  }
  Thread.sleep(2000);
}

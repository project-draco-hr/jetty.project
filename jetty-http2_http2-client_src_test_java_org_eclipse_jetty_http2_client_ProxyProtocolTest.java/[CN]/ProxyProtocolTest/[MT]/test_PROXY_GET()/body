{
  startServer(new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
    }
  }
);
  String request1="PROXY TCP4 1.2.3.4 5.6.7.8 1111 2222\r\n";
  SocketChannel channel=SocketChannel.open();
  channel.connect(new InetSocketAddress("localhost",connector.getLocalPort()));
  channel.write(ByteBuffer.wrap(request1.getBytes(StandardCharsets.UTF_8)));
  FuturePromise<Session> promise=new FuturePromise<>();
  client.accept(null,channel,new Session.Listener.Adapter(),promise);
  Session session=promise.get(5,TimeUnit.SECONDS);
  HttpFields fields=new HttpFields();
  String uri="http://localhost:" + connector.getLocalPort() + "/";
  MetaData.Request metaData=new MetaData.Request("GET",new HttpURI(uri),HttpVersion.HTTP_2,fields);
  HeadersFrame frame=new HeadersFrame(1,metaData,null,true);
  CountDownLatch latch=new CountDownLatch(1);
  session.newStream(frame,new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onHeaders(    Stream stream,    HeadersFrame frame){
      MetaData.Response response=(MetaData.Response)frame.getMetaData();
      Assert.assertEquals(HttpStatus.OK_200,response.getStatus());
      if (frame.isEndStream())       latch.countDown();
    }
  }
);
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
}

{
  WebSocketClient.ConnectFuture confut=(WebSocketClient.ConnectFuture)attachment;
  try {
    String scheme=confut.getWebSocketUri().getScheme();
    if ((sslContextFactory != null) && ("wss".equalsIgnoreCase(scheme))) {
      final AtomicReference<AsyncEndPoint> sslEndPointRef=new AtomicReference<>();
      final AtomicReference<Object> attachmentRef=new AtomicReference<>(attachment);
      SSLEngine engine=newSSLEngine(sslContextFactory,channel);
      SslConnection sslConnection=new SslConnection(bufferPool,executor,endPoint,engine){
        @Override public void onClose(){
          sslEndPointRef.set(null);
          attachmentRef.set(null);
          super.onClose();
        }
      }
;
      endPoint.setAsyncConnection(sslConnection);
      AsyncEndPoint sslEndPoint=sslConnection.getDecryptedEndPoint();
      sslEndPointRef.set(sslEndPoint);
      startHandshake(engine);
      AsyncConnection connection=newAsyncConnection(channel,sslEndPoint,attachment);
      endPoint.setAsyncConnection(connection);
      return connection;
    }
 else {
      AsyncConnection connection=newAsyncConnection(channel,endPoint,attachment);
      endPoint.setAsyncConnection(connection);
      return connection;
    }
  }
 catch (  Throwable t) {
    LOG.debug(t);
    confut.failed(null,t);
    throw t;
  }
}

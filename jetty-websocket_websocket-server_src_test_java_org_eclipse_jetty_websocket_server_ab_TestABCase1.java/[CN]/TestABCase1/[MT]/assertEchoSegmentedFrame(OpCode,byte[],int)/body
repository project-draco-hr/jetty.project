{
  BlockheadClient client=new BlockheadClient(server.getServerUri());
  try {
    client.connect();
    client.sendStandardRequest();
    client.expectUpgradeResponse();
    ByteBuffer buf=ByteBuffer.allocate(payload.length + Generator.OVERHEAD);
    BufferUtil.clearToFill(buf);
    buf.put((byte)(0x00 | FIN | opcode.getCode()));
    putPayloadLength(buf,payload.length);
    putMask(buf);
    buf.put(masked(payload));
    BufferUtil.flipToFlush(buf,0);
    int origLimit=buf.limit();
    int limit=buf.limit();
    int len;
    int pos=buf.position();
    int overallLeft=buf.remaining();
    while (overallLeft > 0) {
      buf.position(pos);
      limit=Math.min(origLimit,pos + segmentSize);
      buf.limit(limit);
      len=buf.remaining();
      overallLeft-=len;
      pos+=len;
      client.writeRaw(buf);
      client.flush();
    }
    CloseInfo close=new CloseInfo(StatusCode.NORMAL);
    buf=strictGenerator.generate(close.asFrame());
    client.writeRaw(buf);
    client.flush();
    IncomingFramesCapture capture=client.readFrames(2,TimeUnit.MILLISECONDS,500);
    WebSocketFrame frame=capture.getFrames().get(0);
    Assert.assertThat("frame should be " + opcode + " frame",frame.getOpCode(),is(opcode));
    Assert.assertThat(opcode + ".payloadLength",frame.getPayloadLength(),is(payload.length));
    ByteBufferAssert.assertEquals(opcode + ".payload",payload,frame.getPayload());
    frame=capture.getFrames().get(1);
    Assert.assertThat("CLOSE.frame.opcode",frame.getOpCode(),is(OpCode.CLOSE));
    close=new CloseInfo(frame);
    Assert.assertThat("CLOSE.statusCode",close.getStatusCode(),is(StatusCode.NORMAL));
  }
  finally {
    client.disconnect();
  }
}

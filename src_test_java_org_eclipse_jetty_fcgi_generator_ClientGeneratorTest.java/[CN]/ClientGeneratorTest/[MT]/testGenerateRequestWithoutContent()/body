{
  Fields fields=new Fields();
  final String shortShortName="REQUEST_METHOD";
  final String shortShortValue="GET";
  fields.put(new Fields.Field(shortShortName,shortShortValue));
  final String shortLongName="REQUEST_URI";
  final String shortLongValue="/api/0.6/map?bbox=-64.217736,-31.456810,-64.187736,-31.432322,filler=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
  fields.put(new Fields.Field(shortLongName,shortLongValue));
  final String longShortName="FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210";
  final String longShortValue="api.openstreetmap.org";
  fields.put(new Fields.Field(longShortName,longShortValue));
  char[] chars=new char[ClientGenerator.MAX_PARAM_LENGTH];
  Arrays.fill(chars,'z');
  final String longLongName=new String(chars);
  final String longLongValue=longLongName;
  fields.put(new Fields.Field(longLongName,longLongValue));
  ByteBufferPool byteBufferPool=new MappedByteBufferPool();
  ClientGenerator generator=new ClientGenerator(byteBufferPool);
  Generator.Result result=generator.generateRequestHeaders(13,fields,null);
  final int[] primes=new int[]{2,3,5,7,11};
  int value=1;
  for (  int prime : primes)   value*=prime;
  final AtomicInteger params=new AtomicInteger(1);
  ClientParser parser=new ClientParser(new ClientParser.Listener.Adapter(){
    @Override public void onParam(    String name,    String value){
switch (name) {
case shortShortName:
        Assert.assertEquals(shortShortValue,value);
      params.set(params.get() * primes[0]);
    break;
case shortLongName:
  Assert.assertEquals(shortLongValue,value);
params.set(params.get() * primes[1]);
break;
case longShortName:
Assert.assertEquals(longShortValue,value);
params.set(params.get() * primes[2]);
break;
default :
Assert.assertEquals(longLongName,name);
Assert.assertEquals(longLongValue,value);
params.set(params.get() * primes[3]);
break;
}
}
@Override public void onParams(){
params.set(params.get() * primes[4]);
}
}
);
for (ByteBuffer buffer : result.getByteBuffers()) {
parser.parse(buffer);
Assert.assertFalse(buffer.hasRemaining());
}
Assert.assertEquals(value,params.get());
params.set(1);
for (ByteBuffer buffer : result.getByteBuffers()) {
buffer.flip();
while (buffer.hasRemaining()) parser.parse(ByteBuffer.wrap(new byte[]{buffer.get()}));
Assert.assertFalse(buffer.hasRemaining());
}
Assert.assertEquals(value,params.get());
}

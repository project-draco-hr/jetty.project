{
  Class<?> oClass=nodeClass(node);
  int size=0;
  int argIndex=node.size();
  for (int i=0; i < node.size(); i++) {
    Object o=node.get(i);
    if (o instanceof String)     continue;
    if (!((XmlParser.Node)o).getTag().equals("Arg")) {
      argIndex=i;
      break;
    }
    size++;
  }
  Map<String,Object> namedArgMap=new HashMap<>();
  List<Object> arguments=new LinkedList<>();
  for (int i=0; i < size; i++) {
    Object o=node.get(i);
    XmlParser.Node argNode=(XmlParser.Node)o;
    if (o instanceof String)     continue;
    String namedAttribute=argNode.getAttribute("name");
    Object value=value(obj,(XmlParser.Node)o);
    if (namedAttribute != null)     namedArgMap.put(namedAttribute,value);
    arguments.add(value);
  }
  if (LOG.isDebugEnabled())   LOG.debug("XML new " + oClass);
  Object n;
  try {
    if (namedArgMap.size() > 0) {
      LOG.debug("using named mapping");
      n=TypeUtil.construct(oClass,arguments.toArray(),namedArgMap);
    }
 else {
      LOG.debug("using normal mapping");
      n=TypeUtil.construct(oClass,arguments.toArray());
    }
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalStateException("No suitable constructor: " + node + " on "+ obj);
  }
  configure(n,node,argIndex);
  return n;
}

{
  String id=node.getAttribute("id");
  Class oClass=nodeClass(node);
  if (oClass != null)   obj=null;
 else   if (obj != null)   oClass=obj.getClass();
  if (oClass == null)   throw new IllegalArgumentException(node.toString());
  int size=0;
  int argi=node.size();
  for (int i=0; i < node.size(); i++) {
    Object o=node.get(i);
    if (o instanceof String)     continue;
    if (!((XmlParser.Node)o).getTag().equals("Arg")) {
      argi=i;
      break;
    }
    size++;
  }
  Object[] arg=new Object[size];
  for (int i=0, j=0; j < size; i++) {
    Object o=node.get(i);
    if (o instanceof String)     continue;
    arg[j++]=value(obj,(XmlParser.Node)o);
  }
  String method=node.getAttribute("name");
  if (Log.isDebugEnabled())   Log.debug("XML call " + method);
  Method[] methods=oClass.getMethods();
  for (int c=0; methods != null && c < methods.length; c++) {
    if (!methods[c].getName().equals(method))     continue;
    if (methods[c].getParameterTypes().length != size)     continue;
    if (Modifier.isStatic(methods[c].getModifiers()) != (obj == null))     continue;
    if ((obj == null) && methods[c].getDeclaringClass() != oClass)     continue;
    Object n=null;
    boolean called=false;
    try {
      n=methods[c].invoke(obj,arg);
      called=true;
    }
 catch (    IllegalAccessException e) {
      Log.ignore(e);
    }
catch (    IllegalArgumentException e) {
      Log.ignore(e);
    }
    if (called) {
      if (id != null)       _idMap.put(id,n);
      configure(n,node,argi);
      return n;
    }
  }
  throw new IllegalStateException("No Method: " + node + " on "+ oClass);
}

{
  Map<String,RoleInfo> mappings=(Map<String,RoleInfo>)_constraintMap.get(mapping.getPathSpec());
  if (mappings == null) {
    mappings=new StringMap();
    _constraintMap.put(mapping.getPathSpec(),mappings);
  }
  RoleInfo allMethodsRoleInfo=mappings.get(ALL_METHODS);
  if (allMethodsRoleInfo != null && allMethodsRoleInfo.isForbidden())   return;
  String httpMethod=mapping.getMethod();
  if (httpMethod == null)   httpMethod=ALL_METHODS;
  RoleInfo roleInfo=mappings.get(httpMethod);
  if (roleInfo == null) {
    roleInfo=new RoleInfo();
    mappings.put(httpMethod,roleInfo);
    if (allMethodsRoleInfo != null) {
      roleInfo.combine(allMethodsRoleInfo);
    }
  }
  if (roleInfo.isForbidden())   return;
  Constraint constraint=mapping.getConstraint();
  boolean forbidden=constraint.isForbidden();
  roleInfo.setForbidden(forbidden);
  if (forbidden) {
    if (httpMethod.equals(ALL_METHODS)) {
      mappings.clear();
      mappings.put(ALL_METHODS,roleInfo);
    }
  }
 else {
    UserDataConstraint userDataConstraint=UserDataConstraint.get(constraint.getDataConstraint());
    roleInfo.setUserDataConstraint(userDataConstraint);
    boolean checked=constraint.getAuthenticate();
    roleInfo.setChecked(checked);
    if (roleInfo.isChecked()) {
      if (constraint.isAnyRole()) {
        if (_strict) {
          for (          String role : _roles)           roleInfo.addRole(role);
        }
 else         roleInfo.setAnyRole(true);
      }
 else {
        String[] newRoles=constraint.getRoles();
        for (        String role : newRoles) {
          if (_strict && !_roles.contains(role))           throw new IllegalArgumentException("Attempt to use undeclared role: " + role + ", known roles: "+ _roles);
          roleInfo.addRole(role);
        }
      }
    }
    if (httpMethod.equals(ALL_METHODS)) {
      for (      Map.Entry<String,RoleInfo> entry : mappings.entrySet()) {
        if (!entry.getKey().equals(ALL_METHODS)) {
          RoleInfo specific=entry.getValue();
          specific.combine(roleInfo);
        }
      }
    }
  }
}

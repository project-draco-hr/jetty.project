{
  String jettyHomeSysProp=System.getProperty(OSGiServerConstants.JETTY_HOME);
  String jettyHomeBundleSysProp=System.getProperty(OSGiServerConstants.JETTY_HOME_BUNDLE);
  File jettyHomeDir=null;
  Bundle jettyHomeBundle=null;
  Dictionary<String,String> properties=new Hashtable<String,String>();
  if (jettyHomeSysProp != null) {
    jettyHomeSysProp=Util.resolvePropertyValue(jettyHomeSysProp);
    if (jettyHomeSysProp.startsWith("\"") && jettyHomeSysProp.endsWith("\"") || (jettyHomeSysProp.startsWith("'") && jettyHomeSysProp.endsWith("'")))     jettyHomeSysProp=jettyHomeSysProp.substring(1,jettyHomeSysProp.length() - 1);
    if (jettyHomeBundleSysProp != null)     LOG.warn("Both jetty.home and jetty.home.bundle property defined: jetty.home.bundle ignored.");
    jettyHomeDir=new File(jettyHomeSysProp);
    if (!jettyHomeDir.exists() || !jettyHomeDir.isDirectory()) {
      LOG.warn("Unable to locate the jetty.home folder " + jettyHomeSysProp);
      return null;
    }
    Util.setProperty(properties,OSGiServerConstants.JETTY_HOME,jettyHomeDir.getAbsolutePath());
  }
 else   if (jettyHomeBundleSysProp != null) {
    jettyHomeBundleSysProp=Util.resolvePropertyValue(jettyHomeBundleSysProp);
    for (    Bundle b : bundleContext.getBundles()) {
      if (b.getSymbolicName().equals(jettyHomeBundleSysProp)) {
        jettyHomeBundle=b;
        break;
      }
    }
    if (jettyHomeBundle == null) {
      LOG.warn("Unable to find the jetty.home.bundle named " + jettyHomeSysProp);
      return null;
    }
  }
  if (jettyHomeDir == null && jettyHomeBundle == null) {
    LOG.warn("No default jetty created.");
    return null;
  }
  List<URL> configURLs=jettyHomeDir != null ? getJettyConfigurationURLs(jettyHomeDir) : getJettyConfigurationURLs(jettyHomeBundle,properties);
  LOG.info("Configuring the default jetty server with {}",configURLs);
  String home=properties.get(OSGiServerConstants.JETTY_HOME);
  String base=properties.get(OSGiServerConstants.JETTY_BASE);
  LOG.info("JETTY.HOME=" + home);
  LOG.info("JETTY.BASE=" + base);
  ClassLoader contextCl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(JettyBootstrapActivator.class.getClassLoader());
    if (base == null)     base=home;
    properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME,OSGiServerConstants.MANAGED_JETTY_SERVER_DEFAULT_NAME);
    Util.setProperty(properties,OSGiServerConstants.JETTY_HOST,System.getProperty(OSGiServerConstants.JETTY_HOST));
    Util.setProperty(properties,OSGiServerConstants.JETTY_PORT,System.getProperty(OSGiServerConstants.JETTY_PORT));
    Util.setProperty(properties,OSGiServerConstants.JETTY_PORT_SSL,System.getProperty(OSGiServerConstants.JETTY_PORT_SSL));
    Util.setProperty(properties,OSGiServerConstants.JETTY_HOME,home);
    Util.setProperty(properties,OSGiServerConstants.JETTY_BASE,base);
    Server server=ServerInstanceWrapper.configure(null,configURLs,properties);
    bundleContext.registerService(Server.class.getName(),server,properties);
    LOG.info("Default jetty server configured");
    return server;
  }
  finally {
    Thread.currentThread().setContextClassLoader(contextCl);
  }
}

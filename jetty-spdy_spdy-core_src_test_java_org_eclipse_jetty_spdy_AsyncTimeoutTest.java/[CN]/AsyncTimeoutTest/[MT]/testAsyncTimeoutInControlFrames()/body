{
  final long timeout=1000;
  final TimeUnit unit=TimeUnit.MILLISECONDS;
  ByteBufferPool bufferPool=new MappedByteBufferPool();
  Executor threadPool=Executors.newCachedThreadPool();
  Scheduler scheduler=new TimerScheduler();
  scheduler.start();
  Generator generator=new Generator(bufferPool,new StandardCompressionFactory.StandardCompressor());
  Session session=new StandardSession(SPDY.V2,bufferPool,threadPool,scheduler,new TestController(),null,null,1,null,generator,new FlowControlStrategy.None()){
    @Override public void flush(){
      try {
        unit.sleep(2 * timeout);
        super.flush();
      }
 catch (      InterruptedException x) {
        throw new SPDYException(x);
      }
    }
  }
;
  final CountDownLatch failedLatch=new CountDownLatch(1);
  session.syn(new SynInfo(timeout,unit,new Fields(),true,(byte)0),null,new Promise.Adapter<Stream>(){
    @Override public void failed(    Throwable x){
      failedLatch.countDown();
    }
  }
);
  Assert.assertTrue(failedLatch.await(2 * timeout,unit));
}

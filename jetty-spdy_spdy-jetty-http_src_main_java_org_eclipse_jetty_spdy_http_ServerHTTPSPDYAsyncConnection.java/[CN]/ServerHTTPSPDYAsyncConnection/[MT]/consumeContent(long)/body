{
  while (true) {
    State state=this.state;
    if (state != State.HEADERS_COMPLETE && state != State.CONTENT && state != State.FINAL)     throw new IllegalStateException();
    if (buffer != null) {
      if (buffer.length() > 0) {
        logger.debug("Consuming content bytes, {} available",buffer.length());
        return buffer;
      }
 else {
        dataInfo.consume(dataInfo.length());
        logger.debug("Consumed {} content bytes, queue size {}",dataInfo.consumed(),dataInfos.size());
        dataInfo=null;
        buffer=null;
      }
    }
 else {
      logger.debug("Waiting at most {} ms for content bytes",maxIdleTime);
      long begin=System.nanoTime();
      dataInfo=dataInfos.poll(maxIdleTime,TimeUnit.MILLISECONDS);
      long elapsed=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin);
      logger.debug("Waited {} ms for content bytes",elapsed);
      if (dataInfo != null) {
        if (dataInfo == END_OF_CONTENT) {
          logger.debug("End of content bytes, queue size {}",dataInfos.size());
          return null;
        }
        ByteBuffer byteBuffer=dataInfo.asByteBuffer(false);
        buffer=byteBuffer.isDirect() ? new DirectNIOBuffer(byteBuffer,false) : new IndirectNIOBuffer(byteBuffer,false);
      }
 else {
        stream.getSession().goAway();
        throw new EOFException("read timeout");
      }
    }
  }
}

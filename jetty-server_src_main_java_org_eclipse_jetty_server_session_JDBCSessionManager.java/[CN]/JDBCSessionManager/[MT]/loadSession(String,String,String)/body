{
  final AtomicReference<Session> _reference=new AtomicReference<Session>();
  final AtomicReference<Exception> _exception=new AtomicReference<Exception>();
  Runnable load=new Runnable(){
    /** 
 * @see java.lang.Runnable#run()
 */
    @SuppressWarnings("unchecked") public void run(){
      Session session=null;
      Connection connection=null;
      PreparedStatement statement=null;
      try {
        connection=getConnection();
        statement=_jdbcSessionIdMgr._dbAdaptor.getLoadStatement(connection,id,canonicalContextPath,vhost);
        ResultSet result=statement.executeQuery();
        if (result.next()) {
          long maxInterval=result.getLong("maxInterval");
          if (maxInterval == JDBCSessionIdManager.MAX_INTERVAL_NOT_SET) {
            maxInterval=getMaxInactiveInterval();
          }
          session=new Session(id,result.getString(_jdbcSessionIdMgr._sessionTableRowId),result.getLong("createTime"),result.getLong("accessTime"),maxInterval);
          session.setCookieSet(result.getLong("cookieTime"));
          session.setLastAccessedTime(result.getLong("lastAccessTime"));
          session.setLastNode(result.getString("lastNode"));
          session.setLastSaved(result.getLong("lastSavedTime"));
          session.setExpiryTime(result.getLong("expiryTime"));
          session.setCanonicalContext(result.getString("contextPath"));
          session.setVirtualHost(result.getString("virtualHost"));
          InputStream is=((JDBCSessionIdManager)getSessionIdManager())._dbAdaptor.getBlobInputStream(result,"map");
          ClassLoadingObjectInputStream ois=new ClassLoadingObjectInputStream(is);
          Object o=ois.readObject();
          session.addAttributes((Map<String,Object>)o);
          ois.close();
          if (LOG.isDebugEnabled())           LOG.debug("LOADED session " + session);
        }
 else         if (LOG.isDebugEnabled())         LOG.debug("Failed to load session " + id);
        _reference.set(session);
      }
 catch (      Exception e) {
        _exception.set(e);
      }
 finally {
        if (connection != null) {
          try {
            connection.close();
          }
 catch (          Exception e) {
            LOG.warn(e);
          }
        }
      }
    }
  }
;
  if (_context == null)   load.run();
 else   _context.getContextHandler().handle(load);
  if (_exception.get() != null) {
    _jdbcSessionIdMgr.removeSession(id);
    throw _exception.get();
  }
  return _reference.get();
}

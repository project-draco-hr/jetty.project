{
  if (Util.isServletType(clazz)) {
    Method[] methods=clazz.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method m=(Method)methods[i];
      if (m.isAnnotationPresent(PreDestroy.class)) {
        if (m.getParameterTypes().length != 0)         throw new IllegalStateException(m + " has parameters");
        if (m.getReturnType() != Void.TYPE)         throw new IllegalStateException(m + " is not void");
        if (m.getExceptionTypes().length != 0)         throw new IllegalStateException(m + " throws checked exceptions");
        if (Modifier.isStatic(m.getModifiers()))         throw new IllegalStateException(m + " is static");
        MetaData metaData=_context.getMetaData();
        MetaData.Origin origin=metaData.getOrigin("pre-destroy");
        if (origin != null && (origin == MetaData.Origin.WebXml || origin == MetaData.Origin.WebDefaults || origin == MetaData.Origin.WebOverride))         return;
        PreDestroyCallback callback=new PreDestroyCallback();
        callback.setTarget(clazz.getName(),m.getName());
        LifeCycleCallbackCollection lifecycles=(LifeCycleCallbackCollection)_context.getAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION);
        if (lifecycles == null) {
          lifecycles=new LifeCycleCallbackCollection();
          _context.setAttribute(LifeCycleCallbackCollection.LIFECYCLE_CALLBACK_COLLECTION,lifecycles);
        }
        lifecycles.add(callback);
      }
    }
  }
}

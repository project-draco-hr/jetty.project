{
  final CountDownLatch latch=new CountDownLatch(1);
  start(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    final HttpServletResponse response) throws ServletException, IOException {
      assertScope();
      final AsyncContext asyncContext=request.startAsync(request,response);
      request.getInputStream().setReadListener(new ReadListener(){
        @Override public void onDataAvailable() throws IOException {
          assertScope();
          if (throwable instanceof RuntimeException)           throw (RuntimeException)throwable;
          if (throwable instanceof Error)           throw (Error)throwable;
          throw new IOException(throwable);
        }
        @Override public void onAllDataRead() throws IOException {
          assertScope();
        }
        @Override public void onError(        Throwable t){
          assertScope();
          Assert.assertThat("onError type",t,instanceOf(throwable.getClass()));
          Assert.assertThat("onError message",t.getMessage(),is(throwable.getMessage()));
          latch.countDown();
          response.setStatus(500);
          asyncContext.complete();
        }
      }
);
    }
  }
);
  ContentResponse response=client.newRequest(newURI()).method(HttpMethod.POST).path(servletPath).content(new StringContentProvider("0123456789")).timeout(5,TimeUnit.SECONDS).send();
  assertTrue(latch.await(5,TimeUnit.SECONDS));
  assertEquals(HttpStatus.INTERNAL_SERVER_ERROR_500,response.getStatus());
}

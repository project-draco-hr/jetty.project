{
  if (!_sslContextFactory.checkConfig()) {
    throw new IllegalStateException("SSL context is not configured correctly.");
  }
  _sslContextFactory.start();
  SSLEngine sslEngine=_sslContextFactory.getSslContext().createSSLEngine();
  sslEngine.setUseClientMode(false);
  sslEngine.setWantClientAuth(_sslContextFactory.getWantClientAuth());
  sslEngine.setNeedClientAuth(_sslContextFactory.getNeedClientAuth());
  sslEngine.setEnabledCipherSuites(_sslContextFactory.selectCipherSuites(sslEngine.getEnabledCipherSuites(),sslEngine.getSupportedCipherSuites()));
  SSLSession sslSession=sslEngine.getSession();
  ThreadLocalBuffers buffers=new ThreadLocalBuffers(){
    @Override protected Buffer newBuffer(    int size){
      if (getUseDirectBuffers())       return new DirectNIOBuffer(size);
      return new IndirectNIOBuffer(size);
    }
    @Override protected Buffer newHeader(    int size){
      if (getUseDirectBuffers())       return new DirectNIOBuffer(size);
      return new IndirectNIOBuffer(size);
    }
    @Override protected boolean isHeader(    Buffer buffer){
      return true;
    }
  }
;
  buffers.setBufferSize(sslSession.getApplicationBufferSize());
  buffers.setHeaderSize(sslSession.getApplicationBufferSize());
  _sslBuffers=buffers;
  if (getRequestHeaderSize() < sslSession.getApplicationBufferSize())   setRequestHeaderSize(sslSession.getApplicationBufferSize());
  if (getRequestBufferSize() < sslSession.getApplicationBufferSize())   setRequestBufferSize(sslSession.getApplicationBufferSize());
  super.doStart();
}

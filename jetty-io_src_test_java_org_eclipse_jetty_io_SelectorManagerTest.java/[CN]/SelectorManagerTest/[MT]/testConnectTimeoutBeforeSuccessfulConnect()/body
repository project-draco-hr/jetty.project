{
  ServerSocketChannel server=ServerSocketChannel.open();
  server.bind(new InetSocketAddress("localhost",0));
  SocketAddress address=server.getLocalAddress();
  SocketChannel client=SocketChannel.open();
  client.configureBlocking(false);
  client.connect(address);
  final AtomicBoolean timeoutConnection=new AtomicBoolean();
  final long connectTimeout=1000;
  SelectorManager selectorManager=new SelectorManager(executor,scheduler){
    @Override protected EndPoint newEndPoint(    SocketChannel channel,    ManagedSelector selector,    SelectionKey selectionKey) throws IOException {
      return new SelectChannelEndPoint(channel,selector,selectionKey,getScheduler(),connectTimeout / 2);
    }
    @Override protected boolean finishConnect(    SocketChannel channel) throws IOException {
      try {
        if (timeoutConnection.get())         TimeUnit.MILLISECONDS.sleep(connectTimeout * 2);
        return super.finishConnect(channel);
      }
 catch (      InterruptedException e) {
        return false;
      }
    }
    @Override public Connection newConnection(    SocketChannel channel,    EndPoint endpoint,    Object attachment) throws IOException {
      return new AbstractConnection(endpoint,executor){
        @Override public void onFillable(){
        }
      }
;
    }
    @Override protected void connectionFailed(    SocketChannel channel,    Throwable ex,    Object attachment){
      ((Callback)attachment).failed(ex);
    }
  }
;
  selectorManager.setConnectTimeout(connectTimeout);
  selectorManager.start();
  try {
    timeoutConnection.set(true);
    final CountDownLatch latch1=new CountDownLatch(1);
    selectorManager.connect(client,new Callback.Adapter(){
      @Override public void failed(      Throwable x){
        latch1.countDown();
      }
    }
);
    Assert.assertTrue(latch1.await(connectTimeout * 3,TimeUnit.MILLISECONDS));
    timeoutConnection.set(false);
    final CountDownLatch latch2=new CountDownLatch(1);
    selectorManager.connect(client,new Callback.Adapter(){
      @Override public void failed(      Throwable x){
        latch2.countDown();
      }
    }
);
    Assert.assertTrue(latch2.await(connectTimeout,TimeUnit.MILLISECONDS));
  }
  finally {
    selectorManager.stop();
  }
}

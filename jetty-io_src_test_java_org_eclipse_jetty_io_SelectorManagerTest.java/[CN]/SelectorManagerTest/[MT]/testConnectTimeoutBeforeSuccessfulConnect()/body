{
  ServerSocketChannel server=ServerSocketChannel.open();
  server.bind(new InetSocketAddress("localhost",0));
  SocketAddress address=server.getLocalAddress();
  final AtomicLong timeoutConnection=new AtomicLong();
  final long connectTimeout=1000;
  SelectorManager selectorManager=new SelectorManager(executor,scheduler){
    @Override protected EndPoint newEndPoint(    SocketChannel channel,    ManagedSelector selector,    SelectionKey selectionKey) throws IOException {
      return new SelectChannelEndPoint(channel,selector,selectionKey,getScheduler(),connectTimeout / 2);
    }
    @Override protected boolean finishConnect(    SocketChannel channel) throws IOException {
      try {
        long timeout=timeoutConnection.get();
        if (timeout > 0)         TimeUnit.MILLISECONDS.sleep(timeout);
        return super.finishConnect(channel);
      }
 catch (      InterruptedException e) {
        return false;
      }
    }
    @Override public Connection newConnection(    SocketChannel channel,    EndPoint endpoint,    Object attachment) throws IOException {
      ((Callback)attachment).succeeded();
      return new AbstractConnection(endpoint,executor,true){
        @Override public void onFillable(){
        }
      }
;
    }
    @Override protected void connectionFailed(    SocketChannel channel,    Throwable ex,    Object attachment){
      ((Callback)attachment).failed(ex);
    }
  }
;
  selectorManager.setConnectTimeout(connectTimeout);
  selectorManager.start();
  try {
    SocketChannel client1=SocketChannel.open();
    client1.configureBlocking(false);
    client1.connect(address);
    long timeout=connectTimeout * 2;
    timeoutConnection.set(timeout);
    final CountDownLatch latch1=new CountDownLatch(1);
    selectorManager.connect(client1,new Callback.Adapter(){
      @Override public void failed(      Throwable x){
        latch1.countDown();
      }
    }
);
    Assert.assertTrue(latch1.await(connectTimeout * 3,TimeUnit.MILLISECONDS));
    Assert.assertFalse(client1.isOpen());
    Thread.sleep(timeout);
    try (SocketChannel client2=SocketChannel.open()){
      client2.configureBlocking(false);
      client2.connect(address);
      timeoutConnection.set(0);
      final CountDownLatch latch2=new CountDownLatch(1);
      selectorManager.connect(client2,new Callback.Adapter(){
        @Override public void succeeded(){
          latch2.countDown();
        }
      }
);
      Assert.assertTrue(latch2.await(connectTimeout * 5,TimeUnit.MILLISECONDS));
      Assert.assertTrue(client2.isOpen());
    }
   }
  finally {
    selectorManager.stop();
  }
}

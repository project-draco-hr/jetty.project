{
  AnnotationFinder finder=new AnnotationFinder();
  Log.debug("Scanning system jars");
  finder.find(context.getClassLoader().getParent(),true,context.getInitParameter(__container_pattern),false,new ClassNameResolver(){
    public boolean isExcluded(    String name){
      if (context.isSystemClass(name))       return false;
      if (context.isServerClass(name))       return true;
      return false;
    }
    public boolean shouldOverride(    String name){
      if (context.isParentLoaderPriority())       return true;
      return false;
    }
  }
);
  Log.debug("Scanning WEB-INF/lib jars");
  finder.find(context.getClassLoader(),false,context.getInitParameter(__web_inf_pattern),true,new ClassNameResolver(){
    public boolean isExcluded(    String name){
      if (context.isSystemClass(name))       return true;
      if (context.isServerClass(name))       return false;
      return false;
    }
    public boolean shouldOverride(    String name){
      if (context.isParentLoaderPriority())       return false;
      return true;
    }
  }
);
  Log.debug("Scanning classes in WEB-INF/classes");
  finder.find(context.getWebInf().addPath("classes/"),new ClassNameResolver(){
    public boolean isExcluded(    String name){
      if (context.isSystemClass(name))       return true;
      if (context.isServerClass(name))       return false;
      return false;
    }
    public boolean shouldOverride(    String name){
      if (context.isParentLoaderPriority())       return false;
      return true;
    }
  }
);
  ServletHandler servletHandler=(ServletHandler)context.getServletHandler();
  List filters=LazyList.array2List(servletHandler.getFilters());
  List filterMappings=LazyList.array2List(servletHandler.getFilterMappings());
  List servlets=LazyList.array2List(servletHandler.getServlets());
  List servletMappings=LazyList.array2List(servletHandler.getServletMappings());
  List listeners=LazyList.array2List(context.getEventListeners());
  AnnotationProcessor processor=new AnnotationProcessor(context,finder,_runAsCollection,_injections,_callbacks,servlets,filters,listeners,servletMappings,filterMappings);
  processor.process();
  servlets=processor.getServlets();
  filters=processor.getFilters();
  servletMappings=processor.getServletMappings();
  filterMappings=processor.getFilterMappings();
  listeners=processor.getListeners();
  servletHandler.setFilters((FilterHolder[])LazyList.toArray(filters,FilterHolder.class));
  servletHandler.setFilterMappings((FilterMapping[])LazyList.toArray(filterMappings,FilterMapping.class));
  servletHandler.setServlets((ServletHolder[])LazyList.toArray(servlets,ServletHolder.class));
  servletHandler.setServletMappings((ServletMapping[])LazyList.toArray(servletMappings,ServletMapping.class));
  context.setEventListeners((EventListener[])LazyList.toArray(listeners,EventListener.class));
}

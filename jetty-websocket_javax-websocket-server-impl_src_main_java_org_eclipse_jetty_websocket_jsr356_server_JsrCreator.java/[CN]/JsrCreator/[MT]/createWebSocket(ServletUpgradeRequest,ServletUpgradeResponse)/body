{
  JsrHandshakeRequest hsreq=new JsrHandshakeRequest(req);
  JsrHandshakeResponse hsresp=new JsrHandshakeResponse(resp);
  ServerEndpointConfig config=metadata.getConfig();
  config=new BasicServerEndpointConfig(config,objectFactory);
  config.getUserProperties().put(PROP_LOCAL_ADDRESS,req.getLocalSocketAddress());
  config.getUserProperties().put(PROP_REMOTE_ADDRESS,req.getRemoteSocketAddress());
  ServerEndpointConfig.Configurator configurator=config.getConfigurator();
  configurator.modifyHandshake(config,hsreq,hsresp);
  if (!configurator.checkOrigin(req.getOrigin())) {
    try {
      resp.sendForbidden("Origin mismatch");
    }
 catch (    IOException e) {
      if (LOG.isDebugEnabled())       LOG.debug("Unable to send error response",e);
    }
    return null;
  }
  List<String> supported=config.getSubprotocols();
  List<String> requested=req.getSubProtocols();
  String subprotocol=configurator.getNegotiatedSubprotocol(supported,requested);
  if (StringUtil.isNotBlank(subprotocol)) {
    resp.setAcceptedSubProtocol(subprotocol);
  }
  List<Extension> installedExts=new ArrayList<>();
  for (  String extName : extensionFactory.getAvailableExtensions().keySet()) {
    installedExts.add(new JsrExtension(extName));
  }
  List<Extension> requestedExts=new ArrayList<>();
  for (  ExtensionConfig reqCfg : req.getExtensions()) {
    requestedExts.add(new JsrExtension(reqCfg));
  }
  List<Extension> usedExts=configurator.getNegotiatedExtensions(installedExts,requestedExts);
  List<ExtensionConfig> configs=new ArrayList<>();
  if (usedExts != null) {
    for (    Extension used : usedExts) {
      ExtensionConfig ecfg=new ExtensionConfig(used.getName());
      for (      Parameter param : used.getParameters()) {
        ecfg.setParameter(param.getName(),param.getValue());
      }
      configs.add(ecfg);
    }
  }
  resp.setExtensions(configs);
  try {
    Class<?> endpointClass=config.getEndpointClass();
    Object endpoint=config.getConfigurator().getEndpointInstance(endpointClass);
    PathSpec pathSpec=hsreq.getRequestPathSpec();
    if (pathSpec instanceof WebSocketPathSpec) {
      WebSocketPathSpec wspathSpec=(WebSocketPathSpec)pathSpec;
      String requestPath=req.getRequestPath();
      config=new PathParamServerEndpointConfig(config,objectFactory,wspathSpec,requestPath);
    }
    return new EndpointInstance(endpoint,config,metadata);
  }
 catch (  InstantiationException e) {
    if (LOG.isDebugEnabled())     LOG.debug("Unable to create websocket: " + config.getEndpointClass().getName(),e);
    return null;
  }
}

{
  JsrHandshakeRequest hsreq=new JsrHandshakeRequest(req);
  JsrHandshakeResponse hsresp=new JsrHandshakeResponse(resp);
  ServerEndpointConfig config=metadata.getConfig();
  ServerEndpointConfig.Configurator configurator=config.getConfigurator();
  configurator.modifyHandshake(config,hsreq,hsresp);
  if (!configurator.checkOrigin(req.getOrigin())) {
    try {
      resp.sendForbidden("Origin mismatch");
    }
 catch (    IOException e) {
      LOG.debug("Unable to send error response",e);
    }
    return null;
  }
  List<String> supported=config.getSubprotocols();
  List<String> requested=req.getSubProtocols();
  String subprotocol=configurator.getNegotiatedSubprotocol(supported,requested);
  if (subprotocol != null) {
    resp.setAcceptedSubProtocol(subprotocol);
  }
  try {
    Class<?> endpointClass=config.getEndpointClass();
    Object endpoint=config.getConfigurator().getEndpointInstance(endpointClass);
    PathSpec pathSpec=hsreq.getRequestPathSpec();
    if (pathSpec instanceof WebSocketPathSpec) {
      WebSocketPathSpec wspathSpec=(WebSocketPathSpec)pathSpec;
      String requestPath=req.getRequestPath();
      config=new PathParamServerEndpointConfig(config,wspathSpec,requestPath);
    }
    return new EndpointInstance(endpoint,config,metadata);
  }
 catch (  InstantiationException e) {
    LOG.debug("Unable to create websocket: " + config.getEndpointClass().getName(),e);
    return null;
  }
}

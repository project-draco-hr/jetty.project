{
  String[] classNames=new String[]{"org.eclipse.jetty.annotations.ClassB"};
  AnnotationParser parser=new AnnotationParser();
class MultiAnnotationHandler implements DiscoverableAnnotationHandler {
    public void handleClass(    String className,    int version,    int access,    String signature,    String superName,    String[] interfaces,    String annotation,    List<Value> values){
      assertTrue("org.eclipse.jetty.annotations.ClassB".equals(className));
      for (      Value anv : values) {
        System.err.println(anv.toString());
      }
    }
    public void handleField(    String className,    String fieldName,    int access,    String fieldType,    String signature,    Object value,    String annotation,    List<Value> values){
      fail();
    }
    public void handleMethod(    String className,    String methodName,    int access,    String params,    String signature,    String[] exceptions,    String annotation,    List<Value> values){
      assertTrue("org.eclipse.jetty.annotations.ClassB".equals(className));
      assertTrue("a".equals(methodName));
      for (      Value anv : values) {
        System.err.println(anv.toString());
      }
    }
    @Override public String getAnnotationName(){
      return "org.eclipse.jetty.annotations.Multi";
    }
  }
  parser.registerHandler(new MultiAnnotationHandler());
  parser.parse(classNames,null);
}

{
  String[] classNames=new String[]{"org.eclipse.jetty.annotations.ClassA"};
  AnnotationParser parser=new AnnotationParser();
class SampleAnnotationHandler implements DiscoverableAnnotationHandler {
    private List<String> methods=Arrays.asList("a","b","c","d","l");
    public void handleClass(    String className,    int version,    int access,    String signature,    String superName,    String[] interfaces,    String annotation,    List<Value> values){
      assertEquals("org.eclipse.jetty.annotations.ClassA",className);
    }
    public void handleField(    String className,    String fieldName,    int access,    String fieldType,    String signature,    Object value,    String annotation,    List<Value> values){
      assertEquals("m",fieldName);
      assertEquals(org.objectweb.asm.Type.OBJECT,org.objectweb.asm.Type.getType(fieldType).getSort());
      assertEquals(1,values.size());
      Value anv1=values.get(0);
      assertEquals("value",anv1.getName());
      assertEquals(7,anv1.getValue());
    }
    public void handleMethod(    String className,    String methodName,    int access,    String desc,    String signature,    String[] exceptions,    String annotation,    List<Value> values){
      assertEquals("org.eclipse.jetty.annotations.ClassA",className);
      assertTrue(methods.contains(methodName));
      assertEquals("org.eclipse.jetty.annotations.Sample",annotation);
    }
    @Override public String getAnnotationName(){
      return "org.eclipse.jetty.annotations.Sample";
    }
  }
  parser.registerHandler(new SampleAnnotationHandler());
  long start=System.currentTimeMillis();
  parser.parse(classNames,new ClassNameResolver(){
    public boolean isExcluded(    String name){
      return false;
    }
    public boolean shouldOverride(    String name){
      return false;
    }
  }
);
  long end=System.currentTimeMillis();
}

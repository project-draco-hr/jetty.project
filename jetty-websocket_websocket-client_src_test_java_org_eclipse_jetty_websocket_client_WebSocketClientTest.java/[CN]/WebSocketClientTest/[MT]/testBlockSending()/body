{
  WebSocketClient client=factory.newWebSocketClient();
  client.getPolicy().setIdleTimeout(10000);
  TrackingSocket wsocket=new TrackingSocket();
  URI wsUri=server.getWsUri();
  Future<WebSocketConnection> future=client.connect(wsUri,wsocket);
  final ServerConnection ssocket=server.accept();
  ssocket.upgrade();
  WebSocketConnection connection=future.get(250,TimeUnit.MILLISECONDS);
  Assert.assertNotNull(connection);
  wsocket.assertWasOpened();
  wsocket.assertNotClosed();
  final int messages=200000;
  final AtomicLong totalB=new AtomicLong();
  Thread consumer=new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(200);
        byte[] recv=new byte[32 * 1024];
        int len=0;
        while (len >= 0) {
          totalB.addAndGet(len);
          len=ssocket.getInputStream().read(recv,0,recv.length);
          Thread.sleep(10);
        }
      }
 catch (      InterruptedException e) {
        return;
      }
catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  consumer.start();
  long start=System.currentTimeMillis();
  String mesg="This is a test message to send";
  for (int i=0; i < messages; i++) {
    connection.write(null,new FutureCallback<Void>(),mesg);
  }
  long writeDur=(System.currentTimeMillis() - start);
  while (totalB.get() < (messages * (mesg.length() + 6L))) {
    Thread.sleep(10);
  }
  Assert.assertThat("write duration",writeDur,greaterThan(1000L));
  Assert.assertEquals(messages * (mesg.length() + 6L),totalB.get());
  consumer.interrupt();
}

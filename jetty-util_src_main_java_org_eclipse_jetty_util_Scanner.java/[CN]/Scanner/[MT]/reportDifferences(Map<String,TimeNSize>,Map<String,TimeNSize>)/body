{
  Set<String> oldScanKeys=new HashSet<String>(oldScan.keySet());
  for (  Map.Entry<String,TimeNSize> entry : currentScan.entrySet()) {
    String file=entry.getKey();
    if (!oldScanKeys.contains(file)) {
      Notification old=_notifications.put(file,Notification.ADDED);
      if (old != null) {
switch (old) {
case REMOVED:
case CHANGED:
          _notifications.put(file,Notification.CHANGED);
      }
    }
  }
 else   if (!oldScan.get(file).equals(currentScan.get(file))) {
    Notification old=_notifications.put(file,Notification.CHANGED);
    if (old != null) {
switch (old) {
case ADDED:
        _notifications.put(file,Notification.ADDED);
    }
  }
}
}
for (String file : oldScan.keySet()) {
if (!currentScan.containsKey(file)) {
  Notification old=_notifications.put(file,Notification.REMOVED);
  if (old != null) {
switch (old) {
case ADDED:
      _notifications.remove(file);
  }
}
}
}
if (LOG.isDebugEnabled()) LOG.debug("scanned " + _scanDirs + ": "+ _notifications);
List<String> bulkChanges=new ArrayList<String>();
for (Iterator<Entry<String,Notification>> iter=_notifications.entrySet().iterator(); iter.hasNext(); ) {
Entry<String,Notification> entry=iter.next();
String file=entry.getKey();
if (oldScan.containsKey(file)) {
if (!oldScan.get(file).equals(currentScan.get(file))) continue;
}
 else if (currentScan.containsKey(file)) continue;
Notification notification=entry.getValue();
iter.remove();
bulkChanges.add(file);
switch (notification) {
case ADDED:
reportAddition(file);
break;
case CHANGED:
reportChange(file);
break;
case REMOVED:
reportRemoval(file);
break;
}
}
if (!bulkChanges.isEmpty()) reportBulkChanges(bulkChanges);
}

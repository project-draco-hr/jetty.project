{
  String contextPath="";
  String servletMapping="/server";
  int maxInactivePeriod=8;
  int scavengePeriod=2;
  AbstractTestServer server1=createServer(0,maxInactivePeriod,scavengePeriod);
  TestServlet servlet1=new TestServlet();
  ServletHolder holder1=new ServletHolder(servlet1);
  ServletContextHandler context=server1.addContext(contextPath);
  TestSessionListener listener1=new TestSessionListener();
  context.addEventListener(listener1);
  context.addServlet(holder1,servletMapping);
  server1.start();
  int port1=server1.getPort();
  try {
    AbstractTestServer server2=createServer(0,maxInactivePeriod,scavengePeriod);
    server2.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
    server2.start();
    int port2=server2.getPort();
    try {
      HttpClient client=new HttpClient();
      client.start();
      try {
        Future<ContentResponse> future=client.GET("http://localhost:" + port1 + contextPath+ servletMapping+ "?action=init");
        ContentResponse response1=future.get();
        assertEquals(HttpServletResponse.SC_OK,response1.getStatus());
        assertEquals("test",response1.getContentAsString());
        String sessionCookie=response1.getHeaders().getStringField("Set-Cookie");
        assertTrue(sessionCookie != null);
        sessionCookie=sessionCookie.replaceFirst("(\\W)(P|p)ath=","$1\\$Path=");
        int requestInterval=500;
        for (int i=0; i < maxInactivePeriod * (1000 / requestInterval); ++i) {
          Request request=client.newRequest("http://localhost:" + port2 + contextPath+ servletMapping);
          request.header("Cookie",sessionCookie);
          future=request.send();
          ContentResponse response2=future.get();
          assertEquals(HttpServletResponse.SC_OK,response2.getStatus());
          assertEquals("test",response2.getContentAsString());
          String setCookie=response2.getHeaders().getStringField("Set-Cookie");
          if (setCookie != null)           sessionCookie=setCookie.replaceFirst("(\\W)(P|p)ath=","$1\\$Path=");
          Thread.sleep(requestInterval);
        }
        Thread.sleep(scavengePeriod * 2500L);
        assertTrue(listener1.destroyed == false);
      }
  finally {
        client.stop();
      }
    }
  finally {
      server2.stop();
    }
  }
  finally {
    server1.stop();
  }
}

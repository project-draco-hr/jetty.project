{
  normalizeDependencies();
  for (  Module module : modules.values()) {
    for (    String parentName : module.getParentNames()) {
      Module parent=get(parentName);
      if (parent == null) {
        if (Props.hasPropertyKey(parentName)) {
          StartLog.debug("Module property not expandable (yet) [%s]",parentName);
        }
 else {
          StartLog.warn("Module not found [%s]",parentName);
        }
      }
 else {
        module.addParentEdge(parent);
        parent.addChildEdge(module);
      }
    }
    for (    String optionalParentName : module.getOptionalParentNames()) {
      Module optional=get(optionalParentName);
      if (optional == null) {
        StartLog.debug("Optional module not found [%s]",optionalParentName);
      }
 else       if (optional.isEnabled()) {
        module.addParentEdge(optional);
        optional.addChildEdge(module);
      }
    }
  }
  Stack<String> refs=new Stack<>();
  for (  Module module : modules.values()) {
    refs.push(module.getName());
    assertNoCycle(module,refs);
    refs.pop();
  }
  for (  Module module : modules.values()) {
    if (module.getParentEdges().isEmpty()) {
      bfsCalculateDepth(module,0);
    }
  }
}

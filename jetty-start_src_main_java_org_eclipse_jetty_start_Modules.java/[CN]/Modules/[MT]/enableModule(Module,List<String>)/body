{
  int count=0;
  if (sources == null) {
    throw new RuntimeException("sources should never be empty");
  }
  module.addSources(sources);
  String via=Utils.join(sources,", ");
  if (module.isEnabled()) {
    StartLog.debug("Enabled module: %s (via %s)",module.getName(),via);
    return count;
  }
  StartLog.debug("Enabling module: %s (via %s)",module.getName(),via);
  module.setEnabled(true);
  count++;
  args.parseModule(module);
  module.expandProperties(args.getProperties());
  Set<String> parentNames=new HashSet<>();
  parentNames.addAll(module.getParentNames());
  for (  String name : parentNames) {
    StartLog.debug("Enable parent '%s' of module: %s",name,module.getName());
    Module parent=modules.get(name);
    if (parent == null) {
      Path file=baseHome.getPath("modules/" + name + ".mod");
      if (FS.canReadFile(file)) {
        parent=registerModule(file);
        parent.expandProperties(args.getProperties());
        updateParentReferencesTo(parent);
      }
 else {
        if (!Props.hasPropertyKey(name)) {
          StartLog.debug("Missing module definition: [ Mod: %s | File: %s ]",name,file);
          missingModules.add(name);
        }
      }
    }
    if (parent != null) {
      count+=enableModule(parent,sources);
    }
  }
  return count;
}

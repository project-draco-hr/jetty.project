{
  final Continuation continuation=ContinuationSupport.getContinuation(request,response);
  response.addHeader("history",continuation.getClass().toString());
  int read_before=0;
  long sleep_for=-1;
  long suspend_for=-1;
  long suspend2_for=-1;
  long resume_after=-1;
  long resume2_after=-1;
  long complete_after=-1;
  long complete2_after=-1;
  boolean undispatch=false;
  if (request.getParameter("read") != null)   read_before=Integer.parseInt(request.getParameter("read"));
  if (request.getParameter("sleep") != null)   sleep_for=Integer.parseInt(request.getParameter("sleep"));
  if (request.getParameter("suspend") != null)   suspend_for=Integer.parseInt(request.getParameter("suspend"));
  if (request.getParameter("suspend2") != null)   suspend2_for=Integer.parseInt(request.getParameter("suspend2"));
  if (request.getParameter("resume") != null)   resume_after=Integer.parseInt(request.getParameter("resume"));
  if (request.getParameter("resume2") != null)   resume2_after=Integer.parseInt(request.getParameter("resume2"));
  if (request.getParameter("complete") != null)   complete_after=Integer.parseInt(request.getParameter("complete"));
  if (request.getParameter("complete2") != null)   complete2_after=Integer.parseInt(request.getParameter("complete2"));
  if (request.getParameter("undispatch") != null)   undispatch=Boolean.parseBoolean(request.getParameter("undispatch"));
  if (continuation.isInitial()) {
    if (read_before > 0) {
      byte[] buf=new byte[read_before];
      request.getInputStream().read(buf);
    }
 else     if (read_before < 0) {
      InputStream in=request.getInputStream();
      int b=in.read();
      while (b != -1)       b=in.read();
    }
    if (suspend_for >= 0) {
      if (suspend_for > 0)       continuation.setTimeout(suspend_for);
      continuation.addContinuationListener(__listener);
      ((HttpServletResponse)response).addHeader("history","suspend");
      continuation.suspend(response);
      if (complete_after > 0) {
        TimerTask complete=new TimerTask(){
          public void run(){
            try {
              response.setStatus(200);
              response.getOutputStream().println("COMPLETED\n");
              continuation.complete();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
;
synchronized (_timer) {
          _timer.schedule(complete,complete_after);
        }
      }
 else       if (complete_after == 0) {
        response.setStatus(200);
        response.getOutputStream().println("COMPLETED\n");
        continuation.complete();
      }
 else       if (resume_after > 0) {
        TimerTask resume=new TimerTask(){
          public void run(){
            ((HttpServletResponse)continuation.getServletResponse()).addHeader("history","resume");
            continuation.resume();
          }
        }
;
synchronized (_timer) {
          _timer.schedule(resume,resume_after);
        }
      }
 else       if (resume_after == 0) {
        ((HttpServletResponse)continuation.getServletResponse()).addHeader("history","resume");
        continuation.resume();
      }
      if (undispatch)       continuation.undispatch();
    }
 else     if (sleep_for >= 0) {
      try {
        Thread.sleep(sleep_for);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      response.setStatus(200);
      response.getOutputStream().println("SLEPT\n");
    }
 else {
      response.setStatus(200);
      response.getOutputStream().println("NORMAL\n");
    }
  }
 else   if (suspend2_for >= 0 && request.getAttribute("2nd") == null) {
    request.setAttribute("2nd","cycle");
    if (suspend2_for > 0)     continuation.setTimeout(suspend2_for);
    ((HttpServletResponse)response).addHeader("history","suspend");
    continuation.suspend(response);
    if (complete2_after > 0) {
      TimerTask complete=new TimerTask(){
        public void run(){
          try {
            response.setStatus(200);
            response.getOutputStream().println("COMPLETED\n");
            continuation.complete();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
;
synchronized (_timer) {
        _timer.schedule(complete,complete2_after);
      }
    }
 else     if (complete2_after == 0) {
      response.setStatus(200);
      response.getOutputStream().println("COMPLETED\n");
      continuation.complete();
    }
 else     if (resume2_after > 0) {
      TimerTask resume=new TimerTask(){
        public void run(){
          ((HttpServletResponse)response).addHeader("history","resume");
          continuation.resume();
        }
      }
;
synchronized (_timer) {
        _timer.schedule(resume,resume2_after);
      }
    }
 else     if (resume2_after == 0) {
      ((HttpServletResponse)response).addHeader("history","resume");
      continuation.resume();
    }
    if (undispatch)     continuation.undispatch();
    return;
  }
 else   if (continuation.isExpired()) {
    response.setStatus(200);
    response.getOutputStream().println("TIMEOUT\n");
  }
 else   if (continuation.isResumed()) {
    response.setStatus(200);
    response.getOutputStream().println("RESUMED\n");
  }
 else {
    response.setStatus(200);
    response.getOutputStream().println("unknown???\n");
  }
}

{
  MessageDeflateCompressionExtension ext=new MessageDeflateCompressionExtension();
  ext.setBufferPool(new MappedByteBufferPool());
  ext.setPolicy(WebSocketPolicy.newServerPolicy());
  ExtensionConfig config=ExtensionConfig.parse("permessage-compress");
  ext.setConfig(config);
  IncomingFramesCapture capture=new IncomingFramesCapture();
  ext.setNextIncomingFrames(capture);
  List<String> quote=new ArrayList<>();
  quote.add("No amount of experimentation can ever prove me right;");
  quote.add("a single experiment can prove me wrong.");
  quote.add("-- Albert Einstein");
  for (  String q : quote) {
    TextFrame frame=new TextFrame(q);
    frame.setRsv1(false);
    ext.incomingFrame(frame);
  }
  int len=quote.size();
  capture.assertFrameCount(len);
  capture.assertHasFrame(OpCode.TEXT,len);
  String prefix;
  for (int i=0; i < len; i++) {
    prefix="Frame[" + i + "]";
    WebSocketFrame actual=capture.getFrames().get(i);
    Assert.assertThat(prefix + ".opcode",actual.getOpCode(),is(OpCode.TEXT));
    Assert.assertThat(prefix + ".fin",actual.isFin(),is(true));
    Assert.assertThat(prefix + ".rsv1",actual.isRsv1(),is(false));
    Assert.assertThat(prefix + ".rsv2",actual.isRsv2(),is(false));
    Assert.assertThat(prefix + ".rsv3",actual.isRsv3(),is(false));
    ByteBuffer expected=BufferUtil.toBuffer(quote.get(i),StringUtil.__UTF8_CHARSET);
    Assert.assertThat(prefix + ".payloadLength",actual.getPayloadLength(),is(expected.remaining()));
    ByteBufferAssert.assertEquals(prefix + ".payload",expected,actual.getPayload().slice());
  }
}

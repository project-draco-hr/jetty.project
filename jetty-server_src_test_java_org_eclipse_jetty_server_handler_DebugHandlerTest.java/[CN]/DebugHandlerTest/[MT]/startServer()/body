{
  server=new Server();
  ServerConnector httpConnector=new ServerConnector(server);
  httpConnector.setPort(0);
  server.addConnector(httpConnector);
  File keystorePath=MavenTestingUtils.getTestResourceFile("keystore");
  SslContextFactory sslContextFactory=new SslContextFactory();
  sslContextFactory.setKeyStorePath(keystorePath.getAbsolutePath());
  sslContextFactory.setKeyStorePassword("storepwd");
  sslContextFactory.setKeyManagerPassword("keypwd");
  sslContextFactory.setTrustStorePath(keystorePath.getAbsolutePath());
  sslContextFactory.setTrustStorePassword("storepwd");
  ByteBufferPool pool=new LeakTrackingByteBufferPool(new MappedByteBufferPool.Tagged());
  ServerConnector sslConnector=new ServerConnector(server,(Executor)null,(Scheduler)null,pool,1,1,AbstractConnectionFactory.getFactories(sslContextFactory,new HttpConnectionFactory()));
  server.addConnector(sslConnector);
  debugHandler=new DebugHandler();
  capturedLog=new ByteArrayOutputStream();
  debugHandler.setOutputStream(capturedLog);
  debugHandler.setHandler(new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      baseRequest.setHandled(true);
      response.setStatus(HttpStatus.OK_200);
    }
  }
);
  server.setHandler(debugHandler);
  server.start();
  String host=httpConnector.getHost();
  if (host == null)   host="localhost";
  serverURI=URI.create(String.format("http://%s:%d/",host,httpConnector.getLocalPort()));
  secureServerURI=URI.create(String.format("https://%s:%d/",host,sslConnector.getLocalPort()));
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  try (InputStream stream=sslContextFactory.getKeyStoreResource().getInputStream()){
    keystore.load(stream,"storepwd".toCharArray());
  }
   TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(keystore);
  sslContext=SSLContext.getInstance("TLS");
  sslContext.init(null,trustManagerFactory.getTrustManagers(),null);
  try {
    HttpsURLConnection.setDefaultHostnameVerifier(__hostnameverifier);
    SSLContext sc=SSLContext.getInstance("TLS");
    sc.init(null,SslContextFactory.TRUST_ALL_CERTS,new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}

{
  final String primaryResource="/primary.html";
  final String secondaryResource1="/secondary1.css";
  final String secondaryResource2="/secondary2.js";
  final String tertiaryResource="/tertiary.png";
  start(new HttpServlet(){
    @Override protected void doGet(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      String requestURI=request.getRequestURI();
      final ServletOutputStream output=response.getOutputStream();
      if (requestURI.endsWith(primaryResource))       output.print("<html><head></head><body>PRIMARY</body></html>");
 else       if (requestURI.endsWith(secondaryResource1))       output.print("body { background-image: url(\"" + tertiaryResource + "\"); }");
 else       if (requestURI.endsWith(secondaryResource2))       output.print("(function() { window.alert('HTTP/2'); })()");
      if (requestURI.endsWith(tertiaryResource))       output.write("TERTIARY".getBytes(StandardCharsets.UTF_8));
    }
  }
);
  final Session session=newClient(new Session.Listener.Adapter());
  final String primaryURI="http://localhost:" + connector.getLocalPort() + servletPath+ primaryResource;
  HttpFields primaryFields=new HttpFields();
  MetaData.Request primaryRequest=newRequest("GET",primaryResource,primaryFields);
  final CountDownLatch warmupLatch=new CountDownLatch(2);
  session.newStream(new HeadersFrame(primaryRequest,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream()) {
        String secondaryURI1="http://localhost:" + connector.getLocalPort() + servletPath+ secondaryResource1;
        HttpFields secondaryFields1=new HttpFields();
        secondaryFields1.put(HttpHeader.REFERER,primaryURI);
        MetaData.Request secondaryRequest1=newRequest("GET",secondaryResource1,secondaryFields1);
        session.newStream(new HeadersFrame(secondaryRequest1,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
          @Override public void onData(          Stream stream,          DataFrame frame,          Callback callback){
            callback.succeeded();
            if (frame.isEndStream()) {
              HttpFields tertiaryFields=new HttpFields();
              tertiaryFields.put(HttpHeader.REFERER,secondaryURI1);
              MetaData.Request tertiaryRequest=newRequest("GET",tertiaryResource,tertiaryFields);
              session.newStream(new HeadersFrame(tertiaryRequest,null,true),new Promise.Adapter<>(),new Adapter(){
                @Override public void onData(                Stream stream,                DataFrame frame,                Callback callback){
                  callback.succeeded();
                  if (frame.isEndStream())                   warmupLatch.countDown();
                }
              }
);
            }
          }
        }
);
        HttpFields secondaryFields2=new HttpFields();
        secondaryFields2.put(HttpHeader.REFERER,primaryURI);
        MetaData.Request secondaryRequest2=newRequest("GET",secondaryResource2,secondaryFields2);
        session.newStream(new HeadersFrame(secondaryRequest2,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
          @Override public void onData(          Stream stream,          DataFrame frame,          Callback callback){
            callback.succeeded();
            if (frame.isEndStream())             warmupLatch.countDown();
          }
        }
);
      }
    }
  }
);
  Assert.assertTrue(warmupLatch.await(5,TimeUnit.SECONDS));
  Thread.sleep(1000);
  primaryRequest=newRequest("GET",primaryResource,primaryFields);
  final CountDownLatch primaryResponseLatch=new CountDownLatch(1);
  final CountDownLatch primaryPushesLatch=new CountDownLatch(3);
  final CountDownLatch recursiveLatch=new CountDownLatch(1);
  session.newStream(new HeadersFrame(primaryRequest,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream())       primaryResponseLatch.countDown();
    }
    @Override public Stream.Listener onPush(    Stream stream,    PushPromiseFrame frame){
      Assert.assertEquals(1,frame.getStreamId() & 1);
      return new Adapter(){
        @Override public void onData(        Stream stream,        DataFrame frame,        Callback callback){
          callback.succeeded();
          if (frame.isEndStream())           primaryPushesLatch.countDown();
        }
        @Override public Stream.Listener onPush(        Stream stream,        PushPromiseFrame frame){
          return new Adapter(){
            @Override public void onData(            Stream stream,            DataFrame frame,            Callback callback){
              callback.succeeded();
              if (frame.isEndStream())               recursiveLatch.countDown();
            }
          }
;
        }
      }
;
    }
  }
);
  Assert.assertTrue(primaryPushesLatch.await(5,TimeUnit.SECONDS));
  Assert.assertFalse(recursiveLatch.await(1,TimeUnit.SECONDS));
  Assert.assertTrue(primaryResponseLatch.await(5,TimeUnit.SECONDS));
  CountDownLatch secondaryResponseLatch=new CountDownLatch(1);
  CountDownLatch secondaryPushLatch=new CountDownLatch(1);
  MetaData.Request secondaryRequest=newRequest("GET",secondaryResource1,new HttpFields());
  session.newStream(new HeadersFrame(secondaryRequest,null,true),new Promise.Adapter<>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream())       secondaryResponseLatch.countDown();
    }
    @Override public Stream.Listener onPush(    Stream stream,    PushPromiseFrame frame){
      return new Adapter(){
        @Override public void onData(        Stream stream,        DataFrame frame,        Callback callback){
          callback.succeeded();
          if (frame.isEndStream())           secondaryPushLatch.countDown();
        }
      }
;
    }
  }
);
  Assert.assertTrue(secondaryPushLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(secondaryResponseLatch.await(5,TimeUnit.SECONDS));
}

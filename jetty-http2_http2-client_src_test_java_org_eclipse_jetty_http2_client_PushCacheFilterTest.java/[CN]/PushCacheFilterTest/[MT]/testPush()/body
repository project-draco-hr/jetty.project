{
  final String primaryResource="/primary.html";
  final String secondaryResource="/secondary.png";
  final byte[] secondaryData="SECONDARY".getBytes("UTF-8");
  startServer(new HttpServlet(){
    @Override protected void doGet(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      String requestURI=req.getRequestURI();
      ServletOutputStream output=resp.getOutputStream();
      if (requestURI.endsWith(primaryResource))       output.print("<html><head></head><body>PRIMARY</body></html>");
 else       if (requestURI.endsWith(secondaryResource))       output.write(secondaryData);
    }
  }
);
  final Session session=newClient(new Session.Listener.Adapter());
  final String primaryURI="http://localhost:" + connector.getLocalPort() + servletPath+ primaryResource;
  HttpFields primaryFields=new HttpFields();
  MetaData.Request primaryRequest=newRequest("GET",primaryResource,primaryFields);
  final CountDownLatch warmupLatch=new CountDownLatch(1);
  session.newStream(new HeadersFrame(0,primaryRequest,null,true),new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream()) {
        HttpFields secondaryFields=new HttpFields();
        secondaryFields.put(HttpHeader.REFERER,primaryURI);
        MetaData.Request secondaryRequest=newRequest("GET",secondaryResource,secondaryFields);
        session.newStream(new HeadersFrame(0,secondaryRequest,null,true),new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
          @Override public void onData(          Stream stream,          DataFrame frame,          Callback callback){
            warmupLatch.countDown();
          }
        }
);
      }
    }
  }
);
  Assert.assertTrue(warmupLatch.await(5,TimeUnit.SECONDS));
  primaryRequest=newRequest("GET",primaryResource,primaryFields);
  final CountDownLatch primaryResponseLatch=new CountDownLatch(1);
  final CountDownLatch pushLatch=new CountDownLatch(1);
  session.newStream(new HeadersFrame(0,primaryRequest,null,true),new Promise.Adapter<Stream>(),new Stream.Listener.Adapter(){
    @Override public Stream.Listener onPush(    Stream stream,    PushPromiseFrame frame){
      return new Adapter(){
        @Override public void onData(        Stream stream,        DataFrame frame,        Callback callback){
          callback.succeeded();
          if (frame.isEndStream())           pushLatch.countDown();
        }
      }
;
    }
    @Override public void onData(    Stream stream,    DataFrame frame,    Callback callback){
      callback.succeeded();
      if (frame.isEndStream())       primaryResponseLatch.countDown();
    }
  }
);
  Assert.assertTrue(pushLatch.await(5,TimeUnit.SECONDS));
  Assert.assertTrue(primaryResponseLatch.await(5,TimeUnit.SECONDS));
}

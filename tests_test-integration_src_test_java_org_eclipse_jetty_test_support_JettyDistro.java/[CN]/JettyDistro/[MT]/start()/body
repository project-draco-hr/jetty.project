{
  List<String> commands=new ArrayList<String>();
  commands.add(getJavaBin());
  commands.add("-Djetty.home=" + jettyHomeDir.getAbsolutePath());
  commands.add("-jar");
  commands.add("start.jar");
  commands.add("jetty.http.port=0");
  if (_debug) {
    commands.add("-D.DEBUG=true");
  }
  commands.add("--dry-run");
  ProcessBuilder pbCmd=new ProcessBuilder(commands);
  pbCmd.directory(jettyHomeDir);
  String cmdLine=null;
  Process pidCmd=pbCmd.start();
  try {
    cmdLine=readOutputLine(pidCmd);
  }
  finally {
    pidCmd.destroy();
  }
  if (cmdLine == null || !cmdLine.contains("XmlConfiguration")) {
    Assert.fail("Unable to get Jetty command line");
  }
  List<String> execCommands=splitAndUnescapeCommandLine(cmdLine);
  System.out.printf("Executing: %s%n",cmdLine);
  System.out.printf("Working Dir: %s%n",jettyHomeDir.getAbsolutePath());
  pbCmd=new ProcessBuilder(execCommands);
  pid=pbCmd.start();
  ConsoleParser parser=new ConsoleParser();
  List<String[]> jmxList=parser.newPattern("JMX Remote URL: (.*)",0);
  List<String[]> connList=parser.newPattern("Started [A-Za-z]*Connector@([0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*):([0-9]*)",1);
  startPump("STDOUT",parser,this.pid.getInputStream());
  startPump("STDERR",parser,this.pid.getErrorStream());
  try {
    parser.waitForDone(this.startTime,this.timeUnit);
    if (!jmxList.isEmpty()) {
      this.jmxUrl=jmxList.get(0)[0];
      System.out.printf("## Found JMX connector at %s%n",this.jmxUrl);
    }
    if (!connList.isEmpty()) {
      String[] params=connList.get(0);
      if (params.length == 2) {
        this.baseUri=URI.create("http://localhost:" + params[1] + "/");
      }
      System.out.printf("## Found Jetty connector at host: %s port: %s%n",(Object[])params);
    }
  }
 catch (  InterruptedException e) {
    pid.destroy();
    Assert.fail("Unable to get required information within time limit");
  }
}

{
  String response="";
  _connection=connection;
  _te=te;
  if (_contentType != null)   _fields.put("Content-Type",_contentType);
  if (_contentLength >= 0)   _fields.put("Content-Length","" + _contentLength);
  if (_connection != null)   _fields.put("Connection",_connection);
  if (_te != null)   _fields.put("Transfer-Encoding",_te);
  if (_other != null)   _fields.put("Other",_other);
  ByteBuffer source=_body == null ? null : BufferUtil.toBuffer(_body);
  ByteBuffer[] chunks=new ByteBuffer[nchunks];
  ByteBuffer content=null;
  int c=0;
  if (source != null) {
    for (int i=0; i < nchunks; i++) {
      chunks[i]=source.duplicate();
      chunks[i].position(i * (source.capacity() / nchunks));
      if (i > 0)       chunks[i - 1].limit(chunks[i].position());
    }
    content=chunks[c++];
  }
  ByteBuffer header=null;
  ByteBuffer chunk=null;
  ByteBuffer buffer=null;
  HttpGenerator.Info info=null;
  while (!gen.isComplete()) {
    if (source != null && content != null && content.remaining() == 0 && c < nchunks) {
      content=chunks[c++];
    }
    Action action=BufferUtil.hasContent(content) ? null : Action.COMPLETE;
    HttpGenerator.Result result=gen.generate(info,header,chunk,buffer,content,action);
switch (result) {
case NEED_COMMIT:
      info=new HttpGenerator.ResponseInfo(HttpVersion.fromVersion(version),_fields,_contentLength,_code,reason,_head);
    header=BufferUtil.allocate(2048);
  break;
case NEED_BUFFER:
buffer=BufferUtil.allocate(8192);
break;
case NEED_CHUNK:
header=null;
chunk=BufferUtil.allocate(HttpGenerator.CHUNK_SIZE);
break;
case FLUSH:
if (BufferUtil.hasContent(header)) {
response+=BufferUtil.toString(header);
header.position(header.limit());
}
 else if (BufferUtil.hasContent(chunk)) {
response+=BufferUtil.toString(chunk);
chunk.position(chunk.limit());
}
if (BufferUtil.hasContent(buffer)) {
response+=BufferUtil.toString(buffer);
buffer.position(buffer.limit());
}
break;
case FLUSH_CONTENT:
if (BufferUtil.hasContent(header)) {
response+=BufferUtil.toString(header);
header.position(header.limit());
}
 else if (BufferUtil.hasContent(chunk)) {
response+=BufferUtil.toString(chunk);
chunk.position(chunk.limit());
}
if (BufferUtil.hasContent(content)) {
response+=BufferUtil.toString(content);
content.position(content.limit());
}
break;
case OK:
case SHUTDOWN_OUT:
}
}
return response;
}

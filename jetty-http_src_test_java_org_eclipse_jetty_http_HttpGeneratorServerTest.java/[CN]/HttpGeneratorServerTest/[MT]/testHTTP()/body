{
  Handler handler=new Handler();
  HttpParser parser=null;
  for (int v=9; v <= 11; v++) {
    for (int r=0; r < tr.length; r++) {
      HttpGenerator gen=new HttpGenerator();
      for (int chunks=1; chunks <= 6; chunks++) {
        for (int c=0; c < (v == 11 ? connect.length : (connect.length - 1)); c++) {
          String t="v=" + v + ",chunks="+ chunks+ ",connect="+ connect[c]+ ",tr="+ r+ "="+ tr[r];
          gen.reset();
          tr[r].getHttpFields().clear();
          String response=tr[r].build(v,gen,"OK\r\nTest",connect[c],null,chunks);
          if (v == 9) {
            assertFalse(t,gen.isPersistent());
            if (tr[r]._body != null)             assertEquals(t,tr[r]._body,response);
            continue;
          }
          parser=new HttpParser(handler);
          parser.setHeadResponse(tr[r]._head);
          parser.parseNext(BufferUtil.toBuffer(response));
          if (tr[r]._body != null)           assertEquals(t,tr[r]._body,this._content);
          if (v == 10)           assertTrue(t,gen.isPersistent() || tr[r]._contentLength >= 0 || c == 2 || c == 0);
 else           assertTrue(t,gen.isPersistent() || c == 2 || c == 3);
          if (v > 9)           assertEquals("OK??Test",_reason);
          if (_content == null)           assertTrue(t,tr[r]._body == null);
 else           assertThat(t,tr[r]._contentLength,either(equalTo(_content.length())).or(equalTo(-1)));
        }
      }
    }
  }
}

{
  Thread currentThread=Thread.currentThread();
  ClassLoader currentLoader=currentThread.getContextClassLoader();
  ClassLoader childLoader1=new URLClassLoader(new URL[0],currentLoader);
  ClassLoader childLoader2=new URLClassLoader(new URL[0],currentLoader);
  try {
    currentThread.setContextClassLoader(childLoader1);
    InitialContext initCtxA=new InitialContext();
    initCtxA.bind("blah","123");
    assertEquals("123",initCtxA.lookup("blah"));
    initCtxA.destroySubcontext("blah");
    try {
      initCtxA.lookup("blah");
      fail("context blah was not destroyed");
    }
 catch (    NameNotFoundException e) {
    }
    InitialContext initCtx=new InitialContext();
    Context sub0=(Context)initCtx.lookup("java:");
    if (LOG.isDebugEnabled())     LOG.debug("------ Looked up java: --------------");
    Name n=sub0.getNameParser("").parse("/red/green/");
    if (LOG.isDebugEnabled())     LOG.debug("get(0)=" + n.get(0));
    if (LOG.isDebugEnabled())     LOG.debug("getPrefix(1)=" + n.getPrefix(1));
    n=n.getSuffix(1);
    if (LOG.isDebugEnabled())     LOG.debug("getSuffix(1)=" + n);
    if (LOG.isDebugEnabled())     LOG.debug("get(0)=" + n.get(0));
    if (LOG.isDebugEnabled())     LOG.debug("getPrefix(1)=" + n.getPrefix(1));
    n=n.getSuffix(1);
    if (LOG.isDebugEnabled())     LOG.debug("getSuffix(1)=" + n);
    if (LOG.isDebugEnabled())     LOG.debug("get(0)=" + n.get(0));
    if (LOG.isDebugEnabled())     LOG.debug("getPrefix(1)=" + n.getPrefix(1));
    n=n.getSuffix(1);
    if (LOG.isDebugEnabled())     LOG.debug("getSuffix(1)=" + n);
    n=sub0.getNameParser("").parse("pink/purple/");
    if (LOG.isDebugEnabled())     LOG.debug("get(0)=" + n.get(0));
    if (LOG.isDebugEnabled())     LOG.debug("getPrefix(1)=" + n.getPrefix(1));
    n=n.getSuffix(1);
    if (LOG.isDebugEnabled())     LOG.debug("getSuffix(1)=" + n);
    if (LOG.isDebugEnabled())     LOG.debug("get(0)=" + n.get(0));
    if (LOG.isDebugEnabled())     LOG.debug("getPrefix(1)=" + n.getPrefix(1));
    NamingContext ncontext=(NamingContext)sub0;
    Name nn=ncontext.toCanonicalName(ncontext.getNameParser("").parse("/yellow/blue/"));
    LOG.debug(nn.toString());
    assertEquals(2,nn.size());
    nn=ncontext.toCanonicalName(ncontext.getNameParser("").parse("/yellow/blue"));
    LOG.debug(nn.toString());
    assertEquals(2,nn.size());
    nn=ncontext.toCanonicalName(ncontext.getNameParser("").parse("/"));
    if (LOG.isDebugEnabled())     LOG.debug("/ parses as: " + nn + " with size="+ nn.size());
    LOG.debug(nn.toString());
    assertEquals(1,nn.size());
    nn=ncontext.toCanonicalName(ncontext.getNameParser("").parse(""));
    LOG.debug(nn.toString());
    assertEquals(0,nn.size());
    Context fee=ncontext.createSubcontext("fee");
    fee.bind("fi","88");
    assertEquals("88",initCtxA.lookup("java:/fee/fi"));
    assertEquals("88",initCtxA.lookup("java:/fee/fi/"));
    assertTrue(initCtxA.lookup("java:/fee/") instanceof javax.naming.Context);
    try {
      Context sub1=sub0.createSubcontext("comp");
      fail("Comp should already be bound");
    }
 catch (    NameAlreadyBoundException e) {
    }
    Context sub1=(Context)initCtx.lookup("java:comp");
    Context sub2=sub1.createSubcontext("env");
    initCtx.bind("java:comp/env/rubbish","abc");
    assertEquals("abc",initCtx.lookup("java:comp/env/rubbish"));
    LinkRef link=new LinkRef("java:comp/env/rubbish");
    initCtx.bind("java:comp/env/poubelle",link);
    assertEquals("abc",initCtx.lookup("java:comp/env/poubelle"));
    StringRefAddr addr=new StringRefAddr("blah","myReferenceable");
    Reference ref=new Reference(java.lang.String.class.getName(),addr,MyObjectFactory.class.getName(),null);
    initCtx.bind("java:comp/env/quatsch",ref);
    assertEquals(MyObjectFactory.myString,initCtx.lookup("java:comp/env/quatsch"));
    Context sub3=initCtx.createSubcontext("java:zero");
    initCtx.bind("java:zero/one","ONE");
    assertEquals("ONE",initCtx.lookup("java:zero/one"));
    currentThread.setContextClassLoader(childLoader2);
    Context otherSub1=(Context)initCtx.lookup("java:comp");
    assertTrue(!(sub1 == otherSub1));
    try {
      initCtx.lookup("java:comp/env/rubbish");
      fail("env should not exist for this classloader");
    }
 catch (    NameNotFoundException e) {
    }
    currentThread.setContextClassLoader(childLoader1);
    initCtx.rebind("java:comp/env/rubbish","xyz");
    assertEquals("xyz",initCtx.lookup("java:comp/env/rubbish"));
    initCtx.rebind("java:comp/env/mullheim","hij");
    assertEquals("hij",initCtx.lookup("java:comp/env/mullheim"));
    assertEquals("xyz",initCtx.lookup("java:comp/env/poubelle"));
    assertEquals("xyz",initCtx.lookup("java:/comp/env/poubelle/"));
    NamingEnumeration nenum=initCtx.list("java:comp/env");
    HashMap results=new HashMap();
    while (nenum.hasMore()) {
      NameClassPair ncp=(NameClassPair)nenum.next();
      results.put(ncp.getName(),ncp.getClassName());
    }
    assertEquals(4,results.size());
    assertEquals("java.lang.String",results.get("rubbish"));
    assertEquals("javax.naming.LinkRef",results.get("poubelle"));
    assertEquals("java.lang.String",results.get("mullheim"));
    assertEquals("javax.naming.Reference",results.get("quatsch"));
    NamingEnumeration benum=initCtx.list("java:comp/env");
    assertEquals(4,results.size());
    assertEquals("comp/env",sub2.getNameInNamespace());
    Context closeCtx=(Context)initCtx.lookup("java:comp/env");
    closeCtx.close();
    InitialContext closeInit=new InitialContext();
    closeInit.close();
    Context ectx=(Context)initCtx.lookup("java:comp");
    ectx.bind("crud","xxx");
    ectx.addToEnvironment("org.eclipse.jndi.immutable","TRUE");
    assertEquals("xxx",initCtx.lookup("java:comp/crud"));
    try {
      ectx.bind("crud2","xxx2");
    }
 catch (    NamingException ne) {
    }
    initCtx.close();
  }
  finally {
    InitialContext ic=new InitialContext();
    Context java=(Context)ic.lookup("java:");
    java.destroySubcontext("zero");
    java.destroySubcontext("fee");
    currentThread.setContextClassLoader(childLoader1);
    Context comp=(Context)ic.lookup("java:comp");
    comp.destroySubcontext("env");
    comp.unbind("crud");
    comp.unbind("crud2");
  }
}

{
  if (isIncluding())   return;
  if (isCommitted()) {
    if (LOG.isDebugEnabled())     LOG.debug("Aborting on sendError on committed response {} {}",code,message);
    code=-1;
  }
switch (code) {
case -1:
    _channel.abort(new IOException());
  return;
case 102:
sendProcessing();
return;
default :
}
if (isCommitted()) LOG.warn("Committed before " + code + " "+ message);
resetBuffer();
_characterEncoding=null;
setHeader(HttpHeader.EXPIRES,null);
setHeader(HttpHeader.LAST_MODIFIED,null);
setHeader(HttpHeader.CACHE_CONTROL,null);
setHeader(HttpHeader.CONTENT_TYPE,null);
setHeader(HttpHeader.CONTENT_LENGTH,null);
_outputType=OutputType.NONE;
setStatus(code);
_reason=message;
Request request=_channel.getRequest();
Throwable cause=(Throwable)request.getAttribute(Dispatcher.ERROR_EXCEPTION);
if (message == null) message=cause == null ? HttpStatus.getMessage(code) : cause.toString();
if (code != SC_NO_CONTENT && code != SC_NOT_MODIFIED && code != SC_PARTIAL_CONTENT && code >= SC_OK) {
ErrorHandler error_handler=ErrorHandler.getErrorHandler(_channel.getServer(),request.getContext() == null ? null : request.getContext().getContextHandler());
if (error_handler != null) {
request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,new Integer(code));
request.setAttribute(RequestDispatcher.ERROR_MESSAGE,message);
request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,request.getRequestURI());
request.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,request.getServletName());
error_handler.handle(null,_channel.getRequest(),_channel.getRequest(),this);
}
 else {
setHeader(HttpHeader.CACHE_CONTROL,"must-revalidate,no-cache,no-store");
setContentType(MimeTypes.Type.TEXT_HTML_8859_1.toString());
try (ByteArrayISO8859Writer writer=new ByteArrayISO8859Writer(2048)){
if (message != null) {
  message=StringUtil.replace(message,"&","&amp;");
  message=StringUtil.replace(message,"<","&lt;");
  message=StringUtil.replace(message,">","&gt;");
}
String uri=request.getRequestURI();
if (uri != null) {
  uri=StringUtil.replace(uri,"&","&amp;");
  uri=StringUtil.replace(uri,"<","&lt;");
  uri=StringUtil.replace(uri,">","&gt;");
}
writer.write("<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=ISO-8859-1\"/>\n");
writer.write("<title>Error ");
writer.write(Integer.toString(code));
writer.write(' ');
if (message == null) writer.write(message);
writer.write("</title>\n</head>\n<body>\n<h2>HTTP ERROR: ");
writer.write(Integer.toString(code));
writer.write("</h2>\n<p>Problem accessing ");
writer.write(uri);
writer.write(". Reason:\n<pre>    ");
writer.write(message);
writer.write("</pre>");
writer.write("</p>\n<hr />");
getHttpChannel().getHttpConfiguration().writePoweredBy(writer,null,"<hr/>");
writer.write("\n</body>\n</html>\n");
writer.flush();
setContentLength(writer.size());
try (ServletOutputStream outputStream=getOutputStream()){
  writer.writeTo(outputStream);
  writer.destroy();
}
 }
 }
}
 else if (code != SC_PARTIAL_CONTENT) {
_channel.getRequest().getHttpFields().remove(HttpHeader.CONTENT_TYPE);
_channel.getRequest().getHttpFields().remove(HttpHeader.CONTENT_LENGTH);
_characterEncoding=null;
_mimeType=null;
}
closeOutput();
}

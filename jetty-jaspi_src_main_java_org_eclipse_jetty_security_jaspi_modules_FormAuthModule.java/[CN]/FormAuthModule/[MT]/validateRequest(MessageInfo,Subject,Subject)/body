{
  HttpServletRequest request=(HttpServletRequest)messageInfo.getRequestMessage();
  HttpServletResponse response=(HttpServletResponse)messageInfo.getResponseMessage();
  String uri=request.getRequestURI();
  if (uri == null)   uri=URIUtil.SLASH;
  boolean mandatory=isMandatory(messageInfo);
  mandatory|=isJSecurityCheck(uri);
  HttpSession session=request.getSession(mandatory);
  if (!mandatory || isLoginOrErrorPage(URIUtil.addPaths(request.getServletPath(),request.getPathInfo())))   return AuthStatus.SUCCESS;
  try {
    if (isJSecurityCheck(uri)) {
      final String username=request.getParameter(__J_USERNAME);
      final String password=request.getParameter(__J_PASSWORD);
      boolean success=tryLogin(messageInfo,clientSubject,response,session,username,new Password(password));
      if (success) {
        String nuri=null;
synchronized (session) {
          nuri=(String)session.getAttribute(__J_URI);
        }
        if (nuri == null || nuri.length() == 0) {
          nuri=request.getContextPath();
          if (nuri.length() == 0)           nuri=URIUtil.SLASH;
        }
        response.setContentLength(0);
        response.sendRedirect(response.encodeRedirectURL(nuri));
        return AuthStatus.SEND_CONTINUE;
      }
      if (LOG.isDebugEnabled())       LOG.debug("Form authentication FAILED for " + StringUtil.printable(username));
      if (_formErrorPage == null) {
        if (response != null)         response.sendError(HttpServletResponse.SC_FORBIDDEN);
      }
 else {
        response.setContentLength(0);
        response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getContextPath(),_formErrorPage)));
      }
      return AuthStatus.SEND_FAILURE;
    }
    SessionAuthentication sessionAuth=(SessionAuthentication)session.getAttribute(SessionAuthentication.__J_AUTHENTICATED);
    if (sessionAuth != null) {
      if (sessionAuth.getUserIdentity().getSubject() == null)       return AuthStatus.SEND_FAILURE;
      Set<Object> credentials=sessionAuth.getUserIdentity().getSubject().getPrivateCredentials();
      if (credentials == null || credentials.isEmpty())       return AuthStatus.SEND_FAILURE;
      clientSubject.getPrivateCredentials().addAll(credentials);
      clientSubject.getPrivateCredentials().add(sessionAuth.getUserIdentity());
      return AuthStatus.SUCCESS;
    }
    if (DeferredAuthentication.isDeferred(response))     return AuthStatus.SUCCESS;
    StringBuffer buf=request.getRequestURL();
    if (request.getQueryString() != null)     buf.append("?").append(request.getQueryString());
synchronized (session) {
      session.setAttribute(__J_URI,buf.toString());
    }
    response.setContentLength(0);
    response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getContextPath(),_formLoginPage)));
    return AuthStatus.SEND_CONTINUE;
  }
 catch (  IOException e) {
    throw new AuthException(e.getMessage());
  }
catch (  UnsupportedCallbackException e) {
    throw new AuthException(e.getMessage());
  }
}

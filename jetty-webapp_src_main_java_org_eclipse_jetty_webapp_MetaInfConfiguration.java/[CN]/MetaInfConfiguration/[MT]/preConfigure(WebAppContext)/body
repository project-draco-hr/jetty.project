{
  Resource web_inf=context.getWebInf();
  Resource web_inf_lib=web_inf.addPath("/lib");
  List<URL> urls=new ArrayList<URL>();
  if (web_inf_lib.exists() && web_inf_lib.isDirectory()) {
    String[] files=web_inf_lib.list();
    for (int f=0; files != null && f < files.length; f++) {
      try {
        Resource file=web_inf_lib.addPath(files[f]);
        String fnlc=file.getName().toLowerCase();
        int dot=fnlc.lastIndexOf('.');
        String extension=(dot < 0 ? null : fnlc.substring(dot));
        if (extension != null && (extension.equals(".jar") || extension.equals(".zip"))) {
          urls.add(file.getURL());
        }
      }
 catch (      Exception ex) {
        Log.warn(Log.EXCEPTION,ex);
      }
    }
  }
  final List<URL> tldJars=new ArrayList<URL>();
  final List<URL> webFragJars=new ArrayList<URL>();
  final List<URL> metaResourceJars=new ArrayList<URL>();
  JarScanner fragScanner=new JarScanner(){
    public void processEntry(    URL jarUrl,    JarEntry entry){
      try {
        String name=entry.getName().toLowerCase();
        if (name.startsWith("meta-inf")) {
          if (name.equals("meta-inf/web-fragment.xml")) {
            addJar(jarUrl,webFragJars);
          }
 else           if (name.endsWith(".tld")) {
            addJar(jarUrl,tldJars);
          }
 else           if (name.equals("meta-inf/resources")) {
            addJar(jarUrl,metaResourceJars);
          }
        }
      }
 catch (      Exception e) {
        Log.warn("Problem processing jar entry " + entry,e);
      }
    }
  }
;
  fragScanner.scan(null,urls.toArray(new URL[urls.size()]),true);
  context.setAttribute(__tldJars,tldJars);
  context.setAttribute(__webFragJars,webFragJars);
  context.setAttribute(__metaResourceJars,metaResourceJars);
}

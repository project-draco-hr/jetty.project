{
  if (_parts != null)   return;
  long total=0;
  _parts=new MultiMap<String>();
  if (_contentType == null || !_contentType.startsWith("multipart/form-data"))   return;
  if (_config.getLocation() == null)   _tmpDir=_contextTmpDir;
 else   if ("".equals(_config.getLocation()))   _tmpDir=_contextTmpDir;
 else {
    File f=new File(_config.getLocation());
    if (f.isAbsolute())     _tmpDir=f;
 else     _tmpDir=new File(_contextTmpDir,_config.getLocation());
  }
  if (!_tmpDir.exists())   _tmpDir.mkdirs();
  String contentTypeBoundary="";
  if (_contentType.indexOf("boundary=") >= 0)   contentTypeBoundary=QuotedStringTokenizer.unquote(value(_contentType.substring(_contentType.indexOf("boundary=")),true).trim());
  String boundary="--" + contentTypeBoundary;
  byte[] byteBoundary=(boundary + "--").getBytes(StringUtil.__ISO_8859_1);
  String line=((ReadLineInputStream)_in).readLine();
  if (line == null || line.length() == 0)   throw new IOException("Missing content for multipart request");
  boolean badFormatLogged=false;
  line=line.trim();
  while (line != null && !line.equals(boundary)) {
    if (!badFormatLogged) {
      LOG.warn("Badly formatted multipart request");
      badFormatLogged=true;
    }
    line=((ReadLineInputStream)_in).readLine();
    line=(line == null ? line : line.trim());
  }
  if (line == null || line.length() == 0)   throw new IOException("Missing initial multi part boundary");
  boolean lastPart=false;
  String contentDisposition=null;
  String contentType=null;
  String contentTransferEncoding=null;
  outer:   while (!lastPart) {
    MultiMap<String> headers=new MultiMap<String>();
    while (true) {
      line=((ReadLineInputStream)_in).readLine();
      if (line == null)       break outer;
      if ("".equals(line))       break;
      total+=line.length();
      if (_config.getMaxRequestSize() > 0 && total > _config.getMaxRequestSize())       throw new IllegalStateException("Request exceeds maxRequestSize (" + _config.getMaxRequestSize() + ")");
      int c=line.indexOf(':',0);
      if (c > 0) {
        String key=line.substring(0,c).trim().toLowerCase(Locale.ENGLISH);
        String value=line.substring(c + 1,line.length()).trim();
        headers.put(key,value);
        if (key.equalsIgnoreCase("content-disposition"))         contentDisposition=value;
        if (key.equalsIgnoreCase("content-type"))         contentType=value;
        if (key.equals("content-transfer-encoding"))         contentTransferEncoding=value;
      }
    }
    boolean form_data=false;
    if (contentDisposition == null) {
      throw new IOException("Missing content-disposition");
    }
    QuotedStringTokenizer tok=new QuotedStringTokenizer(contentDisposition,";",false,true);
    String name=null;
    String filename=null;
    while (tok.hasMoreTokens()) {
      String t=tok.nextToken().trim();
      String tl=t.toLowerCase(Locale.ENGLISH);
      if (t.startsWith("form-data"))       form_data=true;
 else       if (tl.startsWith("name="))       name=value(t,true);
 else       if (tl.startsWith("filename="))       filename=filenameValue(t);
    }
    if (!form_data) {
      continue;
    }
    if (name == null) {
      continue;
    }
    if ("base64".equalsIgnoreCase(contentTransferEncoding)) {
      _in=new Base64InputStream(_in);
    }
 else     if ("quoted-printable".equalsIgnoreCase(contentTransferEncoding)) {
      _in=new FilterInputStream(_in){
        @Override public int read() throws IOException {
          int c=in.read();
          if (c >= 0 && c == '=') {
            int hi=in.read();
            int lo=in.read();
            if (hi < 0 || lo < 0) {
              throw new IOException("Unexpected end to quoted-printable byte");
            }
            char[] chars=new char[]{(char)hi,(char)lo};
            c=Integer.parseInt(new String(chars),16);
          }
          return c;
        }
      }
;
    }
    MultiPart part=new MultiPart(name,filename);
    part.setHeaders(headers);
    part.setContentType(contentType);
    _parts.add(name,part);
    part.open();
    try {
      int state=-2;
      int c;
      boolean cr=false;
      boolean lf=false;
      while (true) {
        int b=0;
        while ((c=(state != -2) ? state : _in.read()) != -1) {
          total++;
          if (_config.getMaxRequestSize() > 0 && total > _config.getMaxRequestSize())           throw new IllegalStateException("Request exceeds maxRequestSize (" + _config.getMaxRequestSize() + ")");
          state=-2;
          if (c == 13 || c == 10) {
            if (c == 13) {
              _in.mark(1);
              int tmp=_in.read();
              if (tmp != 10)               _in.reset();
 else               state=tmp;
            }
            break;
          }
          if (b >= 0 && b < byteBoundary.length && c == byteBoundary[b])           b++;
 else {
            if (cr)             part.write(13);
            if (lf)             part.write(10);
            cr=lf=false;
            if (b > 0)             part.write(byteBoundary,0,b);
            b=-1;
            part.write(c);
          }
        }
        if ((b > 0 && b < byteBoundary.length - 2) || (b == byteBoundary.length - 1)) {
          if (cr)           part.write(13);
          if (lf)           part.write(10);
          cr=lf=false;
          part.write(byteBoundary,0,b);
          b=-1;
        }
        if (b > 0 || c == -1) {
          if (b == byteBoundary.length)           lastPart=true;
          if (state == 10)           state=-2;
          break;
        }
        if (cr)         part.write(13);
        if (lf)         part.write(10);
        cr=(c == 13);
        lf=(c == 10 || state == 10);
        if (state == 10)         state=-2;
      }
    }
  finally {
      part.close();
    }
  }
  if (!lastPart)   throw new IOException("Incomplete parts");
}

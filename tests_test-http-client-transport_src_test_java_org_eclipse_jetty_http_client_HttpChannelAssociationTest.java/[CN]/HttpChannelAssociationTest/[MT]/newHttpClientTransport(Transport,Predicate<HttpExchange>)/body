{
switch (transport) {
case HTTP:
case HTTPS:
{
      return new HttpClientTransportOverHTTP(1){
        @Override protected HttpConnectionOverHTTP newHttpConnection(        EndPoint endPoint,        HttpDestination destination,        Promise<Connection> promise){
          return new HttpConnectionOverHTTP(endPoint,destination,promise){
            @Override protected HttpChannelOverHTTP newHttpChannel(){
              return new HttpChannelOverHTTP(this){
                @Override public boolean associate(                HttpExchange exchange){
                  return code.test(exchange) && super.associate(exchange);
                }
              }
;
            }
          }
;
        }
      }
;
    }
case H2C:
case H2:
{
    HTTP2Client http2Client=new HTTP2Client();
    http2Client.setSelectors(1);
    return new HttpClientTransportOverHTTP2(http2Client){
      @Override protected HttpConnectionOverHTTP2 newHttpConnection(      HttpDestination destination,      Session session){
        return new HttpConnectionOverHTTP2(destination,session){
          @Override protected HttpChannelOverHTTP2 newHttpChannel(){
            return new HttpChannelOverHTTP2(getHttpDestination(),this,getSession()){
              @Override public boolean associate(              HttpExchange exchange){
                return code.test(exchange) && super.associate(exchange);
              }
            }
;
          }
        }
;
      }
    }
;
  }
case FCGI:
{
  return new HttpClientTransportOverFCGI(1,false,""){
    @Override protected HttpConnectionOverFCGI newHttpConnection(    EndPoint endPoint,    HttpDestination destination,    Promise<Connection> promise){
      return new HttpConnectionOverFCGI(endPoint,destination,promise,isMultiplexed()){
        @Override protected HttpChannelOverFCGI newHttpChannel(        int id,        org.eclipse.jetty.client.api.Request request){
          return new HttpChannelOverFCGI(this,getFlusher(),id,request.getIdleTimeout()){
            @Override public boolean associate(            HttpExchange exchange){
              return code.test(exchange) && super.associate(exchange);
            }
          }
;
        }
      }
;
    }
  }
;
}
default :
{
throw new IllegalArgumentException();
}
}
}

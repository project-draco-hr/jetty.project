{
  string=versionStr;
  legacyMajor=0;
  major=-1;
  revision=-1;
  update=-1;
  suffix="";
  ParseState state=ParseState.LEGACY;
  int offset=0;
  int len=versionStr.length();
  int val=0;
  while (offset < len) {
    char c=versionStr.charAt(offset);
    if (c == '-')     shortString=versionStr.substring(0,offset);
    boolean isSeparator=!Character.isLetterOrDigit(c);
    if (isSeparator) {
      val=0;
    }
 else     if (Character.isDigit(c)) {
      val=(val * 10) + (c - '0');
    }
 else     if (Character.isLetter(c)) {
      suffix=versionStr.substring(offset);
      break;
    }
switch (state) {
case LEGACY:
      if (isSeparator)       state=ParseState.MAJOR;
 else       legacyMajor=val;
    break;
case MAJOR:
  if (isSeparator)   state=ParseState.REVISION;
 else   major=val;
break;
case REVISION:
if (isSeparator) state=ParseState.UPDATE;
 else revision=val;
break;
case UPDATE:
if (!isSeparator) {
update=val;
}
break;
}
offset++;
}
if (shortString == null) shortString=versionStr;
}

{
  Socket socket=new Socket("localhost",_connector.getLocalPort());
  OutputStream output=socket.getOutputStream();
  output.write(("GET /chat HTTP/1.1\r\n" + "Host: server.example.com\r\n" + "Upgrade: websocket\r\n"+ "Connection: Upgrade\r\n"+ "Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r\n"+ "Sec-WebSocket-Origin: http://example.com\r\n"+ "Sec-WebSocket-Protocol: echo\r\n"+ "Sec-WebSocket-Version: 7\r\n"+ "Sec-WebSocket-Extensions: x-deflate-frame;minLength=64\r\n"+ "Sec-WebSocket-Extensions: fragment;minFragments=2\r\n"+ "\r\n").getBytes("ISO-8859-1"));
  output.flush();
  socket.setSoTimeout(1000);
  InputStream input=socket.getInputStream();
  lookFor("HTTP/1.1 101 Switching Protocols\r\n",input);
  skipTo("Sec-WebSocket-Accept: ",input);
  lookFor("s3pPLMBiTxaQ9kYGzzhZRbK+xOo=",input);
  skipTo("Sec-WebSocket-Extensions: ",input);
  lookFor("x-deflate-frame;minLength=64",input);
  skipTo("Sec-WebSocket-Extensions: ",input);
  lookFor("fragment;",input);
  skipTo("\r\n\r\n",input);
  assertTrue(_serverWebSocket.awaitConnected(1000));
  assertNotNull(_serverWebSocket.connection);
  String text="0123456789ABCDEF ";
  text=text + text + text+ text;
  text=text + text + text+ text;
  text=text + text + text+ text+ 'X';
  byte[] data=text.getBytes("utf-8");
  Deflater deflater=new Deflater();
  deflater.setInput(data);
  deflater.finish();
  byte[] buf=new byte[data.length];
  buf[0]=(byte)((byte)0x7e);
  buf[1]=(byte)(data.length >> 8);
  buf[2]=(byte)(data.length & 0xff);
  int l=deflater.deflate(buf,3,buf.length - 3);
  assertTrue(deflater.finished());
  output.write(0xC1);
  output.write((byte)(0x80 | (0xff & (l + 3))));
  output.write(0x00);
  output.write(0x00);
  output.write(0x00);
  output.write(0x00);
  output.write(buf,0,l + 3);
  output.flush();
  assertEquals(0x40 + WebSocketConnectionD7_9.OP_TEXT,input.read());
  assertEquals(0x20 + 3,input.read());
  assertEquals(0x7e,input.read());
  assertEquals(0x02,input.read());
  assertEquals(0x20,input.read());
  byte[] raw=new byte[32];
  assertEquals(32,input.read(raw));
  Inflater inflater=new Inflater();
  inflater.setInput(raw);
  byte[] result=new byte[544];
  assertEquals(544,inflater.inflate(result));
  assertEquals(TypeUtil.toHexString(data,0,544),TypeUtil.toHexString(result));
  assertEquals((byte)0xC0,(byte)input.read());
  assertEquals(0x21 + 3,input.read());
  assertEquals(0x7e,input.read());
  assertEquals(0x02,input.read());
  assertEquals(0x21,input.read());
  assertEquals(32,input.read(raw));
  inflater.reset();
  inflater.setInput(raw);
  result=new byte[545];
  assertEquals(545,inflater.inflate(result));
  assertEquals(TypeUtil.toHexString(data,544,545),TypeUtil.toHexString(result));
}

{
  boolean persistent;
switch (_metadata.getVersion()) {
case HTTP_1_0:
{
      if (getHttpConfiguration().isPersistentConnectionsEnabled()) {
        if (_connection != null) {
          if (_connection.contains(HttpHeaderValue.KEEP_ALIVE.asString()))           persistent=true;
 else           persistent=_fields.contains(HttpHeader.CONNECTION,HttpHeaderValue.KEEP_ALIVE.asString());
        }
 else         persistent=false;
      }
 else       persistent=false;
      if (!persistent)       persistent=HttpMethod.CONNECT.is(_metadata.getMethod());
      if (persistent)       getResponse().getHttpFields().add(HttpHeader.CONNECTION,HttpHeaderValue.KEEP_ALIVE);
      break;
    }
case HTTP_1_1:
{
    if (_unknownExpectation) {
      badMessage(HttpStatus.EXPECTATION_FAILED_417,null);
      return false;
    }
    if (getHttpConfiguration().isPersistentConnectionsEnabled()) {
      if (_connection != null) {
        if (_connection.contains(HttpHeaderValue.CLOSE.asString()))         persistent=false;
 else         persistent=!_fields.contains(HttpHeader.CONNECTION,HttpHeaderValue.CLOSE.asString());
      }
 else       persistent=true;
    }
 else     persistent=false;
    if (!persistent)     persistent=HttpMethod.CONNECT.is(_metadata.getMethod());
    if (!persistent)     getResponse().getHttpFields().add(HttpHeader.CONNECTION,HttpHeaderValue.CLOSE);
    if (_upgrade != null && upgrade())     return true;
    break;
  }
case HTTP_2:
{
  _upgrade=PREAMBLE_UPGRADE_H2C;
  if (HttpMethod.PRI.is(_metadata.getMethod()) && "*".equals(_metadata.getURI().toString()) && _fields.size() == 0 && upgrade())   return true;
  badMessage(HttpStatus.UPGRADE_REQUIRED_426,null);
  _httpConnection.getParser().close();
  return false;
}
default :
{
throw new IllegalStateException();
}
}
if (!persistent) _httpConnection.getGenerator().setPersistent(false);
onRequest(_metadata);
_delayedForContent=(getHttpConfiguration().isDelayDispatchUntilContent() && _httpConnection.getParser().getContentLength() > 0 && !isExpecting100Continue() && !isCommitted() && _httpConnection.isRequestBufferEmpty());
return !_delayedForContent;
}

{
  Set<String> ids=new TreeSet<String>();
  Pattern appenderIdRegex=Pattern.compile("appender\\.([^\\.]*).class");
  Matcher match;
  @SuppressWarnings("unchecked") Enumeration<String> enNames=(Enumeration<String>)props.propertyNames();
  while (enNames.hasMoreElements()) {
    String name=enNames.nextElement();
    match=appenderIdRegex.matcher(name);
    if (match.matches()) {
      ids.add(match.group(1));
    }
  }
  Map<String,Appender> appenders=new HashMap<String,Appender>();
  if (ids.isEmpty()) {
    return appenders;
  }
  for (  String id : ids) {
    String clazzName=props.getProperty("appender." + id + ".class");
    if (clazzName == null) {
      continue;
    }
    try {
      Class<?> clazzAppender=Class.forName(clazzName);
      Appender appender=(Appender)clazzAppender.newInstance();
      configureAppender(props,id,appender);
      appender.open();
      appenders.put(id,appender);
    }
 catch (    ClassNotFoundException e) {
      System.err.println("Unable to find class: " + clazzName);
      e.printStackTrace(System.err);
    }
catch (    InstantiationException e) {
      System.err.println("Unable to Instantiate: " + clazzName);
      e.printStackTrace(System.err);
    }
catch (    IllegalAccessException e) {
      System.err.println("Unable to Access: " + clazzName);
      e.printStackTrace(System.err);
    }
catch (    IOException e) {
      System.err.println("Unable to open Appender: " + clazzName);
      e.printStackTrace(System.err);
    }
  }
  return appenders;
}

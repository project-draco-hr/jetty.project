{
  if (_stress) {
    String contextPath="";
    String servletMapping="/server";
    AbstractTestServer server1=createServer(0);
    server1.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
    server1.start();
    int port1=server1.getPort();
    try {
      AbstractTestServer server2=createServer(0);
      server2.addContext(contextPath).addServlet(TestServlet.class,servletMapping);
      server2.start();
      int port2=server2.getPort();
      try {
        HttpClient client=new HttpClient();
        client.start();
        try {
          String[] urls=new String[2];
          urls[0]="http://localhost:" + port1 + contextPath+ servletMapping;
          urls[1]="http://localhost:" + port2 + contextPath+ servletMapping;
          Future<ContentResponse> future=client.GET(urls[0] + "?action=init");
          ContentResponse response1=future.get();
          assertEquals(HttpServletResponse.SC_OK,response1.getStatus());
          String sessionCookie=response1.getHeaders().getStringField("Set-Cookie");
          assertTrue(sessionCookie != null);
          sessionCookie=sessionCookie.replaceFirst("(\\W)(P|p)ath=","$1\\$Path=");
          ExecutorService executor=Executors.newCachedThreadPool();
          int clientsCount=50;
          CyclicBarrier barrier=new CyclicBarrier(clientsCount + 1);
          int requestsCount=100;
          Worker[] workers=new Worker[clientsCount];
          for (int i=0; i < clientsCount; ++i) {
            workers[i]=new Worker(barrier,requestsCount,sessionCookie,urls);
            workers[i].start();
            executor.execute(workers[i]);
          }
          barrier.await();
          long start=System.nanoTime();
          barrier.await();
          long end=System.nanoTime();
          long elapsed=TimeUnit.NANOSECONDS.toMillis(end - start);
          System.out.println("elapsed ms: " + elapsed);
          for (          Worker worker : workers)           worker.stop();
          executor.shutdownNow();
          Request request=client.newRequest(urls[0] + "?action=result");
          request.header("Cookie",sessionCookie);
          future=request.send();
          ContentResponse response2=future.get();
          assertEquals(HttpServletResponse.SC_OK,response2.getStatus());
          String response=response2.getContentAsString();
          System.out.println("get = " + response);
          assertEquals(response.trim(),String.valueOf(clientsCount * requestsCount));
        }
  finally {
          client.stop();
        }
      }
  finally {
        server2.stop();
      }
    }
  finally {
      server1.stop();
    }
  }
}

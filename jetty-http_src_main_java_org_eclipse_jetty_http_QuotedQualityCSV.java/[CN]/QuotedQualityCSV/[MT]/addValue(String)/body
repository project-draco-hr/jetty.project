{
  StringBuffer buffer=new StringBuffer();
  int l=value.length();
  State state=State.VALUE;
  boolean quoted=false;
  boolean sloshed=false;
  int nws_length=0;
  int last_length=0;
  Double q=ONE;
  for (int i=0; i <= l; i++) {
    char c=i == l ? 0 : value.charAt(i);
    if (quoted && c != 0) {
      if (sloshed)       sloshed=false;
 else {
switch (c) {
case '\\':
          sloshed=true;
        break;
case '"':
      quoted=false;
    if (state == State.Q_VALUE)     continue;
  break;
}
}
buffer.append(c);
nws_length=buffer.length();
continue;
}
switch (c) {
case ' ':
case '\t':
if (buffer.length() > last_length) buffer.append(c);
continue;
case '"':
quoted=true;
if (state == State.Q_VALUE) continue;
buffer.append(c);
nws_length=buffer.length();
continue;
case ';':
if (state == State.Q_VALUE) {
try {
q=new Double(buffer.substring(last_length));
}
 catch (Exception e) {
q=ZERO;
}
nws_length=last_length;
}
buffer.setLength(nws_length);
buffer.append(c);
last_length=++nws_length;
state=State.PARAM_NAME;
continue;
case ',':
case 0:
if (state == State.Q_VALUE) {
try {
q=new Double(buffer.substring(last_length));
}
 catch (Exception e) {
q=ZERO;
}
nws_length=last_length;
}
buffer.setLength(nws_length);
if (q > 0.0 && nws_length > 0) {
_values.add(buffer.toString());
_quality.add(q);
_sorted=false;
}
buffer.setLength(0);
last_length=0;
nws_length=0;
q=ONE;
state=State.VALUE;
continue;
default :
{
switch (state) {
case VALUE:
{
buffer.append(c);
nws_length=buffer.length();
continue;
}
case PARAM_NAME:
{
if (c == '=') {
buffer.setLength(nws_length);
if (nws_length - last_length == 1 && Character.toLowerCase(buffer.charAt(last_length)) == 'q') {
buffer.setLength(last_length - 1);
nws_length=buffer.length();
last_length=nws_length;
state=State.Q_VALUE;
continue;
}
buffer.append(c);
last_length=++nws_length;
state=State.PARAM_VALUE;
continue;
}
buffer.append(c);
nws_length=buffer.length();
continue;
}
case PARAM_VALUE:
case Q_VALUE:
{
buffer.append(c);
nws_length=buffer.length();
continue;
}
}
}
}
}
}

{
  SelectChannelConnector connector=new SelectChannelConnector(){
    @Override protected SelectChannelEndPoint newEndPoint(    SocketChannel channel,    SelectSet selectSet,    SelectionKey key) throws IOException {
      SelectChannelEndPoint endp=new SelectChannelEndPoint(channel,selectSet,key,_maxIdleTime){
        int write;
        int read;
        @Override public int flush(        Buffer header,        Buffer buffer,        Buffer trailer) throws IOException {
          int x=write++ & 0xff;
          if (x < 8) {
            clearWritable();
            return 0;
          }
          if (x < 32)           return flush(header);
          return super.flush(header,buffer,trailer);
        }
        @Override public int flush(        Buffer buffer) throws IOException {
          int x=write++ & 0xff;
          if (x < 8) {
            clearWritable();
            return 0;
          }
          if (x < 32) {
            View v=new View(buffer);
            v.setPutIndex(v.getIndex() + 1);
            int l=super.flush(v);
            if (l > 0)             buffer.skip(l);
            clearWritable();
            return l;
          }
          return super.flush(buffer);
        }
        @Override public int fill(        Buffer buffer) throws IOException {
          int x=read++ & 0xff;
          if (x < 8)           return 0;
          if (x < 16 && buffer.space() >= 1) {
            NIOBuffer one=new IndirectNIOBuffer(1);
            int l=super.fill(one);
            if (l > 0)             buffer.put(one.peek(0));
            return l;
          }
          if (x < 24 && buffer.space() >= 2) {
            NIOBuffer two=new IndirectNIOBuffer(2);
            int l=super.fill(two);
            if (l > 0)             buffer.put(two.peek(0));
            if (l > 1)             buffer.put(two.peek(1));
            return l;
          }
          if (x < 64 && buffer.space() >= 3) {
            NIOBuffer three=new IndirectNIOBuffer(3);
            int l=super.fill(three);
            if (l > 0)             buffer.put(three.peek(0));
            if (l > 1)             buffer.put(three.peek(1));
            if (l > 2)             buffer.put(three.peek(2));
            return l;
          }
          return super.fill(buffer);
        }
      }
;
      endp.setConnection(selectSet.getManager().newConnection(channel,endp,key.attachment()));
      return endp;
    }
  }
;
  connector.setAcceptors(1);
  startServer(connector);
}

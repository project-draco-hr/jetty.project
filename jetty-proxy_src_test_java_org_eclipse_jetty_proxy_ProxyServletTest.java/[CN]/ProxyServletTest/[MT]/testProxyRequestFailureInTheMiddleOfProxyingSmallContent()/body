{
  final long proxyTimeout=1000;
  Map<String,String> proxyParams=new HashMap<>();
  proxyParams.put("timeout",String.valueOf(proxyTimeout));
  prepareProxy(proxyParams);
  final CountDownLatch chunk1Latch=new CountDownLatch(1);
  final int chunk1='q';
  final int chunk2='w';
  prepareServer(new HttpServlet(){
    @Override protected void service(    HttpServletRequest request,    HttpServletResponse response) throws ServletException, IOException {
      ServletOutputStream output=response.getOutputStream();
      output.write(chunk1);
      response.flushBuffer();
      await(chunk1Latch,5000);
      output.write(chunk2);
    }
    private boolean await(    CountDownLatch latch,    long ms) throws IOException {
      try {
        return latch.await(ms,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException x) {
        throw new InterruptedIOException();
      }
    }
  }
);
  InputStreamResponseListener listener=new InputStreamResponseListener();
  int port=serverConnector.getLocalPort();
  client.newRequest("localhost",port).send(listener);
  TimeUnit.MILLISECONDS.sleep(2 * proxyTimeout);
  Response response=listener.get(5,TimeUnit.SECONDS);
  Assert.assertEquals(504,response.getStatus());
  InputStream input=listener.getInputStream();
  Assert.assertEquals(-1,input.read());
  chunk1Latch.countDown();
  Result result=listener.await(5,TimeUnit.SECONDS);
  Assert.assertTrue(result.isSucceeded());
  Assert.assertEquals(-1,input.read());
  HttpDestinationOverHTTP destination=(HttpDestinationOverHTTP)client.getDestination("http","localhost",port);
  Assert.assertEquals(0,destination.getConnectionPool().getIdleConnections().size());
}

{
  SessionFuture sessionFuture=(SessionFuture)attachment;
  final SPDYClient client=sessionFuture.client;
  if (sslContextFactory != null) {
    SSLEngine engine=client.newSSLEngine(sslContextFactory,channel);
    SslConnection sslConnection=new SslConnection(engine,endPoint);
    endPoint.setConnection(sslConnection);
    final AsyncEndPoint sslEndPoint=sslConnection.getSslEndPoint();
    NextProtoNego.put(engine,new NextProtoNego.ClientProvider(){
      @Override public boolean supports(){
        return true;
      }
      @Override public String selectProtocol(      List<String> protocols){
        AsyncConnectionFactory connectionFactory=client.selectAsyncConnectionFactory(protocols);
        if (connectionFactory == null)         return null;
        AsyncConnection connection=connectionFactory.newAsyncConnection(channel,sslEndPoint,attachment);
        sslEndPoint.setConnection(connection);
        return connectionFactory.getProtocol();
      }
    }
);
    AsyncConnection connection=new EmptyAsyncConnection(sslEndPoint);
    sslEndPoint.setConnection(connection);
    startHandshake(engine);
    return sslConnection;
  }
 else {
    AsyncConnectionFactory connectionFactory=new ClientSPDY2AsyncConnectionFactory();
    AsyncConnection connection=connectionFactory.newAsyncConnection(channel,endPoint,attachment);
    endPoint.setConnection(connection);
    return connection;
  }
}

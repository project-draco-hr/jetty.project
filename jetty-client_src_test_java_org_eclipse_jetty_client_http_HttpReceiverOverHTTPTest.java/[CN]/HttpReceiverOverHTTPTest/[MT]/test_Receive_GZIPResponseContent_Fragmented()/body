{
  byte[] data={0,1,2,3,4,5,6,7,8,9};
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try (GZIPOutputStream gzipOutput=new GZIPOutputStream(baos)){
    gzipOutput.write(data);
  }
   byte[] gzip=baos.toByteArray();
  endPoint.setInput("" + "HTTP/1.1 200 OK\r\n" + "Content-Length: " + gzip.length + "\r\n"+ "Content-Encoding: gzip\r\n"+ "\r\n");
  HttpRequest request=(HttpRequest)client.newRequest("http://localhost");
  final CountDownLatch latch=new CountDownLatch(1);
  FutureResponseListener listener=new FutureResponseListener(request){
    @Override public void onContent(    Response response,    ByteBuffer content){
      boolean hadRemaining=content.hasRemaining();
      super.onContent(response,content);
      if (hadRemaining)       latch.countDown();
    }
  }
;
  HttpExchange exchange=new HttpExchange(destination,request,Collections.<Response.ResponseListener>singletonList(listener));
  connection.getHttpChannel().associate(exchange);
  exchange.requestComplete();
  exchange.terminateRequest(null);
  connection.getHttpChannel().receive();
  endPoint.reset();
  ByteBuffer buffer=ByteBuffer.wrap(gzip);
  int fragment=buffer.limit() - 1;
  buffer.limit(fragment);
  endPoint.setInput(buffer);
  connection.getHttpChannel().receive();
  endPoint.reset();
  buffer.limit(gzip.length);
  buffer.position(fragment);
  endPoint.setInput(buffer);
  connection.getHttpChannel().receive();
  ContentResponse response=listener.get(5,TimeUnit.SECONDS);
  Assert.assertNotNull(response);
  Assert.assertEquals(200,response.getStatus());
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  Assert.assertArrayEquals(data,response.getContent());
}

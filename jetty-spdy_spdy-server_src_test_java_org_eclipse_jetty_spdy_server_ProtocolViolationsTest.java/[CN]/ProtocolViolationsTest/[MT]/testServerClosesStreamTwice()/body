{
  ServerSocketChannel server=ServerSocketChannel.open();
  server.bind(new InetSocketAddress("localhost",0));
  Session session=startClient(new InetSocketAddress("localhost",server.socket().getLocalPort()),null);
  final CountDownLatch dataLatch=new CountDownLatch(2);
  session.syn(new SynInfo(false),new StreamFrameListener.Adapter(){
    @Override public void onData(    Stream stream,    DataInfo dataInfo){
      dataLatch.countDown();
    }
  }
);
  SocketChannel channel=server.accept();
  ByteBuffer readBuffer=ByteBuffer.allocate(1024);
  channel.read(readBuffer);
  readBuffer.flip();
  int streamId=readBuffer.getInt(8);
  Generator generator=new Generator(new MappedByteBufferPool(),new StandardCompressionFactory.StandardCompressor());
  ByteBuffer writeBuffer=generator.control(new SynReplyFrame(SPDY.V2,(byte)0,streamId,new Fields()));
  channel.write(writeBuffer);
  assertThat("SynReply is fully written",writeBuffer.hasRemaining(),is(false));
  byte[] bytes=new byte[1];
  writeBuffer=generator.data(streamId,bytes.length,new BytesDataInfo(bytes,true));
  channel.write(writeBuffer);
  assertThat("data is fully written",writeBuffer.hasRemaining(),is(false));
  writeBuffer.flip();
  channel.write(writeBuffer);
  assertThat("data is fully written",writeBuffer.hasRemaining(),is(false));
  Assert.assertFalse(dataLatch.await(1,TimeUnit.SECONDS));
  session.goAway().get(5,TimeUnit.SECONDS);
  server.close();
}

{
  HttpTester.Request request=HttpTester.newRequest();
  HttpTester.Response response;
  request.setMethod(method);
  request.setVersion("HTTP/1.0");
  request.setHeader("Host","tester");
  request.setHeader("Accept-Encoding",compressionType);
  if (ifmodifiedsince > 0)   request.setHeader(HttpHeader.IF_MODIFIED_SINCE.asString(),DateGenerator.formatDate(ifmodifiedsince));
  if (this.userAgent != null)   request.setHeader("User-Agent",this.userAgent);
  request.setURI("/context/" + requestedFilename);
  response=HttpTester.parseResponse(tester.getResponses(request.generate()));
  String contentLength=response.get("Content-Length");
  String transferEncoding=response.get("Transfer-Encoding");
  int qindex=compressionType.indexOf(";");
  if (qindex < 0)   Assert.assertThat("Response.header[Content-Encoding]",response.get("Content-Encoding"),containsString(compressionType));
 else   Assert.assertThat("Response.header[Content-Encoding]",response.get("Content-Encoding"),containsString(compressionType.substring(0,qindex)));
  Assert.assertThat(response.get("ETag"),Matchers.startsWith("W/"));
  File serverFile=testdir.getFile(serverFilename);
  String expected=IO.readToString(serverFile);
  String actual=null;
  ByteArrayInputStream bais=null;
  InputStream in=null;
  ByteArrayOutputStream out=null;
  try {
    bais=new ByteArrayInputStream(response.getContentBytes());
    if (compressionType.startsWith(GzipHandler.GZIP)) {
      in=new GZIPInputStream(bais);
    }
 else     if (compressionType.startsWith(GzipHandler.DEFLATE)) {
      in=new InflaterInputStream(bais,new Inflater(true));
    }
    out=new ByteArrayOutputStream();
    IO.copy(in,out);
    actual=out.toString(encoding);
    assertThat("Uncompressed contents",actual,equalTo(expected));
  }
  finally {
    IO.close(out);
    IO.close(in);
    IO.close(bais);
  }
  return response;
}

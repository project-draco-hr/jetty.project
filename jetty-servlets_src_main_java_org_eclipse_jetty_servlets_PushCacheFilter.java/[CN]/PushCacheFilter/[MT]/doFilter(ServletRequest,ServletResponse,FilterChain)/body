{
  if (HttpVersion.fromString(req.getProtocol()).getVersion() < 20) {
    chain.doFilter(req,resp);
    return;
  }
  long now=System.nanoTime();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpFields fields=Request.getBaseRequest(request).getHttpFields();
  boolean conditional=false;
  String referrer=null;
  loop:   for (int i=0; i < fields.size(); i++) {
    HttpField field=fields.getField(i);
    HttpHeader header=field.getHeader();
    if (header == null)     continue;
switch (header) {
case IF_MATCH:
case IF_MODIFIED_SINCE:
case IF_NONE_MATCH:
case IF_UNMODIFIED_SINCE:
      conditional=true;
    break loop;
case REFERER:
  referrer=field.getValue();
break;
default :
break;
}
}
if (LOG.isDebugEnabled()) LOG.debug("{} {} referrer={} conditional={}",request.getMethod(),request.getRequestURI(),referrer,conditional);
String path=URIUtil.addPaths(request.getServletPath(),request.getPathInfo());
if (referrer != null) {
HttpURI referrerURI=new HttpURI(referrer);
String host=referrerURI.getHost();
int port=referrerURI.getPort();
if (port <= 0) port=request.isSecure() ? 443 : 80;
boolean referredFromHere=_hosts.size() > 0 ? _hosts.contains(host) : host.equals(request.getServerName());
referredFromHere&=_ports.size() > 0 ? _ports.contains(port) : port == request.getServerPort();
if (referredFromHere) {
if ("GET".equalsIgnoreCase(request.getMethod())) {
String referrerPath=referrerURI.getPath();
if (referrerPath == null) referrerPath="/";
if (referrerPath.startsWith(request.getContextPath())) {
String referrerPathNoContext=referrerPath.substring(request.getContextPath().length());
if (!referrerPathNoContext.equals(path)) {
  PrimaryResource primaryResource=_cache.get(referrerPathNoContext);
  if (primaryResource != null) {
    long primaryTimestamp=primaryResource._timestamp.get();
    if (primaryTimestamp != 0) {
      RequestDispatcher dispatcher=request.getServletContext().getRequestDispatcher(path);
      if (now - primaryTimestamp < TimeUnit.MILLISECONDS.toNanos(_associatePeriod)) {
        ConcurrentMap<String,RequestDispatcher> associated=primaryResource._associated;
        if (associated.size() <= _maxAssociations) {
          if (associated.putIfAbsent(path,dispatcher) == null) {
            if (LOG.isDebugEnabled())             LOG.debug("Associated {} to {}",path,referrerPathNoContext);
          }
        }
 else {
          if (LOG.isDebugEnabled())           LOG.debug("Not associated {} to {}, exceeded max associations of {}",path,referrerPathNoContext,_maxAssociations);
        }
      }
 else {
        if (LOG.isDebugEnabled())         LOG.debug("Not associated {} to {}, outside associate period of {}ms",path,referrerPathNoContext,_associatePeriod);
      }
    }
  }
}
 else {
  if (LOG.isDebugEnabled())   LOG.debug("Not associated {} to {}, referring to self",path,referrerPathNoContext);
}
}
}
}
 else {
if (LOG.isDebugEnabled()) LOG.debug("External referrer {}",referrer);
}
}
PrimaryResource primaryResource=_cache.get(path);
if (primaryResource == null) {
PrimaryResource t=new PrimaryResource();
primaryResource=_cache.putIfAbsent(path,t);
primaryResource=primaryResource == null ? t : primaryResource;
primaryResource._timestamp.compareAndSet(0,now);
if (LOG.isDebugEnabled()) LOG.debug("Cached primary resource {}",path);
}
 else {
long last=primaryResource._timestamp.get();
if (last < _renew && primaryResource._timestamp.compareAndSet(last,now)) {
primaryResource._associated.clear();
if (LOG.isDebugEnabled()) LOG.debug("Clear associated resources for {}",path);
}
}
if (!conditional && !primaryResource._associated.isEmpty()) {
for (RequestDispatcher dispatcher : primaryResource._associated.values()) {
if (LOG.isDebugEnabled()) LOG.debug("Pushing {} for {}",dispatcher,path);
((Dispatcher)dispatcher).push(request);
}
}
chain.doFilter(request,resp);
}

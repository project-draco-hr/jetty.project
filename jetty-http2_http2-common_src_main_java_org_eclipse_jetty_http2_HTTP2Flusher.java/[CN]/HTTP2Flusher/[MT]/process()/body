{
  if (LOG.isDebugEnabled())   LOG.debug("Flushing {}",session);
synchronized (this) {
    if (terminated)     throw new ClosedChannelException();
    while (!windows.isEmpty()) {
      WindowEntry entry=windows.poll();
      entry.perform();
    }
    int sessionWindow=session.getSendWindow();
    int index=0;
    int size=frames.size();
    while (index < size) {
      Entry entry=frames.get(index);
      IStream stream=entry.stream;
      if (stream != null && stream.isReset() && !entry.isProtocol()) {
        remove(index);
        --size;
        resets.add(entry);
        if (LOG.isDebugEnabled())         LOG.debug("Gathered for reset {}",entry);
        continue;
      }
      int remaining=entry.dataRemaining();
      if (remaining > 0) {
        if (sessionWindow <= 0) {
          ++index;
          continue;
        }
        if (stream != null) {
          Integer streamWindow=streams.get(stream);
          if (streamWindow == null) {
            streamWindow=stream.updateSendWindow(0);
            streams.put(stream,streamWindow);
          }
          if (streamWindow <= 0) {
            ++index;
            continue;
          }
        }
        sessionWindow-=remaining;
        if (stream != null)         streams.put(stream,streams.get(stream) - remaining);
      }
      remove(index);
      --size;
      actives.add(entry);
      if (LOG.isDebugEnabled())       LOG.debug("Gathered for write {}",entry);
    }
    streams.clear();
  }
  for (int i=0; i < resets.size(); ++i) {
    Entry entry=resets.get(i);
    entry.reset();
  }
  resets.clear();
  if (actives.isEmpty()) {
    if (LOG.isDebugEnabled())     LOG.debug("Flushed {}",session);
    return Action.IDLE;
  }
  for (int i=0; i < actives.size(); ++i) {
    Entry entry=actives.get(i);
    Throwable failure=entry.generate(lease);
    if (failure != null) {
      failed(failure);
      return Action.SUCCEEDED;
    }
  }
  List<ByteBuffer> byteBuffers=lease.getByteBuffers();
  if (LOG.isDebugEnabled())   LOG.debug("Writing {} buffers ({} bytes) for {} frames {}",byteBuffers.size(),lease.getTotalLength(),actives.size(),actives);
  session.getEndPoint().write(this,byteBuffers.toArray(new ByteBuffer[byteBuffers.size()]));
  return Action.SCHEDULED;
}

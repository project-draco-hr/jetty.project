{
  CompressedResponseWrapper wrappedResponse=null;
  if (compressionType == null) {
    wrappedResponse=new CompressedResponseWrapper(request,response){
      @Override protected AbstractCompressedStream newCompressedStream(      HttpServletRequest request,      HttpServletResponse response) throws IOException {
        return new AbstractCompressedStream(null,request,this,_vary){
          @Override protected DeflaterOutputStream createStream() throws IOException {
            return null;
          }
        }
;
      }
    }
;
  }
 else   if (compressionType.equals(GZIP)) {
    wrappedResponse=new CompressedResponseWrapper(request,response){
      @Override protected AbstractCompressedStream newCompressedStream(      HttpServletRequest request,      HttpServletResponse response) throws IOException {
        return new AbstractCompressedStream(compressionType,request,this,_vary){
          @Override protected DeflaterOutputStream createStream() throws IOException {
            return new GZIPOutputStream(_response.getOutputStream(),_bufferSize);
          }
        }
;
      }
    }
;
  }
 else   if (compressionType.equals(DEFLATE)) {
    wrappedResponse=new CompressedResponseWrapper(request,response){
      @Override protected AbstractCompressedStream newCompressedStream(      HttpServletRequest request,      HttpServletResponse response) throws IOException {
        return new AbstractCompressedStream(compressionType,request,this,_vary){
          @Override protected DeflaterOutputStream createStream() throws IOException {
            return new DeflaterOutputStream(_response.getOutputStream(),new Deflater(_deflateCompressionLevel,_deflateNoWrap));
          }
        }
;
      }
    }
;
  }
 else {
    throw new IllegalStateException(compressionType + " not supported");
  }
  configureWrappedResponse(wrappedResponse);
  return wrappedResponse;
}

{
  CompressedResponseWrapper wrappedResponse=null;
  wrappedResponse=new CompressedResponseWrapper(request,response){
    @Override protected AbstractCompressedStream newCompressedStream(    HttpServletRequest request,    HttpServletResponse response) throws IOException {
      return new AbstractCompressedStream(compressionType,request,this,_vary){
        private Deflater _allocatedDeflater;
        @Override protected DeflaterOutputStream createStream() throws IOException {
          if (compressionType == null) {
            return null;
          }
          _allocatedDeflater=_deflater.get();
          if (_allocatedDeflater == null)           _allocatedDeflater=new Deflater(_deflateCompressionLevel,_deflateNoWrap);
 else {
            _deflater.remove();
            _allocatedDeflater.reset();
          }
switch (compressionType) {
case GZIP:
            return new GzipOutputStream(_response.getOutputStream(),_allocatedDeflater,_bufferSize);
case DEFLATE:
          return new DeflaterOutputStream(_response.getOutputStream(),_allocatedDeflater,_bufferSize);
      }
      throw new IllegalStateException(compressionType + " not supported");
    }
    @Override public void finish() throws IOException {
      super.finish();
      if (_allocatedDeflater != null && _deflater.get() == null) {
        _deflater.set(_allocatedDeflater);
      }
    }
  }
;
}
}
;
configureWrappedResponse(wrappedResponse);
return wrappedResponse;
}

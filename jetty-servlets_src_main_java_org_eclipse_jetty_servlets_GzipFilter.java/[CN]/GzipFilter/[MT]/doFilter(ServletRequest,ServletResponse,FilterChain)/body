{
  LOG.debug("{} doFilter {}",this,req);
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  String requestURI=request.getRequestURI();
  if (!_methods.contains(request.getMethod())) {
    LOG.debug("{} excluded by method {}",this,request);
    super.doFilter(request,response,chain);
    return;
  }
  if (isExcludedPath(requestURI)) {
    LOG.debug("{} excluded by path {}",this,request);
    super.doFilter(request,response,chain);
    return;
  }
  if (_mimeTypes.size() > 0 && _excludeMimeTypes) {
    String mimeType=_context.getMimeType(request.getRequestURI());
    if (mimeType != null) {
      mimeType=MimeTypes.getContentTypeWithoutCharset(mimeType);
      if (_mimeTypes.contains(mimeType)) {
        LOG.debug("{} excluded by path suffix {}",this,request);
        super.doFilter(request,response,chain);
        return;
      }
    }
  }
  if (response.getHeader("Content-Encoding") != null) {
    super.doFilter(request,response,chain);
    return;
  }
  if (_checkGzExists && request.getServletContext() != null) {
    String path=request.getServletContext().getRealPath(URIUtil.addPaths(request.getServletPath(),request.getPathInfo()));
    if (path != null) {
      File gz=new File(path + ".gz");
      if (gz.exists()) {
        LOG.debug("{} gzip exists {}",this,request);
        super.doFilter(request,response,chain);
        return;
      }
    }
  }
  String etag=request.getHeader("If-None-Match");
  if (etag != null) {
    if (etag.contains(ETAG_GZIP))     request.setAttribute(ETAG,etag.replace(ETAG_GZIP,""));
  }
  HttpChannel channel=HttpChannel.getCurrentHttpChannel();
  HttpOutput out=channel.getResponse().getHttpOutput();
  out.setInterceptor(new GzipHttpOutputInterceptor(this,_vary,channel,out.getFilter()));
  super.doFilter(request,response,chain);
}

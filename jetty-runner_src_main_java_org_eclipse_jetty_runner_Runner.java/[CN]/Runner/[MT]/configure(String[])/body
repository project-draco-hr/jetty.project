{
  for (int i=0; i < args.length; i++) {
    if ("--lib".equals(args[i])) {
      try (Resource lib=Resource.newResource(args[++i])){
        if (!lib.exists() || !lib.isDirectory())         usage("No such lib directory " + lib);
        _classpath.addJars(lib);
      }
     }
 else     if ("--jar".equals(args[i])) {
      try (Resource jar=Resource.newResource(args[++i])){
        if (!jar.exists() || jar.isDirectory())         usage("No such jar " + jar);
        _classpath.addPath(jar);
      }
     }
 else     if ("--classes".equals(args[i])) {
      try (Resource classes=Resource.newResource(args[++i])){
        if (!classes.exists() || !classes.isDirectory())         usage("No such classes directory " + classes);
        _classpath.addPath(classes);
      }
     }
 else     if (args[i].startsWith("--"))     i++;
  }
  initClassLoader();
  LOG.info("Runner");
  LOG.debug("Runner classpath {}",_classpath);
  String contextPath=__defaultContextPath;
  boolean contextPathSet=false;
  int port=__defaultPort;
  String host=null;
  int stopPort=0;
  String stopKey=null;
  boolean runnerServerInitialized=false;
  for (int i=0; i < args.length; i++) {
switch (args[i]) {
case "--port":
      port=Integer.parseInt(args[++i]);
    break;
case "--host":
  host=args[++i];
break;
case "--stop-port":
stopPort=Integer.parseInt(args[++i]);
break;
case "--stop-key":
stopKey=args[++i];
break;
case "--log":
_logFile=args[++i];
break;
case "--out":
String outFile=args[++i];
PrintStream out=new PrintStream(new RolloverFileOutputStream(outFile,true,-1));
LOG.info("Redirecting stderr/stdout to " + outFile);
System.setErr(out);
System.setOut(out);
break;
case "--path":
contextPath=args[++i];
contextPathSet=true;
break;
case "--config":
if (_configFiles == null) _configFiles=new ArrayList<>();
_configFiles.add(args[++i]);
break;
case "--lib":
++i;
break;
case "--jar":
++i;
break;
case "--classes":
++i;
break;
case "--stats":
_enableStats=true;
_statsPropFile=args[++i];
_statsPropFile=("unsecure".equalsIgnoreCase(_statsPropFile) ? null : _statsPropFile);
break;
default :
if (!runnerServerInitialized) {
if (_server == null) {
_server=new Server();
}
if (_configFiles != null) {
for (String cfg : _configFiles) {
try (Resource resource=Resource.newResource(cfg)){
XmlConfiguration xmlConfiguration=new XmlConfiguration(resource.getURL());
xmlConfiguration.configure(_server);
}
 }
}
HandlerCollection handlers=(HandlerCollection)_server.getChildHandlerByClass(HandlerCollection.class);
if (handlers == null) {
handlers=new HandlerCollection();
_server.setHandler(handlers);
}
_contexts=(ContextHandlerCollection)handlers.getChildHandlerByClass(ContextHandlerCollection.class);
if (_contexts == null) {
_contexts=new ContextHandlerCollection();
prependHandler(_contexts,handlers);
}
if (_enableStats) {
if (handlers.getChildHandlerByClass(StatisticsHandler.class) == null) {
StatisticsHandler statsHandler=new StatisticsHandler();
Handler oldHandler=_server.getHandler();
statsHandler.setHandler(oldHandler);
_server.setHandler(statsHandler);
ServletContextHandler statsContext=new ServletContextHandler(_contexts,"/stats");
statsContext.addServlet(new ServletHolder(new StatisticsServlet()),"/");
statsContext.setSessionHandler(new SessionHandler());
if (_statsPropFile != null) {
HashLoginService loginService=new HashLoginService("StatsRealm",_statsPropFile);
Constraint constraint=new Constraint();
constraint.setName("Admin Only");
constraint.setRoles(new String[]{"admin"});
constraint.setAuthenticate(true);
ConstraintMapping cm=new ConstraintMapping();
cm.setConstraint(constraint);
cm.setPathSpec("/*");
ConstraintSecurityHandler securityHandler=new ConstraintSecurityHandler();
securityHandler.setLoginService(loginService);
securityHandler.setConstraintMappings(Collections.singletonList(cm));
securityHandler.setAuthenticator(new BasicAuthenticator());
statsContext.setSecurityHandler(securityHandler);
}
}
}
if (handlers.getChildHandlerByClass(DefaultHandler.class) == null) {
handlers.addHandler(new DefaultHandler());
}
_logHandler=(RequestLogHandler)handlers.getChildHandlerByClass(RequestLogHandler.class);
if (_logHandler == null) {
_logHandler=new RequestLogHandler();
handlers.addHandler(_logHandler);
}
Connector[] connectors=_server.getConnectors();
if (connectors == null || connectors.length == 0) {
ServerConnector connector=new ServerConnector(_server);
connector.setPort(port);
if (host != null) connector.setHost(host);
_server.addConnector(connector);
if (_enableStats) connector.addBean(new ConnectorStatistics());
}
 else {
if (_enableStats) {
for (Connector connector : connectors) {
((AbstractConnector)connector).addBean(new ConnectorStatistics());
}
}
}
runnerServerInitialized=true;
}
try (Resource ctx=Resource.newResource(args[i])){
if (!ctx.exists()) usage("Context '" + ctx + "' does not exist");
if (contextPathSet && !(contextPath.startsWith("/"))) contextPath="/" + contextPath;
if (!ctx.isDirectory() && ctx.toString().toLowerCase(Locale.ENGLISH).endsWith(".xml")) {
XmlConfiguration xmlConfiguration=new XmlConfiguration(ctx.getURL());
xmlConfiguration.getIdMap().put("Server",_server);
ContextHandler handler=(ContextHandler)xmlConfiguration.configure();
if (contextPathSet) handler.setContextPath(contextPath);
_contexts.addHandler(handler);
handler.setAttribute("org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern",__containerIncludeJarPattern);
}
 else {
WebAppContext webapp=new WebAppContext(_contexts,ctx.toString(),contextPath);
webapp.setConfigurationClasses(__plusConfigurationClasses);
webapp.setAttribute("org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern",__containerIncludeJarPattern);
}
}
 contextPathSet=false;
contextPath=__defaultContextPath;
break;
}
}
if (_server == null) usage("No Contexts defined");
_server.setStopAtShutdown(true);
switch ((stopPort > 0 ? 1 : 0) + (stopKey != null ? 2 : 0)) {
case 1:
usage("Must specify --stop-key when --stop-port is specified");
break;
case 2:
usage("Must specify --stop-port when --stop-key is specified");
break;
case 3:
ShutdownMonitor monitor=ShutdownMonitor.getInstance();
monitor.setPort(stopPort);
monitor.setKey(stopKey);
monitor.setExitVm(true);
break;
}
if (_logFile != null) {
NCSARequestLog requestLog=new NCSARequestLog(_logFile);
requestLog.setExtended(false);
_logHandler.setRequestLog(requestLog);
}
}

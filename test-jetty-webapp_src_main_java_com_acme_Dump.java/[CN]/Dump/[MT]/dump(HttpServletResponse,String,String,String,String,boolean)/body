{
  if (data != null && data.length() > 0) {
    long d=Long.parseLong(data);
    int b=(block != null && block.length() > 0) ? Integer.parseInt(block) : 50;
    byte[] buf=new byte[b];
    for (int i=0; i < b; i++) {
      buf[i]=(byte)('0' + (i % 10));
      if (i % 10 == 9)       buf[i]=(byte)'\n';
    }
    buf[0]='o';
    OutputStream out=response.getOutputStream();
    response.setContentType("text/plain");
    while (d > 0) {
      if (b == 1) {
        out.write(d % 80 == 0 ? '\n' : '.');
        d--;
      }
 else       if (d >= b) {
        out.write(buf);
        d=d - b;
      }
 else {
        out.write(buf,0,(int)d);
        d=0;
      }
      if (dribble != null) {
        out.flush();
        try {
          Thread.sleep(Long.parseLong(dribble));
        }
 catch (        Exception e) {
          e.printStackTrace();
          break;
        }
      }
    }
    if (flush)     out.flush();
    return true;
  }
  if (chars != null && chars.length() > 0) {
    long d=Long.parseLong(chars);
    int b=(block != null && block.length() > 0) ? Integer.parseInt(block) : 50;
    char[] buf=new char[b];
    for (int i=0; i < b; i++) {
      buf[i]=(char)('0' + (i % 10));
      if (i % 10 == 9)       buf[i]='\n';
    }
    buf[0]='o';
    response.setContentType("text/plain");
    PrintWriter out=response.getWriter();
    while (d > 0 && !out.checkError()) {
      if (b == 1) {
        out.write(d % 80 == 0 ? '\n' : '.');
        d--;
      }
 else       if (d >= b) {
        out.write(buf);
        d=d - b;
      }
 else {
        out.write(buf,0,(int)d);
        d=0;
      }
    }
    return true;
  }
  return false;
}

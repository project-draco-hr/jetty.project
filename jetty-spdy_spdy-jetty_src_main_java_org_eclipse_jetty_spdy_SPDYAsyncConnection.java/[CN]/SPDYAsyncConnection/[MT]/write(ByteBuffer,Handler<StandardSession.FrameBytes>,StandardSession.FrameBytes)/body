{
  int remaining=buffer.remaining();
  Buffer jettyBuffer=buffer.isDirect() ? new DirectNIOBuffer(buffer,false) : new IndirectNIOBuffer(buffer,false);
  AsyncEndPoint endPoint=getEndPoint();
  try {
    int written=endPoint.flush(jettyBuffer);
    logger.debug("Written {} bytes, {} remaining",written,jettyBuffer.length());
  }
 catch (  Exception x) {
    close(false);
    handler.failed(x);
  }
 finally {
    buffer.limit(jettyBuffer.putIndex());
    buffer.position(jettyBuffer.getIndex());
  }
  if (buffer.hasRemaining()) {
    this.writeBuffer=buffer;
    this.writeHandler=handler;
    this.writeContext=context;
    writePending=true;
    endPoint.scheduleWrite();
  }
 else {
    if (writePending) {
      this.writeBuffer=null;
      this.writeHandler=null;
      this.writeContext=null;
      writePending=false;
    }
    handler.completed(context);
  }
  return remaining - buffer.remaining();
}

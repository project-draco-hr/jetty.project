{
  Request request=client.newRequest(host,connector.getLocalPort()).scheme(scheme).method(method);
  if (clientClose)   request.header(HttpHeader.CONNECTION,"close");
 else   if (serverClose)   request.header("X-Close","true");
switch (method) {
case "GET":
    request.header("X-Download",String.valueOf(contentLength));
  break;
case "POST":
request.header("X-Upload",String.valueOf(contentLength));
request.content(new BytesContentProvider(new byte[contentLength]));
break;
}
final CountDownLatch requestLatch=new CountDownLatch(1);
request.send(new Response.Listener.Adapter(){
private final AtomicInteger contentLength=new AtomicInteger();
@Override public void onHeaders(Response response){
if (checkContentLength) {
String content=response.getHeaders().get("X-Content");
if (content != null) contentLength.set(Integer.parseInt(content));
}
}
@Override public void onContent(Response response,ByteBuffer content){
if (checkContentLength) contentLength.addAndGet(-content.remaining());
}
@Override public void onComplete(Result result){
if (result.isFailed()) {
result.getFailure().printStackTrace();
failures.add("Result failed " + result);
}
if (checkContentLength && contentLength.get() != 0) failures.add("Content length mismatch " + contentLength);
requestLatch.countDown();
latch.countDown();
}
}
);
requestLatch.await(5,TimeUnit.SECONDS);
}

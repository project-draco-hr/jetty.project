{
  HeadersGenerator generator=new HeadersGenerator(new HeaderGenerator(),new HpackEncoder());
  int streamId=13;
  HttpFields fields=new HttpFields();
  fields.put("Accept","text/html");
  fields.put("User-Agent","Jetty");
  MetaData.Request metaData=new MetaData.Request(HttpVersion.HTTP_2,HttpScheme.HTTP,"GET",new HostPortHttpField("localhost:8080"),"/path",fields);
  final List<HeadersFrame> frames=new ArrayList<>();
  Parser parser=new Parser(byteBufferPool,new Parser.Listener.Adapter(){
    @Override public boolean onHeaders(    HeadersFrame frame){
      frames.add(frame);
      return false;
    }
  }
);
  for (int i=0; i < 2; ++i) {
    ByteBufferPool.Lease lease=new ByteBufferPool.Lease(byteBufferPool);
    generator.generateHeaders(lease,streamId,metaData,false);
    frames.clear();
    for (    ByteBuffer buffer : lease.getByteBuffers()) {
      while (buffer.hasRemaining()) {
        parser.parse(buffer);
      }
    }
    Assert.assertEquals(1,frames.size());
    HeadersFrame frame=frames.get(0);
    Assert.assertEquals(streamId,frame.getStreamId());
    Assert.assertTrue(frame.isEndStream());
    MetaData.Request request=(MetaData.Request)frame.getMetaData();
    Assert.assertSame(metaData.getScheme(),request.getScheme());
    Assert.assertEquals(metaData.getMethod(),request.getMethod());
    Assert.assertEquals(metaData.getHost(),request.getHost());
    Assert.assertEquals(metaData.getPort(),request.getPort());
    Assert.assertEquals(metaData.getURI(),request.getURI());
    for (int j=0; j < fields.size(); ++j) {
      HttpField field=fields.getField(j);
      Assert.assertTrue(request.getFields().contains(field));
    }
  }
}

{
  HttpRequest request=(HttpRequest)result.getRequest();
  ContentResponse response=new HttpContentResponse(result.getResponse(),getContent(),getMediaType(),getEncoding());
  if (result.isFailed()) {
    Throwable failure=result.getFailure();
    LOG.debug("Authentication challenge failed {}",failure);
    forwardFailureComplete(request,result.getRequestFailure(),response,result.getResponseFailure());
    return;
  }
  HttpConversation conversation=request.getConversation();
  if (conversation.getAttribute(AUTHENTICATION_ATTRIBUTE) != null) {
    LOG.debug("Bad credentials for {}",request);
    forwardSuccessComplete(request,response);
    return;
  }
  HttpHeader header=getAuthenticateHeader();
  List<Authentication.HeaderInfo> headerInfos=parseAuthenticateHeader(response,header);
  if (headerInfos.isEmpty()) {
    LOG.debug("Authentication challenge without {} header",header);
    forwardFailureComplete(request,null,response,new HttpResponseException("HTTP protocol violation: Authentication challenge without " + header + " header",response));
    return;
  }
  Authentication authentication=null;
  Authentication.HeaderInfo headerInfo=null;
  URI uri=getAuthenticationURI(request);
  if (uri != null) {
    for (    Authentication.HeaderInfo element : headerInfos) {
      authentication=client.getAuthenticationStore().findAuthentication(element.getType(),uri,element.getRealm());
      if (authentication != null) {
        headerInfo=element;
        break;
      }
    }
  }
  if (authentication == null) {
    LOG.debug("No authentication available for {}",request);
    forwardSuccessComplete(request,response);
    return;
  }
  final Authentication.Result authnResult=authentication.authenticate(request,response,headerInfo,conversation);
  LOG.debug("Authentication result {}",authnResult);
  if (authnResult == null) {
    forwardSuccessComplete(request,response);
    return;
  }
  conversation.setAttribute(AUTHENTICATION_ATTRIBUTE,true);
  Request newRequest=client.copyRequest(request,request.getURI());
  authnResult.apply(newRequest);
  newRequest.onResponseSuccess(new Response.SuccessListener(){
    @Override public void onSuccess(    Response response){
      client.getAuthenticationStore().addAuthenticationResult(authnResult);
    }
  }
).send(null);
}

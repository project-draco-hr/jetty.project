{
  HttpRequest request=(HttpRequest)result.getRequest();
  ContentResponse response=new HttpContentResponse(result.getResponse(),getContent(),getMediaType(),getEncoding());
  if (result.isFailed()) {
    Throwable failure=result.getFailure();
    if (LOG.isDebugEnabled())     LOG.debug("Authentication challenge failed {}",failure);
    forwardFailureComplete(request,result.getRequestFailure(),response,result.getResponseFailure());
    return;
  }
  HttpConversation conversation=request.getConversation();
  if (conversation.getAttribute(AUTHENTICATION_ATTRIBUTE) != null) {
    if (LOG.isDebugEnabled())     LOG.debug("Bad credentials for {}",request);
    forwardSuccessComplete(request,response);
    return;
  }
  HttpHeader header=getAuthenticateHeader();
  List<Authentication.HeaderInfo> headerInfos=parseAuthenticateHeader(response,header);
  if (headerInfos.isEmpty()) {
    if (LOG.isDebugEnabled())     LOG.debug("Authentication challenge without {} header",header);
    forwardFailureComplete(request,null,response,new HttpResponseException("HTTP protocol violation: Authentication challenge without " + header + " header",response));
    return;
  }
  Authentication authentication=null;
  Authentication.HeaderInfo headerInfo=null;
  URI authURI=getAuthenticationURI(request);
  if (authURI != null) {
    for (    Authentication.HeaderInfo element : headerInfos) {
      authentication=client.getAuthenticationStore().findAuthentication(element.getType(),authURI,element.getRealm());
      if (authentication != null) {
        headerInfo=element;
        break;
      }
    }
  }
  if (authentication == null) {
    if (LOG.isDebugEnabled())     LOG.debug("No authentication available for {}",request);
    forwardSuccessComplete(request,response);
    return;
  }
  try {
    final Authentication.Result authnResult=authentication.authenticate(request,response,headerInfo,conversation);
    if (LOG.isDebugEnabled())     LOG.debug("Authentication result {}",authnResult);
    if (authnResult == null) {
      forwardSuccessComplete(request,response);
      return;
    }
    conversation.setAttribute(AUTHENTICATION_ATTRIBUTE,true);
    URI requestURI=request.getURI();
    String path=null;
    if (HttpMethod.CONNECT.is(request.getMethod())) {
      String uri=request.getScheme() + "://" + request.getHost();
      int port=request.getPort();
      if (port > 0)       uri+=":" + port;
      requestURI=URI.create(uri);
      path=request.getPath();
    }
    Request newRequest=client.copyRequest(request,requestURI);
    if (path != null)     newRequest.path(path);
    authnResult.apply(newRequest);
    newRequest.onResponseSuccess(new Response.SuccessListener(){
      @Override public void onSuccess(      Response response){
        client.getAuthenticationStore().addAuthenticationResult(authnResult);
      }
    }
);
    Connection connection=(Connection)request.getAttributes().get(Connection.class.getName());
    if (connection != null)     connection.send(newRequest,null);
 else     newRequest.send(null);
  }
 catch (  Throwable x) {
    if (LOG.isDebugEnabled())     LOG.debug("Authentication failed",x);
    forwardFailureComplete(request,null,response,x);
  }
}

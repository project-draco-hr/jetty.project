{
  HttpClient client=getHttpClient();
  final HttpExchange exchange=getHttpExchanges().poll();
  if (LOG.isDebugEnabled())   LOG.debug("Processing exchange {} on {} of {}",exchange,connection,this);
  if (exchange == null) {
    if (!connectionPool.release(connection))     connection.close();
    if (!client.isRunning()) {
      if (LOG.isDebugEnabled())       LOG.debug("{} is stopping",client);
      connection.close();
    }
    return false;
  }
 else {
    final Request request=exchange.getRequest();
    Throwable cause=request.getAbortCause();
    if (cause != null) {
      if (LOG.isDebugEnabled())       LOG.debug("Aborted before processing {}: {}",exchange,cause);
      exchange.abort(cause);
    }
 else {
      SendFailure result=send(connection,exchange);
      if (result != null) {
        if (LOG.isDebugEnabled())         LOG.debug("Send failed {} for {}",result,exchange);
        if (result.retry) {
          if (enqueue(getHttpExchanges(),exchange))           return true;
        }
        request.abort(result.failure);
      }
    }
    return getHttpExchanges().peek() != null;
  }
}

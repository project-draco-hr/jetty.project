{
  try {
    int maxFormContentSize=-1;
    int maxFormKeys=-1;
    if (_context != null) {
      maxFormContentSize=_context.getContextHandler().getMaxFormContentSize();
      maxFormKeys=_context.getContextHandler().getMaxFormKeys();
    }
    if (maxFormContentSize < 0) {
      Object obj=_channel.getServer().getAttribute("org.eclipse.jetty.server.Request.maxFormContentSize");
      if (obj == null)       maxFormContentSize=200000;
 else       if (obj instanceof Number) {
        Number size=(Number)obj;
        maxFormContentSize=size.intValue();
      }
 else       if (obj instanceof String) {
        maxFormContentSize=Integer.valueOf((String)obj);
      }
    }
    if (maxFormKeys < 0) {
      Object obj=_channel.getServer().getAttribute("org.eclipse.jetty.server.Request.maxFormKeys");
      if (obj == null)       maxFormKeys=1000;
 else       if (obj instanceof Number) {
        Number keys=(Number)obj;
        maxFormKeys=keys.intValue();
      }
 else       if (obj instanceof String) {
        maxFormKeys=Integer.valueOf((String)obj);
      }
    }
    int contentLength=getContentLength();
    if (contentLength > maxFormContentSize && maxFormContentSize > 0) {
      throw new IllegalStateException("Form too large: " + contentLength + " > "+ maxFormContentSize);
    }
    InputStream in=getInputStream();
    if (_input.isAsync())     throw new IllegalStateException("Cannot extract parameters with async IO");
    UrlEncoded.decodeTo(in,params,getCharacterEncoding(),contentLength < 0 ? maxFormContentSize : -1,maxFormKeys);
  }
 catch (  IOException e) {
    if (LOG.isDebugEnabled())     LOG.warn(e);
 else     LOG.warn(e.toString());
  }
}

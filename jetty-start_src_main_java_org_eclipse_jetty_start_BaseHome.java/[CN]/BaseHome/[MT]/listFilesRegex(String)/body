{
  Objects.requireNonNull(regex,"Glob cannot be null");
  Pattern pattern=Pattern.compile(regex);
  List<File> homeFiles=new ArrayList<>();
  if (FS.canReadDirectory(homeDir)) {
    StartLog.debug("Finding files in ${jetty.home} that match: %s",regex);
    recurseDir(homeFiles,homeDir,new FS.RelativeRegexFilter(homeDir,pattern));
    StartLog.debug("Found %,d files",homeFiles.size());
  }
  if (isBaseDifferent()) {
    List<File> ret=new ArrayList<>();
    if (FS.canReadDirectory(baseDir)) {
      List<File> baseFiles=new ArrayList<>();
      StartLog.debug("Finding files in ${jetty.base} that match: %s",regex);
      recurseDir(baseFiles,baseDir,new FS.RelativeRegexFilter(baseDir,pattern));
      StartLog.debug("Found %,d files",baseFiles.size());
      for (      File base : baseFiles) {
        String relpath=toRelativePath(baseDir,base);
        File home=new File(homeDir,FS.separators(relpath));
        if (home.exists()) {
          homeFiles.remove(home);
        }
        ret.add(base);
      }
    }
    ret.addAll(homeFiles);
    StartLog.debug("Merged Files: %,d files%n",ret.size());
    Collections.sort(ret,new NaturalSort.Files());
    return ret;
  }
 else {
    Collections.sort(homeFiles,new NaturalSort.Files());
    return homeFiles;
  }
}

{
  StartLog.debug("getPaths('%s')",pattern);
  List<Path> hits=new ArrayList<>();
  if (PathMatchers.isAbsolute(pattern)) {
    Path root=PathMatchers.getSearchRoot(pattern);
    PathMatcher matcher=PathMatchers.getMatcher(pattern);
    if (FS.isValidDirectory(root)) {
      PathFinder finder=new PathFinder();
      finder.setIncludeDirsInResults(true);
      finder.setFileMatcher(matcher);
      finder.setBase(root);
      Files.walkFileTree(root,SEARCH_VISIT_OPTIONS,MAX_SEARCH_DEPTH,finder);
      hits.addAll(finder.getHits());
    }
  }
 else {
    Path relativePath=PathMatchers.getSearchRoot(pattern);
    PathMatcher matcher=PathMatchers.getMatcher(pattern);
    PathFinder finder=new PathFinder();
    finder.setIncludeDirsInResults(true);
    finder.setFileMatcher(matcher);
    ListIterator<ConfigSource> iter=sources.reverseListIterator();
    while (iter.hasPrevious()) {
      ConfigSource source=iter.previous();
      if (source instanceof DirConfigSource) {
        DirConfigSource dirsource=(DirConfigSource)source;
        Path dir=dirsource.getDir();
        Path deepDir=dir.resolve(relativePath);
        if (FS.isValidDirectory(deepDir)) {
          finder.setBase(dir);
          Files.walkFileTree(deepDir,SEARCH_VISIT_OPTIONS,MAX_SEARCH_DEPTH,finder);
        }
      }
    }
    hits.addAll(finder.getHits());
  }
  Collections.sort(hits,new NaturalSort.Paths());
  return hits;
}

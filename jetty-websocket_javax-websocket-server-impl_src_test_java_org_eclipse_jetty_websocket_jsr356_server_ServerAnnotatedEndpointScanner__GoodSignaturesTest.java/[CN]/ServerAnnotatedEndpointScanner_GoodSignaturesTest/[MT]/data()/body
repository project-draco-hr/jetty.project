{
  List<Case[]> data=new ArrayList<>();
  Field fOpen=findFieldRef(AnnotatedServerEndpointMetadata.class,"onOpen");
  Field fClose=findFieldRef(AnnotatedServerEndpointMetadata.class,"onClose");
  Field fError=findFieldRef(AnnotatedServerEndpointMetadata.class,"onError");
  Field fText=findFieldRef(AnnotatedServerEndpointMetadata.class,"onText");
  Field fTextStream=findFieldRef(AnnotatedServerEndpointMetadata.class,"onTextStream");
  Field fBinary=findFieldRef(AnnotatedServerEndpointMetadata.class,"onBinary");
  Field fBinaryStream=findFieldRef(AnnotatedServerEndpointMetadata.class,"onBinaryStream");
  Field fPong=findFieldRef(AnnotatedServerEndpointMetadata.class,"onPong");
  Case.add(data,BasicOpenSocket.class,fOpen);
  Case.add(data,BasicOpenSessionSocket.class,fOpen,Session.class);
  Case.add(data,BasicCloseSocket.class,fClose);
  Case.add(data,BasicCloseReasonSocket.class,fClose,CloseReason.class);
  Case.add(data,BasicCloseReasonSessionSocket.class,fClose,CloseReason.class,Session.class);
  Case.add(data,BasicCloseSessionReasonSocket.class,fClose,Session.class,CloseReason.class);
  Case.add(data,BasicErrorSocket.class,fError);
  Case.add(data,BasicErrorSessionSocket.class,fError,Session.class);
  Case.add(data,BasicErrorSessionThrowableSocket.class,fError,Session.class,Throwable.class);
  Case.add(data,BasicErrorThrowableSocket.class,fError,Throwable.class);
  Case.add(data,BasicErrorThrowableSessionSocket.class,fError,Throwable.class,Session.class);
  Case.add(data,BasicTextMessageStringSocket.class,fText,String.class);
  Case.add(data,StatelessTextMessageStringSocket.class,fText,Session.class,String.class);
  Case.add(data,BooleanTextSocket.class,fText,Boolean.TYPE);
  Case.add(data,BooleanObjectTextSocket.class,fText,Boolean.class);
  Case.add(data,ByteTextSocket.class,fText,Byte.TYPE);
  Case.add(data,ByteObjectTextSocket.class,fText,Byte.class);
  Case.add(data,CharTextSocket.class,fText,Character.TYPE);
  Case.add(data,CharacterObjectTextSocket.class,fText,Character.class);
  Case.add(data,DoubleTextSocket.class,fText,Double.TYPE);
  Case.add(data,DoubleObjectTextSocket.class,fText,Double.class);
  Case.add(data,FloatTextSocket.class,fText,Float.TYPE);
  Case.add(data,FloatObjectTextSocket.class,fText,Float.class);
  Case.add(data,IntTextSocket.class,fText,Integer.TYPE);
  Case.add(data,IntegerObjectTextSocket.class,fText,Integer.class);
  Case.add(data,ShortTextSocket.class,fText,Short.TYPE);
  Case.add(data,ShortObjectTextSocket.class,fText,Short.class);
  Case.add(data,DateTextSocket.class,fText,Date.class);
  Case.add(data,ReaderParamSocket.class,fTextStream,Reader.class,String.class);
  Case.add(data,StringReturnReaderParamSocket.class,fTextStream,Reader.class,String.class);
  Case.add(data,BasicBinaryMessageByteBufferSocket.class,fBinary,ByteBuffer.class);
  Case.add(data,BasicPongMessageSocket.class,fPong,PongMessage.class);
  return data;
}

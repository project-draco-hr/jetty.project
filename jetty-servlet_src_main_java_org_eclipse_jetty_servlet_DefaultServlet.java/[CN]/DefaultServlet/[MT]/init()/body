{
  _servletContext=getServletContext();
  _contextHandler=initContextHandler(_servletContext);
  _mimeTypes=_contextHandler.getMimeTypes();
  _welcomes=_contextHandler.getWelcomeFiles();
  if (_welcomes == null)   _welcomes=new String[]{"index.html","index.jsp"};
  _acceptRanges=getInitBoolean("acceptRanges",_acceptRanges);
  _dirAllowed=getInitBoolean("dirAllowed",_dirAllowed);
  _redirectWelcome=getInitBoolean("redirectWelcome",_redirectWelcome);
  _gzip=getInitBoolean("gzip",_gzip);
  _pathInfoOnly=getInitBoolean("pathInfoOnly",_pathInfoOnly);
  if ("exact".equals(getInitParameter("welcomeServlets"))) {
    _welcomeExactServlets=true;
    _welcomeServlets=false;
  }
 else   _welcomeServlets=getInitBoolean("welcomeServlets",_welcomeServlets);
  _useFileMappedBuffer=getInitBoolean("useFileMappedBuffer",_useFileMappedBuffer);
  _relativeResourceBase=getInitParameter("relativeResourceBase");
  String rb=getInitParameter("resourceBase");
  if (rb != null) {
    if (_relativeResourceBase != null)     throw new UnavailableException("resourceBase & relativeResourceBase");
    try {
      _resourceBase=_contextHandler.newResource(rb);
    }
 catch (    Exception e) {
      LOG.warn(Log.EXCEPTION,e);
      throw new UnavailableException(e.toString());
    }
  }
  String css=getInitParameter("stylesheet");
  try {
    if (css != null) {
      _stylesheet=Resource.newResource(css);
      if (!_stylesheet.exists()) {
        LOG.warn("!" + css);
        _stylesheet=null;
      }
    }
    if (_stylesheet == null) {
      _stylesheet=Resource.newResource(this.getClass().getResource("/jetty-dir.css"));
    }
  }
 catch (  Exception e) {
    LOG.warn(e.toString());
    LOG.debug(e);
  }
  String cc=getInitParameter("cacheControl");
  if (cc != null)   _cacheControl=new PreEncodedHttpField(HttpHeader.CACHE_CONTROL,cc);
  String resourceCache=getInitParameter("resourceCache");
  int max_cache_size=getInitInt("maxCacheSize",-2);
  int max_cached_file_size=getInitInt("maxCachedFileSize",-2);
  int max_cached_files=getInitInt("maxCachedFiles",-2);
  if (resourceCache != null) {
    if (max_cache_size != -1 || max_cached_file_size != -2 || max_cached_files != -2)     LOG.debug("ignoring resource cache configuration, using resourceCache attribute");
    if (_relativeResourceBase != null || _resourceBase != null)     throw new UnavailableException("resourceCache specified with resource bases");
    _cache=(ResourceCache)_servletContext.getAttribute(resourceCache);
    if (LOG.isDebugEnabled())     LOG.debug("Cache {}={}",resourceCache,_contentFactory);
  }
  _etags=getInitBoolean("etags",_etags);
  try {
    if (_cache == null && (max_cached_files != -2 || max_cache_size != -2 || max_cached_file_size != -2)) {
      _cache=new ResourceCache(null,this,_mimeTypes,_useFileMappedBuffer,_etags,_gzip);
      if (max_cache_size >= 0)       _cache.setMaxCacheSize(max_cache_size);
      if (max_cached_file_size >= -1)       _cache.setMaxCachedFileSize(max_cached_file_size);
      if (max_cached_files >= -1)       _cache.setMaxCachedFiles(max_cached_files);
      _servletContext.setAttribute(resourceCache == null ? "resourceCache" : resourceCache,_cache);
    }
  }
 catch (  Exception e) {
    LOG.warn(Log.EXCEPTION,e);
    throw new UnavailableException(e.toString());
  }
  if (_cache != null)   _contentFactory=_cache;
 else {
    _contentFactory=new ResourceContentFactory(this,_mimeTypes,_gzip);
    if (resourceCache != null)     _servletContext.setAttribute(resourceCache,_contentFactory);
  }
  _gzipEquivalentFileExtensions=new ArrayList<String>();
  String otherGzipExtensions=getInitParameter("otherGzipFileExtensions");
  if (otherGzipExtensions != null) {
    StringTokenizer tok=new StringTokenizer(otherGzipExtensions,",",false);
    while (tok.hasMoreTokens()) {
      String s=tok.nextToken().trim();
      _gzipEquivalentFileExtensions.add((s.charAt(0) == '.' ? s : "." + s));
    }
  }
 else {
    _gzipEquivalentFileExtensions.add(".svgz");
  }
  _servletHandler=_contextHandler.getChildHandlerByClass(ServletHandler.class);
  for (  ServletHolder h : _servletHandler.getServlets())   if (h.getServletInstance() == this)   _defaultHolder=h;
  if (LOG.isDebugEnabled())   LOG.debug("resource base = " + _resourceBase);
}

{
  String servletPath=null;
  String pathInfo=null;
  Enumeration<String> reqRanges=null;
  Boolean included=request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI) != null;
  if (included != null && included.booleanValue()) {
    servletPath=(String)request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
    pathInfo=(String)request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
    if (servletPath == null) {
      servletPath=request.getServletPath();
      pathInfo=request.getPathInfo();
    }
  }
 else {
    included=Boolean.FALSE;
    servletPath=_pathInfoOnly ? "/" : request.getServletPath();
    pathInfo=request.getPathInfo();
    reqRanges=request.getHeaders(HttpHeader.RANGE.asString());
    if (!hasDefinedRange(reqRanges))     reqRanges=null;
  }
  String pathInContext=URIUtil.addPaths(servletPath,pathInfo);
  boolean endsWithSlash=(pathInfo == null ? request.getServletPath() : pathInfo).endsWith(URIUtil.SLASH);
  Resource resource=null;
  HttpContent content=null;
  try {
    String pathInContextGz=null;
    boolean gzip=false;
    if (!included.booleanValue() && _gzip && reqRanges == null && !endsWithSlash) {
      pathInContextGz=pathInContext + ".gz";
      if (_cache == null)       resource=getResource(pathInContextGz);
 else {
        content=_cache.lookup(pathInContextGz);
        resource=(content == null) ? null : content.getResource();
      }
      if (resource != null && resource.exists() && !resource.isDirectory()) {
        response.addHeader(HttpHeader.VARY.asString(),HttpHeader.ACCEPT_ENCODING.asString());
        String accept=request.getHeader(HttpHeader.ACCEPT_ENCODING.asString());
        if (accept != null && accept.indexOf("gzip") >= 0)         gzip=true;
      }
    }
    if (!gzip) {
      if (_cache == null)       resource=getResource(pathInContext);
 else {
        content=_cache.lookup(pathInContext);
        resource=content == null ? null : content.getResource();
      }
    }
    if (LOG.isDebugEnabled())     LOG.debug("uri=" + request.getRequestURI() + " resource="+ resource+ (content != null ? " content" : ""));
    if (resource == null || !resource.exists()) {
      if (included)       throw new FileNotFoundException("!" + pathInContext);
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
    }
 else     if (!resource.isDirectory()) {
      if (endsWithSlash && pathInContext.length() > 1) {
        String q=request.getQueryString();
        pathInContext=pathInContext.substring(0,pathInContext.length() - 1);
        if (q != null && q.length() != 0)         pathInContext+="?" + q;
        response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(_servletContext.getContextPath(),pathInContext)));
      }
 else {
        if (content == null)         content=new HttpContent.ResourceAsHttpContent(resource,_mimeTypes.getMimeByExtension(resource.toString()),response.getBufferSize(),_etags);
        if (included.booleanValue() || passConditionalHeaders(request,response,resource,content)) {
          if (gzip) {
            response.setHeader(HttpHeader.CONTENT_ENCODING.asString(),"gzip");
            String mt=_servletContext.getMimeType(pathInContext);
            if (mt != null)             response.setContentType(mt);
          }
          sendData(request,response,included.booleanValue(),resource,content,reqRanges);
        }
      }
    }
 else {
      String welcome=null;
      if (!endsWithSlash || (pathInContext.length() == 1 && request.getAttribute("org.eclipse.jetty.server.nullPathInfo") != null)) {
        StringBuffer buf=request.getRequestURL();
synchronized (buf) {
          int param=buf.lastIndexOf(";");
          if (param < 0)           buf.append('/');
 else           buf.insert(param,'/');
          String q=request.getQueryString();
          if (q != null && q.length() != 0) {
            buf.append('?');
            buf.append(q);
          }
          response.setContentLength(0);
          response.sendRedirect(response.encodeRedirectURL(buf.toString()));
        }
      }
 else       if (null != (welcome=getWelcomeFile(pathInContext))) {
        LOG.debug("welcome={}",welcome);
        if (_redirectWelcome) {
          response.setContentLength(0);
          String q=request.getQueryString();
          if (q != null && q.length() != 0)           response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(_servletContext.getContextPath(),welcome) + "?" + q));
 else           response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(_servletContext.getContextPath(),welcome)));
        }
 else {
          RequestDispatcher dispatcher=request.getRequestDispatcher(welcome);
          if (dispatcher != null) {
            if (included.booleanValue())             dispatcher.include(request,response);
 else {
              request.setAttribute("org.eclipse.jetty.server.welcome",welcome);
              dispatcher.forward(request,response);
            }
          }
        }
      }
 else {
        content=new HttpContent.ResourceAsHttpContent(resource,_mimeTypes.getMimeByExtension(resource.toString()),_etags);
        if (included.booleanValue() || passConditionalHeaders(request,response,resource,content))         sendDirectory(request,response,resource,pathInContext);
      }
    }
  }
 catch (  IllegalArgumentException e) {
    LOG.warn(Log.EXCEPTION,e);
    if (!response.isCommitted())     response.sendError(500,e.getMessage());
  }
 finally {
    if (content != null)     content.release();
 else     if (resource != null)     resource.close();
  }
}

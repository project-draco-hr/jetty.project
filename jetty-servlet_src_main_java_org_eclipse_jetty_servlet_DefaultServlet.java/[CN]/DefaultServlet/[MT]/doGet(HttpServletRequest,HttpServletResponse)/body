{
  String servletPath=null;
  String pathInfo=null;
  Enumeration<String> reqRanges=null;
  boolean included=request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI) != null;
  if (included) {
    servletPath=(String)request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
    pathInfo=(String)request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
    if (servletPath == null) {
      servletPath=request.getServletPath();
      pathInfo=request.getPathInfo();
    }
  }
 else {
    servletPath=_pathInfoOnly ? "/" : request.getServletPath();
    pathInfo=request.getPathInfo();
    reqRanges=request.getHeaders(HttpHeader.RANGE.asString());
    if (!hasDefinedRange(reqRanges))     reqRanges=null;
  }
  String pathInContext=URIUtil.addPaths(servletPath,pathInfo);
  boolean endsWithSlash=(pathInfo == null ? request.getServletPath() : pathInfo).endsWith(URIUtil.SLASH);
  boolean gzippable=_gzip && !endsWithSlash && !included&& reqRanges == null;
  HttpContent content=null;
  boolean release_content=true;
  try {
    content=_contentFactory.getContent(pathInContext);
    if (LOG.isDebugEnabled())     LOG.info("content={}",content);
    if (content == null || !content.getResource().exists()) {
      if (included)       throw new FileNotFoundException("!" + pathInContext);
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
    if (content.getResource().isDirectory()) {
      sendWelcome(content,pathInContext,endsWithSlash,included,request,response);
      return;
    }
    if (endsWithSlash && pathInContext.length() > 1) {
      String q=request.getQueryString();
      pathInContext=pathInContext.substring(0,pathInContext.length() - 1);
      if (q != null && q.length() != 0)       pathInContext+="?" + q;
      response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(_servletContext.getContextPath(),pathInContext)));
      return;
    }
    if (!included && !passConditionalHeaders(request,response,content))     return;
    HttpContent gzip_content=gzippable ? content.getGzipContent() : null;
    if (gzip_content != null) {
      response.addHeader(HttpHeader.VARY.asString(),HttpHeader.ACCEPT_ENCODING.asString());
      String accept=request.getHeader(HttpHeader.ACCEPT_ENCODING.asString());
      if (accept != null && accept.indexOf("gzip") >= 0) {
        if (LOG.isDebugEnabled())         LOG.debug("gzip={}",gzip_content);
        content=gzip_content;
      }
    }
    if (isGzippedContent(pathInContext))     response.setHeader(HttpHeader.CONTENT_ENCODING.asString(),"gzip");
    release_content=sendData(request,response,included,content,reqRanges);
  }
 catch (  IllegalArgumentException e) {
    LOG.warn(Log.EXCEPTION,e);
    if (!response.isCommitted())     response.sendError(500,e.getMessage());
  }
 finally {
    if (release_content) {
      if (content != null)       content.release();
    }
  }
}

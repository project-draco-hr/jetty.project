{
  try {
    HttpGenerator generator=new HttpGenerator();
    HttpGenerator.Info info=_message.getInfo();
    System.err.println(info.getClass());
    System.err.println(info);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    ByteBuffer header=BufferUtil.allocate(8192);
    ByteBuffer buffer=BufferUtil.allocate(8192);
    ByteBuffer chunk=BufferUtil.allocate(16);
    ByteBuffer content=_message._content == null ? null : ByteBuffer.wrap(_message._content.toByteArray());
    loop:     while (true) {
      HttpGenerator.Result result=generator.generate(info,header,chunk,buffer,content,HttpGenerator.Action.COMPLETE);
switch (result) {
case NEED_BUFFER:
case NEED_HEADER:
case NEED_CHUNK:
case NEED_INFO:
        throw new IllegalStateException();
case FLUSH:
      if (BufferUtil.hasContent(header)) {
        out.write(BufferUtil.toArray(header));
        BufferUtil.clear(header);
      }
    if (BufferUtil.hasContent(chunk)) {
      out.write(BufferUtil.toArray(chunk));
      BufferUtil.clear(chunk);
    }
  if (BufferUtil.hasContent(buffer)) {
    out.write(BufferUtil.toArray(buffer));
    BufferUtil.clear(buffer);
  }
break;
case FLUSH_CONTENT:
if (BufferUtil.hasContent(header)) {
out.write(BufferUtil.toArray(header));
BufferUtil.clear(header);
}
if (BufferUtil.hasContent(chunk)) {
out.write(BufferUtil.toArray(chunk));
BufferUtil.clear(chunk);
}
if (BufferUtil.hasContent(content)) {
out.write(BufferUtil.toArray(content));
BufferUtil.clear(content);
}
break;
case OK:
case SHUTDOWN_OUT:
break loop;
}
}
return ByteBuffer.wrap(out.toByteArray());
}
 catch (IOException e) {
throw new RuntimeIOException(e);
}
}

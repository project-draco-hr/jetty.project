{
  StringBuilder request=new StringBuilder(512);
  request.append("GET /ctx/path/info");
  char s='?';
  for (  int w : writes) {
    request.append(s).append("w=").append(w);
    s='&';
  }
  request.append(" HTTP/1.1\r\n").append("Host: localhost\r\n").append("Connection: close\r\n");
  if (content != null)   request.append("Content-Length: ").append(content.length).append("\r\n").append("Content-Type: text/plain\r\n");
  request.append("\r\n");
  int port=_port;
  List<String> list=new ArrayList<>();
  try (Socket socket=new Socket("localhost",port)){
    socket.setSoTimeout(1000000);
    OutputStream out=socket.getOutputStream();
    out.write(request.toString().getBytes(StandardCharsets.ISO_8859_1));
    if (content != null && content.length > 0) {
      Thread.sleep(100);
      out.write(content[0]);
      Thread.sleep(100);
      int half=(content.length - 1) / 2;
      out.write(content,1,half);
      Thread.sleep(100);
      out.write(content,1 + half,content.length - half - 1);
    }
    BufferedReader in=new BufferedReader(new InputStreamReader(socket.getInputStream()),102400);
    String line=in.readLine();
    LOG.debug("response-line: " + line);
    Assert.assertThat(line,startsWith("HTTP/1.1 200 OK"));
    while (line != null) {
      line=in.readLine();
      LOG.debug("header-line:  " + line);
      if (line.length() == 0)       break;
    }
    while (true) {
      line=in.readLine();
      if (line == null)       break;
      LOG.debug("body:  " + brief(line));
      list.add(line);
      Thread.sleep(50);
    }
  }
   int w=0;
  for (  String line : list) {
    LOG.debug("line:  " + brief(line));
    if ("-".equals(line))     continue;
    assertEquals("Line Length",writes[w],line.length());
    assertEquals("Line Contents",line.charAt(0),'0' + (w % 10));
    w++;
    if (w < writes.length && writes[w] <= 0)     w++;
  }
  if (content != null)   Assert.assertEquals("Content Length",content.length,_read.get());
  return list;
}

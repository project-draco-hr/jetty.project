{
  Generator generator=new Generator(byteBufferPool);
  int streamId=13;
  int dependentStreamId=17;
  int weight=3;
  boolean exclusive=true;
  final List<PriorityFrame> frames=new ArrayList<>();
  Generator.Result result=generator.generatePriority(streamId,dependentStreamId,weight,exclusive);
  Parser parser=new Parser(new Parser.Listener.Adapter(){
    @Override public boolean onPriorityFrame(    PriorityFrame frame){
      frames.add(frame);
      return false;
    }
  }
);
  for (  ByteBuffer buffer : result.getByteBuffers()) {
    while (buffer.hasRemaining()) {
      parser.parse(ByteBuffer.wrap(new byte[]{buffer.get()}));
    }
  }
  Assert.assertEquals(1,frames.size());
  PriorityFrame frame=frames.get(0);
  Assert.assertEquals(streamId,frame.getStreamId());
  Assert.assertEquals(dependentStreamId,frame.getDependentStreamId());
  Assert.assertEquals(weight,frame.getWeight());
  Assert.assertEquals(exclusive,frame.isExclusive());
}

{
  return new Iterator<ByteBuffer>(){
    private final byte[] buffer=new byte[bufferSize];
    public boolean eof;
    @Override public boolean hasNext(){
      return !eof;
    }
    @Override public ByteBuffer next(){
      try {
        int read=stream.read(buffer);
        if (read > 0) {
          return onRead(buffer,0,read);
        }
 else         if (read < 0) {
          if (eof)           throw new NoSuchElementException();
          eof=true;
          return onRead(buffer,0,-1);
        }
 else {
          return onRead(buffer,0,0);
        }
      }
 catch (      IOException x) {
        throw (NoSuchElementException)new NoSuchElementException().initCause(x);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}

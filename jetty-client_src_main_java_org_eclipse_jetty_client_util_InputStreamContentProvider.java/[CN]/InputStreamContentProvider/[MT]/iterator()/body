{
  return new Iterator<ByteBuffer>(){
    private final byte[] bytes=new byte[bufferSize];
    private Exception failure;
    private ByteBuffer buffer;
    @Override public boolean hasNext(){
      try {
        int read=stream.read(bytes);
        if (read > 0) {
          buffer=onRead(bytes,0,read);
          return true;
        }
 else         if (read < 0) {
          close();
          return false;
        }
 else {
          buffer=BufferUtil.EMPTY_BUFFER;
          return true;
        }
      }
 catch (      Exception x) {
        if (failure == null) {
          failure=x;
          close();
          return true;
        }
        return false;
      }
    }
    @Override public ByteBuffer next(){
      ByteBuffer result=buffer;
      buffer=null;
      if (failure != null)       throw (NoSuchElementException)new NoSuchElementException().initCause(failure);
      if (result == null)       throw new NoSuchElementException();
      return result;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    private void close(){
      if (autoClose) {
        try {
          stream.close();
        }
 catch (        IOException x) {
          LOG.ignore(x);
        }
      }
    }
  }
;
}

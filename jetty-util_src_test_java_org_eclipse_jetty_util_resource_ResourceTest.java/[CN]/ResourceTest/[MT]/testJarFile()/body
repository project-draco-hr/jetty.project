{
  String s="jar:" + __userURL + "TestData/test.zip!/subdir/";
  Resource r=Resource.newResource(s);
  Set entries=new HashSet(Arrays.asList(r.list()));
  assertEquals(3,entries.size());
  assertTrue(entries.contains("alphabet"));
  assertTrue(entries.contains("numbers"));
  assertTrue(entries.contains("subsubdir/"));
  File extract=File.createTempFile("extract",null);
  if (extract.exists())   extract.delete();
  extract.mkdir();
  extract.deleteOnExit();
  r.copyTo(extract);
  Resource e=Resource.newResource(extract.getAbsolutePath());
  entries=new HashSet(Arrays.asList(e.list()));
  assertEquals(3,entries.size());
  assertTrue(entries.contains("alphabet"));
  assertTrue(entries.contains("numbers"));
  assertTrue(entries.contains("subsubdir/"));
  IO.delete(extract);
  s="jar:" + __userURL + "TestData/test.zip!/subdir/subsubdir/";
  r=Resource.newResource(s);
  entries=new HashSet(Arrays.asList(r.list()));
  assertEquals(2,entries.size());
  assertTrue(entries.contains("alphabet"));
  assertTrue(entries.contains("numbers"));
  extract=File.createTempFile("extract",null);
  if (extract.exists())   extract.delete();
  extract.mkdir();
  extract.deleteOnExit();
  r.copyTo(extract);
  e=Resource.newResource(extract.getAbsolutePath());
  entries=new HashSet(Arrays.asList(e.list()));
  assertEquals(2,entries.size());
  assertTrue(entries.contains("alphabet"));
  assertTrue(entries.contains("numbers"));
  IO.delete(extract);
}

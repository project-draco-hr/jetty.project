{
  String s="jar:" + __userURL + "TestData/extract.zip!/";
  Resource r=Resource.newResource(s);
  assertTrue(r instanceof JarResource);
  JarResource jarResource=(JarResource)r;
  File destParent=File.createTempFile("copyjar",null);
  if (destParent.exists())   destParent.delete();
  destParent.mkdir();
  destParent.deleteOnExit();
  File dest=new File(destParent.getCanonicalPath() + "/extract");
  if (dest.exists())   dest.delete();
  dest.mkdir();
  dest.deleteOnExit();
  jarResource.copyTo(dest);
  assertEquals(1,dest.listFiles().length);
  assertEquals(1,dest.getParentFile().listFiles().length);
  FilenameFilter dotdotFilenameFilter=new FilenameFilter(){
    public boolean accept(    File directory,    String name){
      return name.equals("dotdot.txt");
    }
  }
;
  assertEquals(0,dest.listFiles(dotdotFilenameFilter).length);
  assertEquals(0,dest.getParentFile().listFiles(dotdotFilenameFilter).length);
  FilenameFilter extractfileFilenameFilter=new FilenameFilter(){
    public boolean accept(    File directory,    String name){
      return name.equals("extract-filenotdir");
    }
  }
;
  assertEquals(0,dest.listFiles(extractfileFilenameFilter).length);
  assertEquals(0,dest.getParentFile().listFiles(extractfileFilenameFilter).length);
  FilenameFilter currentDirectoryFilenameFilter=new FilenameFilter(){
    public boolean accept(    File directory,    String name){
      return name.equals("current.txt");
    }
  }
;
  assertEquals(1,dest.listFiles(currentDirectoryFilenameFilter).length);
  assertEquals(0,dest.getParentFile().listFiles(currentDirectoryFilenameFilter).length);
  IO.delete(dest);
  assertFalse(dest.exists());
}

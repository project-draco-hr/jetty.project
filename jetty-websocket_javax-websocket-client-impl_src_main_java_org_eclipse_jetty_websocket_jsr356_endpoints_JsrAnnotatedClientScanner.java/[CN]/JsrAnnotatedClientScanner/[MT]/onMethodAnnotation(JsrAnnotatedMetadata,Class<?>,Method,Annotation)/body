{
  LOG.debug("onMethodAnnotation({}, {}, {}, {})",metadata,pojo,method,annotation);
  if (isAnnotation(annotation,WebSocketOpen.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertValidJsrSignature(method,WebSocketOpen.class,validOpenParams);
    assertUnset(metadata.onOpen,WebSocketOpen.class,method);
    metadata.onOpen=new CallableMethod(pojo,method);
    return;
  }
  if (isAnnotation(annotation,WebSocketClose.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertValidJsrSignature(method,WebSocketClose.class,validCloseParams);
    assertUnset(metadata.onClose,WebSocketClose.class,method);
    metadata.onClose=new CallableMethod(pojo,method);
    return;
  }
  if (isAnnotation(annotation,WebSocketError.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertValidJsrSignature(method,WebSocketError.class,validErrorParams);
    assertUnset(metadata.onError,WebSocketError.class,method);
    metadata.onError=new CallableMethod(pojo,method);
    return;
  }
  if (isAnnotation(annotation,WebSocketMessage.class)) {
    assertIsPublicNonStatic(method);
    JsrMessageCallableMethod callable=new JsrMessageCallableMethod(pojo,method);
    callable.setReturnType(method.getReturnType(),encoders);
    return;
  }
}

{
  LOG.debug("onMethodAnnotation({}, {}, {}, {})",metadata,pojo,method,annotation);
  if (isAnnotation(annotation,OnOpen.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertValidJsrSignature(method,OnOpen.class,validOpenParams);
    assertUnset(metadata.onOpen,OnOpen.class,method);
    metadata.onOpen=new CallableMethod(pojo,method);
    return;
  }
  if (isAnnotation(annotation,OnClose.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertValidJsrSignature(method,OnClose.class,validCloseParams);
    assertUnset(metadata.onClose,OnClose.class,method);
    metadata.onClose=new CallableMethod(pojo,method);
    return;
  }
  if (isAnnotation(annotation,OnError.class)) {
    assertIsPublicNonStatic(method);
    assertIsReturn(method,Void.TYPE);
    assertValidJsrSignature(method,OnError.class,validErrorParams);
    assertUnset(metadata.onError,OnError.class,method);
    metadata.onError=new CallableMethod(pojo,method);
    return;
  }
  if (isAnnotation(annotation,OnMessage.class)) {
    assertIsPublicNonStatic(method);
    JsrMessageCallableMethod callable=new JsrMessageCallableMethod(pojo,method,encoders,decoders);
    if (callable.isTextFormat()) {
      assertUnset(metadata.onText,OnMessage.class,method);
      metadata.onText=callable;
      return;
    }
    if (callable.isBinaryFormat()) {
      assertUnset(metadata.onBinary,OnMessage.class,method);
      metadata.onBinary=callable;
      return;
    }
    if (callable.isPongFormat()) {
      assertUnset(metadata.onPong,OnMessage.class,method);
      metadata.onPong=callable;
      return;
    }
    return;
  }
}

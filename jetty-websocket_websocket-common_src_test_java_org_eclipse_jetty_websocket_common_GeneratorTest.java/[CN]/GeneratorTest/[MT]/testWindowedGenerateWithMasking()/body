{
  byte payload[]=new byte[10240];
  Arrays.fill(payload,(byte)0x55);
  byte mask[]=new byte[]{0x2A,(byte)0xF0,0x0F,0x00};
  WebSocketFrame frame=new BinaryFrame().setPayload(payload);
  frame.setMask(mask);
  int windowSize=2929;
  WindowHelper helper=new WindowHelper(windowSize);
  ByteBuffer completeBuffer=helper.generateWindowed(frame);
  int expectedHeaderSize=8;
  int expectedSize=payload.length + expectedHeaderSize;
  int expectedParts=1;
  helper.assertTotalParts(expectedParts);
  helper.assertTotalBytes(payload.length + expectedHeaderSize);
  Assert.assertThat("Generated Buffer",completeBuffer.remaining(),is(expectedSize));
  WebSocketPolicy policy=WebSocketPolicy.newServerPolicy();
  Parser parser=new UnitParser(policy);
  IncomingFramesCapture capture=new IncomingFramesCapture();
  parser.setIncomingFramesHandler(capture);
  parser.parse(completeBuffer);
  WebSocketFrame actual=capture.getFrames().get(0);
  Assert.assertThat("Frame.opcode",actual.getOpCode(),is(OpCode.BINARY));
  Assert.assertThat("Frame.payloadLength",actual.getPayloadLength(),is(payload.length));
  ByteBuffer actualData=actual.getPayload().slice();
  Assert.assertThat("Frame.payload.remaining",actualData.remaining(),is(payload.length));
  while (actualData.remaining() > 0) {
    Assert.assertThat("Actual.payload[" + actualData.position() + "]",actualData.get(),is((byte)0x55));
  }
}

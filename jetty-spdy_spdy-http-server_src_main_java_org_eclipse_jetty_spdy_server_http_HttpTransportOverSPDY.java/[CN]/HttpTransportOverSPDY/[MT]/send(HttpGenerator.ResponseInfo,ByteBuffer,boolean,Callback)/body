{
  if (LOG.isDebugEnabled())   LOG.debug("send  {} {} {} {} last={}",this,stream,info,BufferUtil.toDetailString(content),lastContent);
  if (stream.isClosed() || stream.isReset()) {
    EofException exception=new EofException("stream closed");
    callback.failed(exception);
    return;
  }
  boolean hasContent=BufferUtil.hasContent(content);
  if (info != null) {
    if (!committed.compareAndSet(false,true)) {
      StreamException exception=new StreamException(stream.getId(),StreamStatus.PROTOCOL_ERROR,"Stream already committed!");
      callback.failed(exception);
      LOG.warn("Committed response twice.",exception);
      return;
    }
    short version=stream.getSession().getVersion();
    Fields headers=new Fields();
    HttpVersion httpVersion=HttpVersion.HTTP_1_1;
    headers.put(HTTPSPDYHeader.VERSION.name(version),httpVersion.asString());
    int status=info.getStatus();
    StringBuilder httpStatus=new StringBuilder().append(status);
    String reason=info.getReason();
    if (reason == null)     reason=HttpStatus.getMessage(status);
    if (reason != null)     httpStatus.append(" ").append(reason);
    headers.put(HTTPSPDYHeader.STATUS.name(version),httpStatus.toString());
    LOG.debug("HTTP < {} {}",httpVersion,httpStatus);
    HttpFields fields=info.getHttpFields();
    if (fields != null) {
      for (int i=0; i < fields.size(); ++i) {
        HttpFields.Field field=fields.getField(i);
        String name=field.getName();
        String value=field.getValue();
        headers.put(name,value);
        LOG.debug("HTTP < {}: {}",name,value);
      }
    }
    boolean close=!hasContent && lastContent;
    ReplyInfo reply=new ReplyInfo(headers,close);
    reply(stream,reply);
  }
  if (hasContent) {
    if (stream.isClosed() || stream.isReset())     callback.failed(new EofException("stream closed"));
 else     stream.data(new ByteBufferDataInfo(content,lastContent),endPoint.getIdleTimeout(),TimeUnit.MILLISECONDS,callback);
  }
 else   if (lastContent) {
    if (stream.isClosed() || stream.isReset())     callback.succeeded();
 else     stream.data(new ByteBufferDataInfo(BufferUtil.EMPTY_BUFFER,lastContent),endPoint.getIdleTimeout(),TimeUnit.MILLISECONDS,callback);
  }
 else   callback.succeeded();
}

{
  File testRoot=MavenTestingUtils.getTargetTestingDir(ContextHandlerGetResourceTest.class.getSimpleName());
  FS.ensureEmpty(testRoot);
  docroot=new File(testRoot,"docroot").getCanonicalFile().getAbsoluteFile();
  FS.ensureEmpty(docroot);
  File index=new File(docroot,"index.html");
  index.createNewFile();
  File sub=new File(docroot,"subdir");
  sub.mkdir();
  File data=new File(sub,"data.txt");
  data.createNewFile();
  File verylong=new File(sub,"TextFile.Long.txt");
  verylong.createNewFile();
  otherroot=new File(testRoot,"otherroot").getCanonicalFile().getAbsoluteFile();
  FS.ensureEmpty(otherroot);
  File other=new File(otherroot,"other.txt");
  other.createNewFile();
  File transit=new File(docroot.getParentFile(),"transit");
  transit.delete();
  if (OS.IS_UNIX) {
    File eightDotThree=new File(sub,"TEXTFI~1.TXT");
    Files.createSymbolicLink(eightDotThree.toPath(),verylong.toPath());
    Files.createSymbolicLink(new File(docroot,"other").toPath(),new File("../transit").toPath());
    Files.createSymbolicLink(transit.toPath(),otherroot.toPath());
    new File(docroot,"media/internal-physical/logs").mkdirs();
    Files.createSymbolicLink(new File(docroot,"media/internal").toPath(),new File(docroot,"media/internal-physical").toPath());
    new File(docroot,"var").mkdir();
    Files.createSymbolicLink(new File(docroot,"var/logs").toPath(),new File(docroot,"media/internal/logs").toPath());
    new File(docroot,"web").mkdir();
    Files.createSymbolicLink(new File(docroot,"web/logs").toPath(),new File(docroot,"var/logs").toPath());
    new File(docroot,"media/internal-physical/logs/file.log").createNewFile();
    System.err.println("docroot=" + docroot);
  }
  OS_ALIAS_SUPPORTED=new File(sub,"TEXTFI~1.TXT").exists();
  server=new Server();
  context=new ContextHandler("/");
  context.clearAliasChecks();
  context.addAliasCheck(new ContextHandler.ApproveNonExistentDirectoryAliases());
  context.setBaseResource(Resource.newResource(docroot));
  context.addAliasCheck(new ContextHandler.AliasCheck(){
    final AllowSymLinkAliasChecker symlinkcheck=new AllowSymLinkAliasChecker();
    @Override public boolean check(    String path,    Resource resource){
      if (allowAliases.get())       return true;
      if (allowSymlinks.get())       return symlinkcheck.check(path,resource);
      return allowAliases.get();
    }
  }
);
  server.setHandler(context);
  server.start();
}

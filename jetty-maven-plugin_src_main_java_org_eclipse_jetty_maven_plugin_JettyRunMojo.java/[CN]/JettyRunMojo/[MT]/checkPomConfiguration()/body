{
  try {
    if ((webAppSourceDirectory == null) || !webAppSourceDirectory.exists()) {
      getLog().info("webAppSourceDirectory" + (webAppSourceDirectory == null ? " not set." : (webAppSourceDirectory.getAbsolutePath() + " does not exist.")) + " Trying "+ DEFAULT_WEBAPP_SRC);
      webAppSourceDirectory=new File(project.getBasedir(),DEFAULT_WEBAPP_SRC);
      if (!webAppSourceDirectory.exists()) {
        getLog().info("webAppSourceDirectory " + webAppSourceDirectory.getAbsolutePath() + " does not exist. Trying "+ project.getBuild().getDirectory()+ File.separator+ FAKE_WEBAPP);
        File target=new File(project.getBuild().getDirectory());
        webAppSourceDirectory=new File(target,FAKE_WEBAPP);
        if (!webAppSourceDirectory.exists())         webAppSourceDirectory.mkdirs();
      }
    }
 else     getLog().info("Webapp source directory = " + webAppSourceDirectory.getCanonicalPath());
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Webapp source directory does not exist",e);
  }
  if (!"automatic".equalsIgnoreCase(reload) && !"manual".equalsIgnoreCase(reload)) {
    throw new MojoExecutionException("invalid reload mechanic specified, must be 'automatic' or 'manual'");
  }
 else {
    getLog().info("Reload Mechanic: " + reload);
  }
  try {
    if (classesDirectory != null) {
      if (!classesDirectory.exists())       getLog().info("Classes directory " + classesDirectory.getCanonicalPath() + " does not exist");
 else       getLog().info("Classes = " + classesDirectory.getCanonicalPath());
    }
 else     getLog().info("Classes directory not set");
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Location of classesDirectory does not exist");
  }
  extraScanTargets=new ArrayList<File>();
  if (scanTargets != null) {
    for (int i=0; i < scanTargets.length; i++) {
      getLog().info("Added extra scan target:" + scanTargets[i]);
      extraScanTargets.add(scanTargets[i]);
    }
  }
  if (scanTargetPatterns != null) {
    for (int i=0; i < scanTargetPatterns.length; i++) {
      Iterator itor=scanTargetPatterns[i].getIncludes().iterator();
      StringBuffer strbuff=new StringBuffer();
      while (itor.hasNext()) {
        strbuff.append((String)itor.next());
        if (itor.hasNext())         strbuff.append(",");
      }
      String includes=strbuff.toString();
      itor=scanTargetPatterns[i].getExcludes().iterator();
      strbuff=new StringBuffer();
      while (itor.hasNext()) {
        strbuff.append((String)itor.next());
        if (itor.hasNext())         strbuff.append(",");
      }
      String excludes=strbuff.toString();
      try {
        List<File> files=FileUtils.getFiles(scanTargetPatterns[i].getDirectory(),includes,excludes);
        itor=files.iterator();
        while (itor.hasNext())         getLog().info("Adding extra scan target from pattern: " + itor.next());
        List<File> currentTargets=extraScanTargets;
        if (currentTargets != null && !currentTargets.isEmpty())         currentTargets.addAll(files);
 else         extraScanTargets=files;
      }
 catch (      IOException e) {
        throw new MojoExecutionException(e.getMessage());
      }
    }
  }
}

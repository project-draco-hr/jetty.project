{
  try {
    if (BufferUtil.hasContent(_decryptedInput))     return BufferUtil.append(buffer,_decryptedInput);
    if (_encryptedInput == null)     _encryptedInput=_bufferPool.acquire(_sslEngine.getSession().getPacketBufferSize(),_encryptedDirectBuffers);
 else     BufferUtil.compact(_encryptedInput);
    ByteBuffer app_in;
    if (BufferUtil.space(buffer) > _sslEngine.getSession().getApplicationBufferSize())     app_in=buffer;
 else     if (_decryptedInput == null)     app_in=_decryptedInput=_bufferPool.acquire(_sslEngine.getSession().getApplicationBufferSize(),_decryptedDirectBuffers);
 else     app_in=_decryptedInput;
    while (true) {
      int net_filled=getEndPoint().fill(_encryptedInput);
      decryption:       while (true) {
        int pos=BufferUtil.flipToFill(app_in);
        SSLEngineResult unwrapResult;
        try {
          unwrapResult=_sslEngine.unwrap(_encryptedInput,app_in);
        }
  finally {
          BufferUtil.flipToFlush(app_in,pos);
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug("{} net={} unwrap {}",SslConnection.this,net_filled,unwrapResult.toString().replace('\n',' '));
          LOG.debug("{} filled {}",SslConnection.this,BufferUtil.toHexSummary(buffer));
        }
        HandshakeStatus handshakeStatus=_sslEngine.getHandshakeStatus();
        HandshakeStatus unwrapHandshakeStatus=unwrapResult.getHandshakeStatus();
        Status unwrapResultStatus=unwrapResult.getStatus();
        _underFlown=unwrapResultStatus == Status.BUFFER_UNDERFLOW || unwrapResultStatus == Status.OK && unwrapResult.bytesConsumed() == 0 && unwrapResult.bytesProduced() == 0;
        if (_underFlown) {
          if (net_filled < 0)           closeInbound();
          if (net_filled <= 0)           return net_filled;
        }
switch (unwrapResultStatus) {
case CLOSED:
{
switch (handshakeStatus) {
case NOT_HANDSHAKING:
{
                return -1;
              }
case NEED_TASK:
{
              _sslEngine.getDelegatedTask().run();
              continue;
            }
case NEED_WRAP:
{
            return -1;
          }
case NEED_UNWRAP:
{
          return -1;
        }
default :
{
        throw new IllegalStateException();
      }
  }
}
case BUFFER_UNDERFLOW:
case OK:
{
if (unwrapHandshakeStatus == HandshakeStatus.FINISHED && !_handshaken) {
  _handshaken=true;
  if (LOG.isDebugEnabled())   LOG.debug("{} {} handshook {}/{}",SslConnection.this,_sslEngine.getUseClientMode() ? "client" : "resumed server",_sslEngine.getSession().getProtocol(),_sslEngine.getSession().getCipherSuite());
}
if (_handshaken && handshakeStatus != HandshakeStatus.NOT_HANDSHAKING && !isRenegotiationAllowed()) {
  if (LOG.isDebugEnabled())   LOG.debug("{} renegotiation denied",SslConnection.this);
  closeInbound();
  return -1;
}
if (unwrapResult.bytesProduced() > 0) {
  if (app_in == buffer)   return unwrapResult.bytesProduced();
  return BufferUtil.append(buffer,_decryptedInput);
}
switch (handshakeStatus) {
case NOT_HANDSHAKING:
{
    if (_underFlown)     break decryption;
    continue;
  }
case NEED_TASK:
{
  _sslEngine.getDelegatedTask().run();
  continue;
}
case NEED_WRAP:
{
if (buffer == __FLUSH_CALLED_FILL) return 0;
_fillRequiresFlushToProgress=true;
flush(__FILL_CALLED_FLUSH);
if (BufferUtil.isEmpty(_encryptedOutput)) {
  _fillRequiresFlushToProgress=false;
  continue;
}
 else {
  return 0;
}
}
case NEED_UNWRAP:
{
if (_underFlown) break decryption;
continue;
}
default :
{
throw new IllegalStateException();
}
}
}
default :
{
throw new IllegalStateException();
}
}
}
}
}
 catch (IllegalStateException e) {
LOG.debug(e);
getEndPoint().close();
throw new EofException(e);
}
catch (Exception e) {
getEndPoint().close();
throw e;
}
 finally {
if (_flushRequiresFillToProgress) {
_flushRequiresFillToProgress=false;
getExecutor().execute(_runCompletWrite);
}
if (_encryptedInput != null && !_encryptedInput.hasRemaining()) {
_bufferPool.release(_encryptedInput);
_encryptedInput=null;
}
if (_decryptedInput != null && !_decryptedInput.hasRemaining()) {
_bufferPool.release(_decryptedInput);
_decryptedInput=null;
}
}
}

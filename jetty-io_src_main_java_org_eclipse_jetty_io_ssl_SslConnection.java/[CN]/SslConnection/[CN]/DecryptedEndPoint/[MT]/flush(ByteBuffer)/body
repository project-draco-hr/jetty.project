{
  if (LOG.isDebugEnabled()) {
    for (    ByteBuffer b : appOuts)     LOG.debug("{} flush {}",SslConnection.this,BufferUtil.toHexSummary(b));
  }
  try {
    if (_cannotAcceptMoreAppDataToFlush) {
      if (_sslEngine.isOutboundDone())       throw new EofException(new ClosedChannelException());
      return false;
    }
    if (_encryptedOutput == null)     _encryptedOutput=_bufferPool.acquire(_sslEngine.getSession().getPacketBufferSize(),_encryptedDirectBuffers);
    while (true) {
      BufferUtil.compact(_encryptedOutput);
      int pos=BufferUtil.flipToFill(_encryptedOutput);
      SSLEngineResult wrapResult;
      try {
        wrapResult=_sslEngine.wrap(appOuts,_encryptedOutput);
      }
  finally {
        BufferUtil.flipToFlush(_encryptedOutput,pos);
      }
      if (LOG.isDebugEnabled())       LOG.debug("{} wrap {}",SslConnection.this,wrapResult.toString().replace('\n',' '));
      Status wrapResultStatus=wrapResult.getStatus();
      boolean allConsumed=true;
      for (      ByteBuffer b : appOuts)       if (BufferUtil.hasContent(b))       allConsumed=false;
switch (wrapResultStatus) {
case CLOSED:
{
          if (BufferUtil.hasContent(_encryptedOutput)) {
            _cannotAcceptMoreAppDataToFlush=true;
            getEndPoint().flush(_encryptedOutput);
            getEndPoint().shutdownOutput();
            if (BufferUtil.hasContent(_encryptedOutput))             return false;
          }
 else {
            getEndPoint().shutdownOutput();
          }
          return allConsumed;
        }
case BUFFER_UNDERFLOW:
{
        throw new IllegalStateException();
      }
default :
{
      if (LOG.isDebugEnabled())       LOG.debug("{} wrap {} {}",SslConnection.this,wrapResultStatus,BufferUtil.toHexSummary(_encryptedOutput));
      if (wrapResult.getHandshakeStatus() == HandshakeStatus.FINISHED && !_handshaken) {
        _handshaken=true;
        if (LOG.isDebugEnabled())         LOG.debug("{} {} handshake succeeded {}/{}",SslConnection.this,_sslEngine.getUseClientMode() ? "resumed client" : "server",_sslEngine.getSession().getProtocol(),_sslEngine.getSession().getCipherSuite());
        notifyHandshakeSucceeded(_sslEngine);
      }
      HandshakeStatus handshakeStatus=_sslEngine.getHandshakeStatus();
      if (_handshaken && handshakeStatus != HandshakeStatus.NOT_HANDSHAKING && !isRenegotiationAllowed()) {
        if (LOG.isDebugEnabled())         LOG.debug("{} renegotiation denied",SslConnection.this);
        getEndPoint().shutdownOutput();
        return allConsumed;
      }
      if (BufferUtil.hasContent(_encryptedOutput))       if (!getEndPoint().flush(_encryptedOutput))       getEndPoint().flush(_encryptedOutput);
switch (handshakeStatus) {
case NOT_HANDSHAKING:
        if (!allConsumed && wrapResult.getHandshakeStatus() == HandshakeStatus.FINISHED && BufferUtil.isEmpty(_encryptedOutput))         continue;
      return allConsumed && BufferUtil.isEmpty(_encryptedOutput);
case NEED_TASK:
    _sslEngine.getDelegatedTask().run();
  continue;
case NEED_WRAP:
continue;
case NEED_UNWRAP:
if (appOuts[0] != __FILL_CALLED_FLUSH && !getFillInterest().isInterested()) {
_flushRequiresFillToProgress=true;
fill(__FLUSH_CALLED_FILL);
if (handshakeStatus == HandshakeStatus.NEED_WRAP) continue;
}
return allConsumed && BufferUtil.isEmpty(_encryptedOutput);
case FINISHED:
throw new IllegalStateException();
}
}
}
}
}
 catch (SSLHandshakeException x) {
notifyHandshakeFailed(_sslEngine,x);
close(x);
throw x;
}
catch (Throwable x) {
close(x);
throw x;
}
 finally {
releaseEncryptedOutputBuffer();
}
}
